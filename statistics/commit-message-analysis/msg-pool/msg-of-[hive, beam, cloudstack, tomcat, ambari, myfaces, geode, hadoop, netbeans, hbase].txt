AMBARI-25024 Config recommendation for add service request (benyoka) (#2704)

* AMBARI-25024 Config recommendation for add service request (benyoka)

* AMBARI-25024 review comments (benyoka)

* AMBARI-25024 fix unit test (benyoka)

* AMBARI-25024 fix unit tests, work without layout recommendation

* AMBARI-25024 fix merge compile issue (benyoka)

* AMBARI-25024 fix NPE (benyoka)
AMBARI-25030. Improve component-host association syntax in Add Service request (#2711)

AMBARI-25007. Process Kerberos descriptor for Add Service request (#2705)

AMBARI-25007. Process Kerberos descriptor for Add Service request (#2705)

AMBARI-24762. Ambari server continues to send request updates after all commands were completed. (#2441)

* AMBARI-24762. Ambari server continues to send request updates after all commands were completed. (mpapirkovskyy)

* AMBARI-24762. Ambari server continues to send request updates after all commands were completed. (mpapirkovskyy)
AMBARI-24322. Log Search / Ambari upgrade: db config consistency chec… (#1821)

* AMBARI-24322. Log Search / Ambari upgrade: db config consistency check has warnings (*-logearch-conf configs).

* AMBARI-24322. Remove unused variable.

* AMBARI-24322. Fix comment.
AMBARI-24322. Log Search / Ambari upgrade: db config consistency chec… (#1821)

* AMBARI-24322. Log Search / Ambari upgrade: db config consistency check has warnings (*-logearch-conf configs).

* AMBARI-24322. Remove unused variable.

* AMBARI-24322. Fix comment.
AMBARI-22982. Logsearch and Kafka broker fails to start (aonishuk)
AMBARI-22982. Logsearch and Kafka broker fails to start (aonishuk)
AMBARI-22115. Alerts for OneFS mpack (amagyar)
AMBARI-22731. Infra Manager - hdfs upload support for archiving Infra Solr
AMBARI-22138. When regenerating keytab files for a service, non-service-specific principals are affected (rlevas)
AMBARI-22138. When regenerating keytab files for a service, non-service-specific principals are affected (rlevas)
AMBARI-21803. Implement STOMP endpoint for alert definitions
Address comment
[BEAM-11530] Consider all kinds of annotatios on schema creation (#13622)

[BEAM-10114] Convert PubsubLiteIO to use an SDF for reads.
[BEAM-10114] Convert PubsubLiteIO to use an SDF for reads.
Fix test.
[BEAM-11159] Use GCP pubsub client for TestPubsub (#13273)

* use GCP pubsub client for TestPubsub

* checkNotNull instead of assert[BEAM-5504] Add Avro support to Pubsub table provider (#12780)

* [BEAM-5504] Add Avro support to Pubsub table provider

* spotless

* Change website and CHANGES.md

* create ParseException

* Move PayloadFormat into PubsubSchemaIOProvider

* make matcherNameHeightKnowsJS in avro return avro data

* Remove trailing whitespace

* Fix 3 spaces indents

* Add getParsePayloadFn to PubsubMessageToRow

* Change ISO_8859_1 to UTF_8

* Use generic record to generate avro bytes

* Use throws to the methods signatures instead of rethrowing an exception

* Remove testWritesRowsToPubsub[BEAM-5504] Add Avro support to Pubsub table provider (#12780)

* [BEAM-5504] Add Avro support to Pubsub table provider

* spotless

* Change website and CHANGES.md

* create ParseException

* Move PayloadFormat into PubsubSchemaIOProvider

* make matcherNameHeightKnowsJS in avro return avro data

* Remove trailing whitespace

* Fix 3 spaces indents

* Add getParsePayloadFn to PubsubMessageToRow

* Change ISO_8859_1 to UTF_8

* Use generic record to generate avro bytes

* Use throws to the methods signatures instead of rethrowing an exception

* Remove testWritesRowsToPubsubUse SimpleFunction instead of SerializableFunction
[BEAM-10845] Add Union support to AvroUtils (#12746)

[BEAM-10845] Add Union support to AvroUtils (#12746)[BEAM-10845] Add Union support to AvroUtils (#12746)

[BEAM-10845] Add Union support to AvroUtils (#12746)Add @SchemaCaseFormat, test with AutoValue beans and POJOs
[BEAM-10670] Add support for bundle finalization to DoFnOperator for non-portable streaming pipelines.

I used the UnboundedSourceFunction as a guide to implementing the bundle finalization hook for the DoFnOperator.
Since checkpointing support is only supported when using shutdownSourcesAfterIdleMs so I added a new validates runner task that runs a subset of the tests that rely on bundle finalization.

I also added support for Impulse translation for non-portable streaming pipelines.
[BEAM-10691] Use FlinkStateInternals#addWatermarkHoldUsage for timer output timestamp
Move value conversion logic out of ExpressionConverter
Convert static Function fields on ReflectHelpers to static methods

Previously, these were Guava Functions. Now they can just be static methods and
use a method reference to use them for any functional interface.
Inline trivial fields with overly-specific types in PipelineOptionsFactory
[BEAM-10502] Enable checker in zetasketch extension
Restructure IO to expose proto types instead of client library wrapper types, as the wrapper types expose guava in the api surface.
[BEAM-10305] Let StateRequestHandler for user state only use a single cache token

When the state cache is enabled in the Python SDK, the batch mode of the Flink
Runner currently only allows a single user state cell because a new cache token
is generated for each state cell; the caching code in the Python SDK Harness
only supports one cache token per user state handler.

Theoretically multiple cache tokens would work but would just be adding to the
payload. We should make sure to just send a single cache token in batch
mode (which is already the case in streaming)
Merge the 2 stages 'Gather and Sort' and 'Create Batches'

There is minimal benefit in separating these 2 stages, and significant
benefity in merging them: Gather and Sort encodes incoming
MutationGroups into a List<byte[]> which would contain up to 1GB.
This is then output (copied) to the CreateBatches where it is decoded
back into MutationGroups.

Removing this encode/decode should save up to 2GB of RAM.
Merge the 2 stages 'Gather and Sort' and 'Create Batches'

There is minimal benefit in separating these 2 stages, and significant
benefity in merging them: Gather and Sort encodes incoming
MutationGroups into a List<byte[]> which would contain up to 1GB.
This is then output (copied) to the CreateBatches where it is decoded
back into MutationGroups.

Removing this encode/decode should save up to 2GB of RAM.
[BEAM-8850,BEAM-8849] FlinkBatchTranslationContext respects input parameters during lookups. Add support for a multiple translation variants for a single urn.
[BEAM-8850,BEAM-8849] FlinkBatchTranslationContext respects input parameters during lookups. Add support for a multiple translation variants for a single urn.
[BEAM-8850,BEAM-8849] FlinkBatchTranslationContext respects input parameters during lookups. Add support for a multiple translation variants for a single urn.
[BEAM-9577] Update Java Runners to handle dependency-based artifact staging. (#11521)

Merge pull request #11154: [BEAM-1819] Key should be available in @OnTimer methods

Merge pull request #11154: [BEAM-1819] Key should be available in @OnTimer methods

Use futures, better error handling.
[BEAM-9733] Make up for timers set while processing the bundle

Due to the asynchronous nature of the bundle processing which includes access to
state and timers, the output watermark can only be advanced after the current
bundle has finished. Furthermore, we have to take care to only advance it to the
lowest newly set timer in the finished bundle. Otherwise we would be violating
the watermark contract.

Besides the problem of advancing the output watermark too soon, the current
model was also overly restrictive with handling the input watermark. The input
watermark would be pushed back until the end of the bundle. This is not
necessary as we can advance the input watermark freely during bundle processing
which can trigger timers as soon as they become eligible for firing. Special
care has to be taken to handle cleanup timers which may already fire when we
haven't collected all the timers from the SDK Harness. In case we end up with
new timers for a window for which the cleanup timer scheduled a cleanup at the
end of the bundle, we have to defer the cleanup and reschedule the cleanup
timer. Otherwise, we would lose all state for a timer.
[BEAM-9733] Make up for timers set while processing the bundle

Due to the asynchronous nature of the bundle processing which includes access to
state and timers, the output watermark can only be advanced after the current
bundle has finished. Furthermore, we have to take care to only advance it to the
lowest newly set timer in the finished bundle. Otherwise we would be violating
the watermark contract.

Besides the problem of advancing the output watermark too soon, the current
model was also overly restrictive with handling the input watermark. The input
watermark would be pushed back until the end of the bundle. This is not
necessary as we can advance the input watermark freely during bundle processing
which can trigger timers as soon as they become eligible for firing. Special
care has to be taken to handle cleanup timers which may already fire when we
haven't collected all the timers from the SDK Harness. In case we end up with
new timers for a window for which the cleanup timer scheduled a cleanup at the
end of the bundle, we have to defer the cleanup and reschedule the cleanup
timer. Otherwise, we would lose all state for a timer.
[BEAM-9733] Make up for timers set while processing the bundle

Due to the asynchronous nature of the bundle processing which includes access to
state and timers, the output watermark can only be advanced after the current
bundle has finished. Furthermore, we have to take care to only advance it to the
lowest newly set timer in the finished bundle. Otherwise we would be violating
the watermark contract.

Besides the problem of advancing the output watermark too soon, the current
model was also overly restrictive with handling the input watermark. The input
watermark would be pushed back until the end of the bundle. This is not
necessary as we can advance the input watermark freely during bundle processing
which can trigger timers as soon as they become eligible for firing. Special
care has to be taken to handle cleanup timers which may already fire when we
haven't collected all the timers from the SDK Harness. In case we end up with
new timers for a window for which the cleanup timer scheduled a cleanup at the
end of the bundle, we have to defer the cleanup and reschedule the cleanup
timer. Otherwise, we would lose all state for a timer.
[BEAM-9729, BEAM-8486] Runner-side bundle registration cleanup. (#11358)

[BEAM-4374, BEAM-6189] Delete and remove deprecated Metrics proto

This completes the migration off of the Metrics proto to the MonitoringInfo proto.
[BEAM-9430] Migrate from ProcessContext#updateWatermark to WatermarkEstimators
[BEAM-7274] Add DynamicMessage Schema support

Add DynamicMessage schema support. This is different from
generated classes as it uses the proto descriptors. It uses
the ProtoDomain as an index for searching embedded messages.
Merge pull request #10944: [BEAM-7274] optimize oneOf handling

[BEAM-9236] Mark missing Schema based classes and methods as Experimental

It also restricts access level to some methods that should not be exposed
[BEAM-8550] @RequiresTimeSortedInput: working with legacy flink and spark
[BEAM-7427] Refactore JmsCheckpointMark to be usage via Coder
[BEAM-9041] Add missing equals methods for GenericRecord <-> Row conversion
[BEAM-9041] Add missing equals methods for GenericRecord <-> Row conversion
[BEAM-5495] Use ClassGraph to detect classpath resources

ClassGraph seems to be able to detect the needed resources for all java
versions (both pre and post 8) and includes JPMS support. This is why it
is a good fit for the job. Other than that using it significantly
reduces code that otherwise would have to be maintained.

See: https://github.com/classgraph/classgraph for more info.

Note: it turned out that when starting some tests with ./gradlew, classgraph
detects .gradle/wrapper/dist/** jars. We then pass them to staging and
this causes problems - we cannot stage jars that are already in use by
gradlew tool.

Solution for that is to filter them out (we don't need gradle/wrapper
jars anyway).
[BEAM-8946] Publish collection size of data written during MongoDBIOIT run
[BEAM-8905] matching Java PCollectionTuple translation naming convention in expansion service with index only
[BEAM-8795] fix Spark runner build
[BEAM-3419] Flesh out iterable side inputs and key enumeration for multimaps in shared libraries (#10147)

This now removed the byte[] that was used as the key and exposed the SDKs coder specifically using the structural value for comparison.

Update portable Python to use the iterable state key. Note that this doesn't effect Dataflow since dataflow_runner.py converts all iterable side inputs into multimap right now and no SDK performs key enumeration yet.

Update both Flink and Spark to support iterable API and also key enumeration for multimaps. To minimize the extent of this change, I did the minimal modification for Dataflow. A follow-up PR will do the same for Dataflow and then enable multimap side input key enumeration and iterable lookup within various SDKs.[BEAM-3419] Flesh out iterable side inputs and key enumeration for multimaps in shared libraries (#10147)

This now removed the byte[] that was used as the key and exposed the SDKs coder specifically using the structural value for comparison.

Update portable Python to use the iterable state key. Note that this doesn't effect Dataflow since dataflow_runner.py converts all iterable side inputs into multimap right now and no SDK performs key enumeration yet.

Update both Flink and Spark to support iterable API and also key enumeration for multimaps. To minimize the extent of this change, I did the minimal modification for Dataflow. A follow-up PR will do the same for Dataflow and then enable multimap side input key enumeration and iterable lookup within various SDKs.[BEAM-8470] Clean no more needed KVHelpers
[BEAM-8470] Update KVHelpers.extractKey() to deal with WindowedValue and update GBK and CPK
[BEAM-8146,BEAM-8204,BEAM-8205] Add equals and hashCode to SchemaCoder and RowCoder (#9493)

[BEAM-8146,BEAM-8204,BEAM-8205] Add equals and hashCode to SchemaCoder and RowCoder (#9493)

[BEAM-8146,BEAM-8204,BEAM-8205] Add equals and hashCode to SchemaCoder and RowCoder (#9493)

[BEAM-8146,BEAM-8204,BEAM-8205] Add equals and hashCode to SchemaCoder and RowCoder (#9493)

[BEAM-8146,BEAM-8204,BEAM-8205] Add equals and hashCode to SchemaCoder and RowCoder (#9493)

[BEAM-8146,BEAM-8204,BEAM-8205] Add equals and hashCode to SchemaCoder and RowCoder (#9493)

Add separate testSQLRead and testSQLWrite test in BigQueryIT

Also adds additional capabilities to TestBigQuery:
- Insert rows into the test table
- Can assert table contents `now` rather than `eventually`

Also fixes NPE in getEstimatedSizeBytes encountered by testSQLRead
Also modify DataCatalogBigQueryIT to use insertRows
[BEAM-8394]: Add withDataSourceConfiguration() method in JdbcIO.ReadRows
refactor Flink and Spark contexts into separate classes
refactor Flink and Spark contexts into separate classes
refactor Flink and Spark contexts into separate classes
[BEAM-7600] borrow SDK harness management code into Spark runner
[BEAM-7600] borrow SDK harness management code into Spark runner
[BEAM-3489] add messageId coders to PubsubUnboundedSource.getOutputCoder()
[BEAM-3489] add messageId coders to PubsubUnboundedSource.getOutputCoder()
[BEAM-7543] ReduceByKey.combineBy must accept BinaryFunction<V, V, V>
[BEAM-7543] ReduceByKey.combineBy must accept BinaryFunction<V, V, V>
[BEAM-7044] portable Spark: support stateful dofns
[BEAM-7044] portable Spark: support stateful dofns
[BEAM-7044] portable Spark: support stateful dofns
Merge pull request #8620: [BEAM-6673] Add schema support to BigQuery reads

Make Jet Runner usable and documented
Add various Jet Runner fixes & improvements
fixup
[BEAM-6994] SamzaRunner: further improvements for upgrading Samza (#8221)


[BEAM-6865] share hasUnboundedPCollections method
[BEAM-6731] Move ExpansionService to core-construction-java

This moves the previously relocated ExpansionServer back to
core-construction-java.
Merge pull request #7353: [BEAM-4461] Support inner and outer style joins in CoGroup.

move shareable code from Flink runner to JobServerDriver
move shareable code from Flink runner to JobServerDriver
[BEAM-5987] Use Guava's Cache to control eviction of materialized side inputs
Comment typos and misc other nits (#7639)

Add field-specifier notation.
[BEAM-6237] Fix ULR not deleting artifacts after running jobs.

This change switches the ULR from using
LocalFileSystemArtifactStagerService to using
BeamFileSystemArtifactStagingService which has functionality to remove
artifacts after running a job. With this change ValidatesRunner tests
no longer leave huge amounts of artifacts when run with the ULR.
Merge pull request #7289: [BEAM-6240] Add a library of schema annotations for POJO and JavaBeans

Merge pull request #7267: [BEAM-4454] Support Avro POJO objects

* Add remaining Schema support for AVRO records:
  * Add support for SpecificRecord using ByteBuddy codegen.
  * Add helper methods for GenericRecord.
  * Fix uncovered bugs involving nullable support.
Merge pull request #7267: [BEAM-4454] Support Avro POJO objects

* Add remaining Schema support for AVRO records:
  * Add support for SpecificRecord using ByteBuddy codegen.
  * Add helper methods for GenericRecord.
  * Fix uncovered bugs involving nullable support.
Merge pull request #7267: [BEAM-4454] Support Avro POJO objects

* Add remaining Schema support for AVRO records:
  * Add support for SpecificRecord using ByteBuddy codegen.
  * Add helper methods for GenericRecord.
  * Fix uncovered bugs involving nullable support.
[BEAM-6200] Deprecate old HadoopInputFormatIO, move it into new
HadoopFormatIO
[BEAM-6079] Fix access level and clean up generics issues
[BEAM-6180] Remove duplicated IdGenerator from runner harness and use IdGenerator from fnexecution instead. (#7201)

[BEAM-6180] Remove duplicated IdGenerator from runner harness and use IdGenerator from fnexecution instead. (#7201)

[BEAM-6180] Remove duplicated IdGenerator from runner harness and use IdGenerator from fnexecution instead. (#7201)

[BEAM-5999] Generate input and output collections from timer specs.
Merge pull request #6883: [BEAM-4461] Resubmit PR to switch SQL over to schema transform


Switch SQL over to use the new Beam Group transform.
[BEAM-5248] Translators modified so they do not set coders to input `Pcollections`, but do set coders to the outpus `Pcollections`.
[BEAM-5195] Decomposition of `TopPerKey` was fixed. Documentatioin example and test added.
[BEAM-5077] Translators now use type information from `Operators` whenever possible. Way coders are resolved was refactored.
[BEAM-5077] Translators now use type information from `Operators` whenever possible. Way coders are resolved was refactored.
[BEAM-4851] All operators now carry their output and key (if applicable) type. Type aware wrappers where removed where possible.
[BEAM-4851] All operators now carry their output and key (if applicable) type. Type aware wrappers where removed where possible.
[BEAM-4851] All operators now carry their output and key (if applicable) type. Type aware wrappers where removed where possible.
[BEAM-4851] All operators now carry their output and key (if applicable) type. Type aware wrappers where removed where possible.
[BEAM-4851] All operators now carry their output and key (if applicable) type. Type aware wrappers where removed where possible.
[BEAM-4851] All operators now carry their output and key (if applicable) type. Type aware wrappers where removed where possible.
[BEAM-4478] corrections
[BEAM-4443] Builders of ReduceWindow operator extended to be able to expose windowing settings.
[BEAM-4443] Builders of CountByKey and SumByKey operators extended to be able to expose windowing settings.
[BEAM-4294] [BEAM-4360] Pull request review fixes. OperatorTranslator extended to allow more than one translator per operator.
[BEAM-4294] [BEAM-4360] Pull request review fixes. OperatorTranslator extended to allow more than one translator per operator.
[euphoria-beam] Avoid unneccessary lamda allocation with each element in DoFnCollector.
[euphoria-beam] Avoid unneccessary lamda allocation with each element in DoFnCollector.
Hbase bulk load add ALL permissions for Hbase user
[euphoria-core] #21 add builder javadocs to operators
[euphoria-flink] move to flink 1.4
[euphoria-spark] broadcast join code review.
#181 Code review.
#181 Code review.
#181 Code review.
 [euphoria-core] #161 replace Iterable with Stream in reducing operations
 [euphoria-local] fix findbug warning regarding random reuse
 [euphoria] #158 implemented external sorter for flink and spark
 [euphoria-benchmarks] make benchmarks part of the build
 [euphoria-benchmarks] make benchmarks part of the build
 [euphoria-benchmarks] make benchmarks part of the build
 [euphoria-inmem] #160 compilable, but with failing tests
 [euphoria-inmem] #160 compilable, but with failing tests
 [euphoria-fluent] #160 module compilable after change
 [euphoria-flink] #160 module compilable after changes
 [euphoria-flink] #160 module compilable after changes
 [euphoria-flink] #160 module compilable after changes
 [euphoria-flink] #160 module compilable after changes
 [euphoria-flink] #160 module compilable after changes
 [euphoria-flink] #160 module compilable after changes
 [euphoria-flink] #160 module compilable after changes
 [euphoria-flink] #160 module compilable after changes
 [euphoria-examples] #160 module compilable after changes
 [euphoria-operator-testkit] #160 compilable testkit after partitioning removal
 [euphoria-operator-testkit] #160 compilable testkit after partitioning removal
 [euphoria-operator-testkit] #160 compilable testkit after partitioning removal
 [euphoria-operator-testkit] #160 compilable testkit after partitioning removal
 [euphoria-operator-testkit] #160 compilable testkit after partitioning removal
 [euphoria-operator-testkit] #160 compilable testkit after partitioning removal
 [euphoria-operator-testkit] #160 compilable testkit after partitioning removal
 [euphoria-operator-testkit] #160 compilable testkit after partitioning removal
 [euphoria-operator-testkit] #160 compilable testkit after partitioning removal
 [euphoria-operator-testkit] #160 compilable testkit after partitioning removal
 [euphoria-operator-testkit] #160 compilable testkit after partitioning removal
 [euphoria-operator-testkit] #160 compilable testkit after partitioning removal
 [euphoria-core] #160 drop explicit partitions from ListDataSink
 [euphoria-core] #160 drop explicit partitions from ListDataSink
#119 [euphoria-flink] Rework event time assignment
#119 [euphoria-flink] Rework event time assignment
#119 [euphoria-flink] Rework event time assignment
#119 [euphoria-flink] Rework event time assignment
#119 [euphoria-flink] Rework event time assignment
#119 [euphoria-flink] Rework event time assignment
#119 [euphoria-flink] Rework event time assignment
#119 [euphoria-flink] Rework event time assignment
#119 [euphoria-flink] Rework event time assignment
#119 [euphoria-flink] Rework event time assignment
#119 [euphoria-flink] Rework event time assignment
#119 [euphoria-core/-inmem] Rework event time assignment
#119 [euphoria-core/-inmem] Rework event time assignment
#119 [euphoria-core/-inmem] Rework event time assignment
#119 [euphoria-core/-inmem] Rework event time assignment
#119 [euphoria-core/-inmem] Rework event time assignment
#119 [euphoria-core/-inmem] Rework event time assignment
#119 [euphoria-core/-inmem] Rework event time assignment
#119 [euphoria-core/-inmem] Rework event time assignment
#119 [euphoria-core/-inmem] Rework event time assignment
#119 [euphoria-core/-inmem] Rework event time assignment
#119 [euphoria-core/-inmem] Rework event time assignment
#119 [euphoria-core/-inmem] Rework event time assignment
#119 [euphoria-core/-inmem] Rework event time assignment
#119 [euphoria-core/-inmem] Rework event time assignment
#119 [euphoria-core/-inmem] Rework event time assignment
#105 Rework StateFactory API; Stabilize JoinState implementation
#! - javadoc refactoring#51 Replace StateCombiner with StateMerger
#! Register Triple and clean up in TopByKey

#! [euphoria-kafka] Properly quit read loop when interrupted
#! minor refactoring after review
#! Event time extractor function at operator level
#! Event time extractor function at operator level
#! inmem and flink executor implementation
#! [euphoria-ios] rebased on master
#! [euphoria-ios] added support for spark, finished presentation
#! [euphoria-ios] added support for spark, finished presentation
#! [euphoria-inmem] Ensure calling onElement on merged windows
#! [euphoria-core] Fixed timer registration in PeriodicTimeTrigger
#! [euphoria-core] Fixed timer registration in PeriodicTimeTrigger
#! [euphoria-core] Fixed timer registration in PeriodicTimeTrigger
#! Trigger API redesigned
#! [euphoria-ios review] removed several FIXMEs added test for TimeSliding windowing, correct passing of watermarks between operators
#! [euphoria-ios review] removed several FIXMEs added test for TimeSliding windowing, correct passing of watermarks between operators
#! [euphoria-ios review] removed several FIXMEs added test for TimeSliding windowing, correct passing of watermarks between operators
#! [euphoria-ios review] removed several FIXMEs added test for TimeSliding windowing, correct passing of watermarks between operators
#! [euphoria-ios review] removed several FIXMEs added test for TimeSliding windowing, correct passing of watermarks between operators
#! [euphoria-ios review] removed several FIXMEs added test for TimeSliding windowing, correct passing of watermarks between operators
#! [euphoria-*] Drop WindowedPair
#! [euphoria-flink] Provide Context#getWindow
#! [euphoria-flink] Provide Context#getWindow
#! [euphoria-flink] Provide Context#getWindow
#! [euphoria-flink] Provide Context#getWindow
#! tuned operator testkit for flink, passes on batch inputs
#! [euphoria-flink] Fix after rebase
#! [euphoria-flink] Fix after rebase
#! [euphoria-flink] Fix after rebase
#! implemented state storage for states in inmem executor
#! review
#! review
#! [euphoria-flink] Allow tuning window emission parameters
#! fixed ReduceWindow operator
#! [euphoria-flink] Correctly emit Pair instances out of join
#! [euphoria-flink] Attempt fixing window leak
#! [euphoria-flink] Perform conversion to/from window-elements in sink/sources just as in streaming mode
#! [euphoria-flink] Perform conversion to/from window-elements in sink/sources just as in streaming mode
#! refactored window to windowcontext and windowid
#! early triggering of window (replaces aggregating windows)
#! early triggering of window (replaces aggregating windows)
#! early triggering of window (replaces aggregating windows)
#! early triggering of window (replaces aggregating windows)
#! Avoid broadcasting too many times
#! Attached/DefaultWindowing emission
#! Propage window labels to operator output
#! Propage window labels to operator output
#! Propage window labels to operator output
#! simplified tests, added element discarding on closed windows
#! simplified tests, added element discarding on closed windows
#! Faster retrieval of active windows
#! Aligned count window
#! Aligned count window
#! added tests for flatmap, repartition and union, slightly cleaned code in inmem
#! DRY on computing sum
#! clone datasets to all consumers in inmem executor
Fix duplicate field names in SQL.
[BEAM-5332] Do not attempt to evict cache after shutdown (#6342)

Fix bugs.
Fix bugs.
Fix bugs.
[BEAM-4791] Move executor to Before/After and use InProcessEnvironmentFactory.
[BEAM-3971, BEAM-4284] Remove fromProto for Pipeline and PTransform translation.

This prevents runners from attempting to convert a pipeline proto into SDK pipeline construct. All runners should use the proto directly and utilities that work on the proto representation since there is no expectation that runners will be able to rehydrate all aspects of SDK constructs.
[BEAM-3971, BEAM-4284] Remove fromProto for Pipeline and PTransform translation.

This prevents runners from attempting to convert a pipeline proto into SDK pipeline construct. All runners should use the proto directly and utilities that work on the proto representation since there is no expectation that runners will be able to rehydrate all aspects of SDK constructs.
[BEAM-3971, BEAM-4284] Remove fromProto for Pipeline and PTransform translation.

This prevents runners from attempting to convert a pipeline proto into SDK pipeline construct. All runners should use the proto directly and utilities that work on the proto representation since there is no expectation that runners will be able to rehydrate all aspects of SDK constructs.
Fix Apex runner.
Fix Apex runner.
Fix Apex runner.
Fix Apex runner.
Fix Apex runner.
Fix Apex runner.
Fix Spark issue.
Fix Spark issue.
Fix Spark issue.
Finalize Samza Runner with gradle and findbugs issues
Fix cache references in portable flink runner
Allow ManagedChannelFactories to attach Interceptors

Expand the public API to add a `withInterceptors` method, which returns
a ManagedChannelFactory which will create calls via the same underlying
implementation, but with the provided interceptors attached.

Expand the implementation requirements to take a list of
ClientInterceptors, which must intercept any returned channel.

The public API to get a channel from a ManagedChannelFactory remains the
same.
Allow ManagedChannelFactories to attach Interceptors

Expand the public API to add a `withInterceptors` method, which returns
a ManagedChannelFactory which will create calls via the same underlying
implementation, but with the provided interceptors attached.

Expand the implementation requirements to take a list of
ClientInterceptors, which must intercept any returned channel.

The public API to get a channel from a ManagedChannelFactory remains the
same.
Implement new staging token contract in java SDK

The artifact staging service gRPC protocol was recently changed to allow
the staging service to serve multiple manifests.  This implements the
corresponding changes in the client code, as well as a few related
server-side cleanup tweaks.
Update to new JobInvoker/Invocation interface.
address comments

remove cost calculation
Move InProcessEnvironmentFactory to java-fn-execution

Use of InProcessEnvironmentFactory requires users to also depend on the
Java SDK harness.
Add a new DockerEnvironmentFactory Constructor

This uses the default DockerCommand "docker"
[BEAM-3813] Fix error-prone and other warnings for the AWS module
Clean up Portable Direct Runner package

Remove currently unsupported implementations.

Update types to more generic when obviously appropriate.
Add some more tests.
Changes based on review comments
Add RowJsonValueExtractors

Extract and validate json primitive types for stricter compatibility with java types
Add RowJsonValueExtractors

Extract and validate json primitive types for stricter compatibility with java types
Add RowJsonValueExtractors

Extract and validate json primitive types for stricter compatibility with java types
Add RowJsonValueExtractors

Extract and validate json primitive types for stricter compatibility with java types
Add RowJsonValueExtractors

Extract and validate json primitive types for stricter compatibility with java types
Add RowJsonValueExtractors

Extract and validate json primitive types for stricter compatibility with java types
Add RowJsonValueExtractors

Extract and validate json primitive types for stricter compatibility with java types
Add RowJsonValueExtractors

Extract and validate json primitive types for stricter compatibility with java types
[BEAM-3104] Set up state interfaces, wire into SDK harness client.

Allow for creating a BundleProcessor with a state delegator and an ActiveBundle with a state handler.
Add tests that cover aborting state handling if something upstream fails.
[BEAM-591] KafkaIO : Improve watermarks and support server side timestamps (#4680)

* Redesign how timestamps and watermarks are handled in KafkaIO.
 - Added TimestampPolicy that provides both record timestamps and
 watermarks.
 - built in policies for 'LogAppendTime' (server-time) ProcessingTime
 (default)
 - Ensure idle partitions don't hold watermark back
 - deprecated previous API to set functions for custom timestamps and
 watermarks.

* minor
Refactor BeamRecordType and BeamRecord

Add BeamRecordType.Field to simplify creation of BeamRecordType.
Replace constructors with factory methods.
Add Collectors to simplify creation from collections.
[BEAM-2926] Add support for side inputs to the runner harness.
[BEAM-2926] Add support for side inputs to the runner harness.
[BEAM-2926] Add support for side inputs to the runner harness.
Refactor code into idiomatic Java 8 style
Refactor code into idiomatic Java 8 style
Refactor code into idiomatic Java 8 style
Refactor code into idiomatic Java 8 style
Refactor code into idiomatic Java 8 style
Refactor code into idiomatic Java 8 style
Refactor code into idiomatic Java 8 style
Refactor code into idiomatic Java 8 style
Refactor code into idiomatic Java 8 style
Refactor code into idiomatic Java 8 style
Refactor code into idiomatic Java 8 style
Refactor code into idiomatic Java 8 style
Refactor code into idiomatic Java 8 style
Refactor code into idiomatic Java 8 style
Refactor code into idiomatic Java 8 style
Refactor code into idiomatic Java 8 style
Refactor code into idiomatic Java 8 style
Refactor code into idiomatic Java 8 style
Refactor code into idiomatic Java 8 style
Refactor code into idiomatic Java 8 style
Refactor code into idiomatic Java 8 style
Refactor code into idiomatic Java 8 style
Refactor code into idiomatic Java 8 style
Refactor code into idiomatic Java 8 style
Refactor code into idiomatic Java 8 style
Refactor code into idiomatic Java 8 style
Refactor code into idiomatic Java 8 style
Refactor code into idiomatic Java 8 style
Refactor code into idiomatic Java 8 style
Refactor code into idiomatic Java 8 style
Refactor code into idiomatic Java 8 style
Refactor code into idiomatic Java 8 style
Refactor code into idiomatic Java 8 style
Refactor code into idiomatic Java 8 style
Refactor code into idiomatic Java 8 style
Refactor code into idiomatic Java 8 style
Refactor code into idiomatic Java 8 style
Refactor code into idiomatic Java 8 style
Refactor code into idiomatic Java 8 style
Refactor code into idiomatic Java 8 style
Refactor code into idiomatic Java 8 style
Refactor code into idiomatic Java 8 style
Remove some comments on Java 7/8 only stuff that don't make sense anymore
Remove some comments on Java 7/8 only stuff that don't make sense anymore
Manual fixup of some call sites where lambdas mess up coder inference
Manual fixup of some call sites where lambdas mess up coder inference
Manual fixup of some call sites where lambdas mess up coder inference
Manual fixup of some call sites where lambdas mess up coder inference
Manual fixup of some call sites where lambdas mess up coder inference
Manual fixup of some call sites where lambdas mess up coder inference
Manual fixup of some call sites where lambdas mess up coder inference
Manual fixup of some call sites where lambdas mess up coder inference
Manual fixup of some call sites where lambdas mess up coder inference
Manual fixup of some call sites where lambdas mess up coder inference
Manual fixup of some call sites where lambdas mess up coder inference
Manual fixup of some call sites where lambdas mess up coder inference
Manual fixup of some call sites where lambdas mess up coder inference
Manual fixup of some call sites where lambdas mess up coder inference
Manual fixup of some call sites where lambdas mess up coder inference
Manual fixup of some call sites where lambdas mess up coder inference
Manual fixup of some call sites where lambdas mess up coder inference
Manual fixup of some call sites where lambdas mess up coder inference
Manual fixup of some call sites where lambdas mess up coder inference
Manual fixup of some call sites where lambdas mess up coder inference
Manual fixup of some call sites where lambdas mess up coder inference
Manual fixup of some call sites where lambdas mess up coder inference
Manual fixup of some call sites where lambdas mess up coder inference
Manual fixup of some call sites where lambdas mess up coder inference
Manual fixup of some call sites where lambdas mess up coder inference
Manual fixup of some call sites where lambdas mess up coder inference
Manual fixup of some call sites where lambdas mess up coder inference
Manual fixup of some call sites where lambdas mess up coder inference
Manual fixup of some call sites where lambdas mess up coder inference
Manual fixup of some call sites where lambdas mess up coder inference
Manual fixup of some call sites where lambdas mess up coder inference
Manual fixup of some call sites where lambdas mess up coder inference
Manual fixup of some call sites where lambdas mess up coder inference
Manual fixup of some call sites where lambdas mess up coder inference
Manual fixup of some call sites where lambdas mess up coder inference
Manual fixup of some call sites where lambdas mess up coder inference
Manual fixup of some call sites where lambdas mess up coder inference
Add a BundleProcessor to SdkHarnessClient

This is the abstraction to interact with a registered
ProcessBundleDescriptor.
KVM: Enhancements for direct download feature (#3374)

* Add revoke certificates API

* Add background task to sync certificates

* Fix marvin test and revoke certificate

* Fix certificate sent to hypervisor was missing headers

* Fix background task for uploading certificates to hosts
GEODE-8765: Fix NullPointerException when group-transaction-events an… (#5829)

* GEODE-8765: Fix NullPointerException when group-transaction-events and events in and not in transactions are sent.GEODE-8765: Fix NullPointerException when group-transaction-events an… (#5829)

* GEODE-8765: Fix NullPointerException when group-transaction-events and events in and not in transactions are sent.GEODE-8765: Fix NullPointerException when group-transaction-events an… (#5829)

* GEODE-8765: Fix NullPointerException when group-transaction-events and events in and not in transactions are sent.GEODE-5782: Try to improve memory reporting stats for Windows (#5648)

- In order to have a better chance to converge on values, reduce the
  sample rate and await for at most 5 sample periods before failing.GEODE-5782: Try to improve memory reporting stats for Windows (#5648)

- In order to have a better chance to converge on values, reduce the
  sample rate and await for at most 5 sample periods before failing.GEODE-5782: Try to improve memory reporting stats for Windows (#5648)

- In order to have a better chance to converge on values, reduce the
  sample rate and await for at most 5 sample periods before failing.GEODE-5782: Try to improve memory reporting stats for Windows (#5648)

- In order to have a better chance to converge on values, reduce the
  sample rate and await for at most 5 sample periods before failing.GEODE-8521: Add tests for CoreLoggingExecutors (#5757)

Cleanup constructors of logging executors and add tests for
CoreLoggingExecutors.GEODE-8610: Add parameter checking to unsupported Redis commands (#5635)

GEODE-8610: Add parameter checking to unsupported Redis commands (#5635)

GEODE-8610: Add parameter checking to unsupported Redis commands (#5635)

GEODE-8216: modify test (#5335)

* GEODE-8216: modify test

* GEODE-8216: refactor failing testcaseGEODE-8216: modify test (#5335)

* GEODE-8216: modify test

* GEODE-8216: refactor failing testcaseGEODE-8572: Make LogExporter not read dirs (#5595)

Changed LogExporter to refrain from attempting to read directories, even
when a directory's path matches the exporter's file selector predicates.

Changed LogExporterIntegrationTest to configure the server to write
files in a unique subdirectory of the current working directory. Some
tests were configuring the server to use a temporary folder that could
be reused by other tests.GEODE-8498: make AbstractSubscription write to channel synchronously (#5550)

Co-authored-by: Ray Ingles <ringles@vmware.com>
Co-authored-by: Darrel Schneider <darrel@vmware.com>
Co-authored-by: Jens Deppe <jdeppe@vmware.com>
Co-authored-by: Sarah Abbey <sabbey@vmware.com>GEODE-8425: Add new stats for handling netsearch
GEODE-8427: fix flaky test and do not throw memberDeparted (#5446)

* disabled test due to GEODE-8393
* SessionDUnitTests now use lettuce instead of jedis
This allows them to auto reconnect when servers go down
* fixed exception handling in test
GEODE-8427: fix flaky test and do not throw memberDeparted (#5446)

* disabled test due to GEODE-8393
* SessionDUnitTests now use lettuce instead of jedis
This allows them to auto reconnect when servers go down
* fixed exception handling in test
GEODE-8427: fix flaky test and do not throw memberDeparted (#5446)

* disabled test due to GEODE-8393
* SessionDUnitTests now use lettuce instead of jedis
This allows them to auto reconnect when servers go down
* fixed exception handling in test
GEODE-8393: change memberDeparted to disconnect the connection (#5431)

* server now disconnects connection if memberDeparted

Co-authored-by: john Hutchison <hutchisonjo@vmware.com>GEODE-8393: change memberDeparted to disconnect the connection (#5431)

* server now disconnects connection if memberDeparted

Co-authored-by: john Hutchison <hutchisonjo@vmware.com>GEODE-8393: change memberDeparted to disconnect the connection (#5431)

* server now disconnects connection if memberDeparted

Co-authored-by: john Hutchison <hutchisonjo@vmware.com>GEODE-8332: Refactor inregion classes (#5320)

* the *InRegion classes are now CommandHelper and Redis*CommandFunctionExecutor.
Instead of creating an instance for every function exec
a stable instance is created at startup and reused for
the life of the server.
The implementation of an operation when an instance of RedisData does
not exist is now done in the NullRedis* classes.
GEODE-8332: Refactor inregion classes (#5320)

* the *InRegion classes are now CommandHelper and Redis*CommandFunctionExecutor.
Instead of creating an instance for every function exec
a stable instance is created at startup and reused for
the life of the server.
The implementation of an operation when an instance of RedisData does
not exist is now done in the NullRedis* classes.
GEODE-8332: Refactor inregion classes (#5320)

* the *InRegion classes are now CommandHelper and Redis*CommandFunctionExecutor.
Instead of creating an instance for every function exec
a stable instance is created at startup and reused for
the life of the server.
The implementation of an operation when an instance of RedisData does
not exist is now done in the NullRedis* classes.
GEODE-8332: Refactor inregion classes (#5320)

* the *InRegion classes are now CommandHelper and Redis*CommandFunctionExecutor.
Instead of creating an instance for every function exec
a stable instance is created at startup and reused for
the life of the server.
The implementation of an operation when an instance of RedisData does
not exist is now done in the NullRedis* classes.
GEODE-8332: Refactor inregion classes (#5320)

* the *InRegion classes are now CommandHelper and Redis*CommandFunctionExecutor.
Instead of creating an instance for every function exec
a stable instance is created at startup and reused for
the life of the server.
The implementation of an operation when an instance of RedisData does
not exist is now done in the NullRedis* classes.
GEODE-8332: Refactor inregion classes (#5320)

* the *InRegion classes are now CommandHelper and Redis*CommandFunctionExecutor.
Instead of creating an instance for every function exec
a stable instance is created at startup and reused for
the life of the server.
The implementation of an operation when an instance of RedisData does
not exist is now done in the NullRedis* classes.
GEODE-8332: Refactor inregion classes (#5320)

* the *InRegion classes are now CommandHelper and Redis*CommandFunctionExecutor.
Instead of creating an instance for every function exec
a stable instance is created at startup and reused for
the life of the server.
The implementation of an operation when an instance of RedisData does
not exist is now done in the NullRedis* classes.
GEODE-8332: Refactor inregion classes (#5320)

* the *InRegion classes are now CommandHelper and Redis*CommandFunctionExecutor.
Instead of creating an instance for every function exec
a stable instance is created at startup and reused for
the life of the server.
The implementation of an operation when an instance of RedisData does
not exist is now done in the NullRedis* classes.
GEODE-8332: Refactor inregion classes (#5320)

* the *InRegion classes are now CommandHelper and Redis*CommandFunctionExecutor.
Instead of creating an instance for every function exec
a stable instance is created at startup and reused for
the life of the server.
The implementation of an operation when an instance of RedisData does
not exist is now done in the NullRedis* classes.
GEODE-8332: Refactor inregion classes (#5320)

* the *InRegion classes are now CommandHelper and Redis*CommandFunctionExecutor.
Instead of creating an instance for every function exec
a stable instance is created at startup and reused for
the life of the server.
The implementation of an operation when an instance of RedisData does
not exist is now done in the NullRedis* classes.
GEODE-8332: Refactor inregion classes (#5320)

* the *InRegion classes are now CommandHelper and Redis*CommandFunctionExecutor.
Instead of creating an instance for every function exec
a stable instance is created at startup and reused for
the life of the server.
The implementation of an operation when an instance of RedisData does
not exist is now done in the NullRedis* classes.
GEODE-8332: Refactor inregion classes (#5320)

* the *InRegion classes are now CommandHelper and Redis*CommandFunctionExecutor.
Instead of creating an instance for every function exec
a stable instance is created at startup and reused for
the life of the server.
The implementation of an operation when an instance of RedisData does
not exist is now done in the NullRedis* classes.
GEODE-8332: Refactor inregion classes (#5320)

* the *InRegion classes are now CommandHelper and Redis*CommandFunctionExecutor.
Instead of creating an instance for every function exec
a stable instance is created at startup and reused for
the life of the server.
The implementation of an operation when an instance of RedisData does
not exist is now done in the NullRedis* classes.
GEODE-8332: Refactor inregion classes (#5320)

* the *InRegion classes are now CommandHelper and Redis*CommandFunctionExecutor.
Instead of creating an instance for every function exec
a stable instance is created at startup and reused for
the life of the server.
The implementation of an operation when an instance of RedisData does
not exist is now done in the NullRedis* classes.
GEODE-8332: Refactor inregion classes (#5320)

* the *InRegion classes are now CommandHelper and Redis*CommandFunctionExecutor.
Instead of creating an instance for every function exec
a stable instance is created at startup and reused for
the life of the server.
The implementation of an operation when an instance of RedisData does
not exist is now done in the NullRedis* classes.
GEODE-8332: Refactor inregion classes (#5320)

* the *InRegion classes are now CommandHelper and Redis*CommandFunctionExecutor.
Instead of creating an instance for every function exec
a stable instance is created at startup and reused for
the life of the server.
The implementation of an operation when an instance of RedisData does
not exist is now done in the NullRedis* classes.
GEODE-8332: Refactor inregion classes (#5320)

* the *InRegion classes are now CommandHelper and Redis*CommandFunctionExecutor.
Instead of creating an instance for every function exec
a stable instance is created at startup and reused for
the life of the server.
The implementation of an operation when an instance of RedisData does
not exist is now done in the NullRedis* classes.
GEODE-8332: Refactor inregion classes (#5320)

* the *InRegion classes are now CommandHelper and Redis*CommandFunctionExecutor.
Instead of creating an instance for every function exec
a stable instance is created at startup and reused for
the life of the server.
The implementation of an operation when an instance of RedisData does
not exist is now done in the NullRedis* classes.
GEODE-8332: Refactor inregion classes (#5320)

* the *InRegion classes are now CommandHelper and Redis*CommandFunctionExecutor.
Instead of creating an instance for every function exec
a stable instance is created at startup and reused for
the life of the server.
The implementation of an operation when an instance of RedisData does
not exist is now done in the NullRedis* classes.
GEODE-8332: Refactor inregion classes (#5320)

* the *InRegion classes are now CommandHelper and Redis*CommandFunctionExecutor.
Instead of creating an instance for every function exec
a stable instance is created at startup and reused for
the life of the server.
The implementation of an operation when an instance of RedisData does
not exist is now done in the NullRedis* classes.
GEODE-8332: Refactor inregion classes (#5320)

* the *InRegion classes are now CommandHelper and Redis*CommandFunctionExecutor.
Instead of creating an instance for every function exec
a stable instance is created at startup and reused for
the life of the server.
The implementation of an operation when an instance of RedisData does
not exist is now done in the NullRedis* classes.
GEODE-8332: Refactor inregion classes (#5320)

* the *InRegion classes are now CommandHelper and Redis*CommandFunctionExecutor.
Instead of creating an instance for every function exec
a stable instance is created at startup and reused for
the life of the server.
The implementation of an operation when an instance of RedisData does
not exist is now done in the NullRedis* classes.
GEODE-8332: Refactor inregion classes (#5320)

* the *InRegion classes are now CommandHelper and Redis*CommandFunctionExecutor.
Instead of creating an instance for every function exec
a stable instance is created at startup and reused for
the life of the server.
The implementation of an operation when an instance of RedisData does
not exist is now done in the NullRedis* classes.
GEODE-8332: Refactor inregion classes (#5320)

* the *InRegion classes are now CommandHelper and Redis*CommandFunctionExecutor.
Instead of creating an instance for every function exec
a stable instance is created at startup and reused for
the life of the server.
The implementation of an operation when an instance of RedisData does
not exist is now done in the NullRedis* classes.
GEODE-8332: Refactor inregion classes (#5320)

* the *InRegion classes are now CommandHelper and Redis*CommandFunctionExecutor.
Instead of creating an instance for every function exec
a stable instance is created at startup and reused for
the life of the server.
The implementation of an operation when an instance of RedisData does
not exist is now done in the NullRedis* classes.
GEODE-8332: Refactor inregion classes (#5320)

* the *InRegion classes are now CommandHelper and Redis*CommandFunctionExecutor.
Instead of creating an instance for every function exec
a stable instance is created at startup and reused for
the life of the server.
The implementation of an operation when an instance of RedisData does
not exist is now done in the NullRedis* classes.
GEODE-8332: Refactor inregion classes (#5320)

* the *InRegion classes are now CommandHelper and Redis*CommandFunctionExecutor.
Instead of creating an instance for every function exec
a stable instance is created at startup and reused for
the life of the server.
The implementation of an operation when an instance of RedisData does
not exist is now done in the NullRedis* classes.
GEODE-8332: Refactor inregion classes (#5320)

* the *InRegion classes are now CommandHelper and Redis*CommandFunctionExecutor.
Instead of creating an instance for every function exec
a stable instance is created at startup and reused for
the life of the server.
The implementation of an operation when an instance of RedisData does
not exist is now done in the NullRedis* classes.
GEODE-8332: Refactor inregion classes (#5320)

* the *InRegion classes are now CommandHelper and Redis*CommandFunctionExecutor.
Instead of creating an instance for every function exec
a stable instance is created at startup and reused for
the life of the server.
The implementation of an operation when an instance of RedisData does
not exist is now done in the NullRedis* classes.
GEODE-8332: Refactor inregion classes (#5320)

* the *InRegion classes are now CommandHelper and Redis*CommandFunctionExecutor.
Instead of creating an instance for every function exec
a stable instance is created at startup and reused for
the life of the server.
The implementation of an operation when an instance of RedisData does
not exist is now done in the NullRedis* classes.
GEODE-8332: Refactor inregion classes (#5320)

* the *InRegion classes are now CommandHelper and Redis*CommandFunctionExecutor.
Instead of creating an instance for every function exec
a stable instance is created at startup and reused for
the life of the server.
The implementation of an operation when an instance of RedisData does
not exist is now done in the NullRedis* classes.
GEODE-8332: Refactor inregion classes (#5320)

* the *InRegion classes are now CommandHelper and Redis*CommandFunctionExecutor.
Instead of creating an instance for every function exec
a stable instance is created at startup and reused for
the life of the server.
The implementation of an operation when an instance of RedisData does
not exist is now done in the NullRedis* classes.
GEODE-8332: Refactor inregion classes (#5320)

* the *InRegion classes are now CommandHelper and Redis*CommandFunctionExecutor.
Instead of creating an instance for every function exec
a stable instance is created at startup and reused for
the life of the server.
The implementation of an operation when an instance of RedisData does
not exist is now done in the NullRedis* classes.
GEODE-8332: Refactor inregion classes (#5320)

* the *InRegion classes are now CommandHelper and Redis*CommandFunctionExecutor.
Instead of creating an instance for every function exec
a stable instance is created at startup and reused for
the life of the server.
The implementation of an operation when an instance of RedisData does
not exist is now done in the NullRedis* classes.
GEODE-8332: Refactor inregion classes (#5320)

* the *InRegion classes are now CommandHelper and Redis*CommandFunctionExecutor.
Instead of creating an instance for every function exec
a stable instance is created at startup and reused for
the life of the server.
The implementation of an operation when an instance of RedisData does
not exist is now done in the NullRedis* classes.
GEODE-8332: Refactor inregion classes (#5320)

* the *InRegion classes are now CommandHelper and Redis*CommandFunctionExecutor.
Instead of creating an instance for every function exec
a stable instance is created at startup and reused for
the life of the server.
The implementation of an operation when an instance of RedisData does
not exist is now done in the NullRedis* classes.
GEODE-8332: Refactor inregion classes (#5320)

* the *InRegion classes are now CommandHelper and Redis*CommandFunctionExecutor.
Instead of creating an instance for every function exec
a stable instance is created at startup and reused for
the life of the server.
The implementation of an operation when an instance of RedisData does
not exist is now done in the NullRedis* classes.
GEODE-8332: Refactor inregion classes (#5320)

* the *InRegion classes are now CommandHelper and Redis*CommandFunctionExecutor.
Instead of creating an instance for every function exec
a stable instance is created at startup and reused for
the life of the server.
The implementation of an operation when an instance of RedisData does
not exist is now done in the NullRedis* classes.
GEODE-8332: Refactor inregion classes (#5320)

* the *InRegion classes are now CommandHelper and Redis*CommandFunctionExecutor.
Instead of creating an instance for every function exec
a stable instance is created at startup and reused for
the life of the server.
The implementation of an operation when an instance of RedisData does
not exist is now done in the NullRedis* classes.
GEODE-8332: Refactor inregion classes (#5320)

* the *InRegion classes are now CommandHelper and Redis*CommandFunctionExecutor.
Instead of creating an instance for every function exec
a stable instance is created at startup and reused for
the life of the server.
The implementation of an operation when an instance of RedisData does
not exist is now done in the NullRedis* classes.
GEODE-8332: Refactor inregion classes (#5320)

* the *InRegion classes are now CommandHelper and Redis*CommandFunctionExecutor.
Instead of creating an instance for every function exec
a stable instance is created at startup and reused for
the life of the server.
The implementation of an operation when an instance of RedisData does
not exist is now done in the NullRedis* classes.
GEODE-8250: Create new custom log config acceptance tests (#5309)

* Adjust GfshRule use of TemporaryFolder and use it
* Move GfshRuleIntegrationTest from test to integrationTest
* Fixup GfshRuleIntegrationTest, VersionManager, and VersionManagerJUnitTest
* Add geode-old-versions to integrationTests
* Print JAVA_HOME directory tree if assertion about java binary failsGEODE-8269: Improve test coverage (#5275)

GEODE-8269: Improve test coverage for redis (#5262)

GEODE-8205: add gfsh redis command (#5226)

Unsupported commands can now be enabled dynamically on running servers using 'gfsh redis --enable-unsupported-commands'.

A warning is now logged if unsupported commands are enabled.
The error message has been improved.
GEODE-8226: change publish to work with non-redis servers present  (#5215)

Changed PubSubDUnitTest to have an additional non-redis server.
This caused multiple tests in it to fail.
Changed the publish code that uses the FunctionService
to only execute the function on members that have the redis data region.
The tests started passing.
GEODE-8205: feature flag unsupported Redis commands (#5185)

- In order to enable unsupported Redis commands, set the Java
  system parameter `enable-unsupported-redis-commands=true`.
- The list of un/supported commands can be seen in `RedisCommandType`.

* Introduce RedisClusterStartupRule

Removes boiler plate code for starting a Redis server. By default starts
on an ephemeral port.
- Expose getRedisPort()
- Expose setEnableUnsupported()

Authored-by: Jens Deppe <jdeppe@vmware.com>
Co-authored-by: john Hutchison <hutchisonjo@vmware.com>GEODE-8205: feature flag unsupported Redis commands (#5185)

- In order to enable unsupported Redis commands, set the Java
  system parameter `enable-unsupported-redis-commands=true`.
- The list of un/supported commands can be seen in `RedisCommandType`.

* Introduce RedisClusterStartupRule

Removes boiler plate code for starting a Redis server. By default starts
on an ephemeral port.
- Expose getRedisPort()
- Expose setEnableUnsupported()

Authored-by: Jens Deppe <jdeppe@vmware.com>
Co-authored-by: john Hutchison <hutchisonjo@vmware.com>GEODE-8166: reimplement redis expiration to use new data model (#5174)

* Added timestamp field to RedisData and implemented serialization and delta for it.
Both active and passive expiration have been implemented.

* RedisHash, RedisSet, and RedisString now subclass AbstractRedisData
* type command now uses function
* getset, incr, decr, incrby, and decrby now uses function and is atomic
GEODE-8166: reimplement redis expiration to use new data model (#5174)

* Added timestamp field to RedisData and implemented serialization and delta for it.
Both active and passive expiration have been implemented.

* RedisHash, RedisSet, and RedisString now subclass AbstractRedisData
* type command now uses function
* getset, incr, decr, incrby, and decrby now uses function and is atomic
GEODE-8166: reimplement redis expiration to use new data model (#5174)

* Added timestamp field to RedisData and implemented serialization and delta for it.
Both active and passive expiration have been implemented.

* RedisHash, RedisSet, and RedisString now subclass AbstractRedisData
* type command now uses function
* getset, incr, decr, incrby, and decrby now uses function and is atomic
GEODE-8182: change String commands to use one region (#5165)

* changed all String commands to use the function and to use a single region
* renabled tests ignored for GEODE-8182
* removed the RedisLockService since it is not used in the new data model
* removed the unused del methods on RedisSetCommands and RedisHashCommands
* removed the KeyRegistar since it was no longer needed with a single data region

Co-authored-by: Ray Ingles <ringles@pivotal.io>GEODE-8182: change String commands to use one region (#5165)

* changed all String commands to use the function and to use a single region
* renabled tests ignored for GEODE-8182
* removed the RedisLockService since it is not used in the new data model
* removed the unused del methods on RedisSetCommands and RedisHashCommands
* removed the KeyRegistar since it was no longer needed with a single data region

Co-authored-by: Ray Ingles <ringles@pivotal.io>GEODE-8175: remove unsupported redis commands (#5146)

Removed list and zset commands.
Removed redis HyperLog commands.
Removed redis transaction commands.GEODE-8175: remove unsupported redis commands (#5146)

Removed list and zset commands.
Removed redis HyperLog commands.
Removed redis transaction commands.GEODE-7949: Geode Redis - Get/Set commands for RedisString datatype to cover new parameters (#4907)


Co-authored-by: John Hutchison <jhutchison@pivotal.io>
Co-authored-by: Sarah <sabbey@pivotal.io>Geode 7751: fix for Tomcat9CachingClientServerTest.containersShouldExpireInSetTimeframe (#4931)

- Change the way the waiting was happening
GEODE-7869: Cleanup warnings in geode-assembly
GEODE-7869: Cleanup warnings in geode-assembly
GEODE-7869: Cleanup warnings in geode-assembly
GEODE-7869: Cleanup warnings in geode-assembly
GEODE-7808: standardize on use of HostAndPort for creating connections (#4765)

* Squashed merge of feature/GEODE-7808

removed HostAddress
renamed LocatorAddress to HostAndPort
modified TcpClient methods to take a HostAndPort argument instead of
InetAddress
modified SocketCreator to take a HostAndPort argument instead of
InetAddress

* GEODE-7808 - standardize on use of HostAndPort for connection formation

This continues a previous PR that passed and was approved for merge.
This commit raises up several methods from SocketCreator into the
TcpSocketCreator interface.  This is an intermediate commit.  A
subsequent commit will refactor TcpSocketCreator to separate the client
and server methods for creating server-sockets and client connections to
server-sockets.

* refactored socket-creators to separate concerns

ServerSocketCreator holds methods for non-client comms
ClientSocketCreator holds methods that clients should use for comms
AdvancedSocketCreator holds methods for people who need to get around
the limitations of the other two interfaces

* adding missing interface

* move code out of inner-classes into first-class classes

* renaming interfaces and methods to be less confusing

* reinstate SocketCreator ip to hostname cache for performance

* changes from review comments
GEODE-7808: standardize on use of HostAndPort for creating connections (#4765)

* Squashed merge of feature/GEODE-7808

removed HostAddress
renamed LocatorAddress to HostAndPort
modified TcpClient methods to take a HostAndPort argument instead of
InetAddress
modified SocketCreator to take a HostAndPort argument instead of
InetAddress

* GEODE-7808 - standardize on use of HostAndPort for connection formation

This continues a previous PR that passed and was approved for merge.
This commit raises up several methods from SocketCreator into the
TcpSocketCreator interface.  This is an intermediate commit.  A
subsequent commit will refactor TcpSocketCreator to separate the client
and server methods for creating server-sockets and client connections to
server-sockets.

* refactored socket-creators to separate concerns

ServerSocketCreator holds methods for non-client comms
ClientSocketCreator holds methods that clients should use for comms
AdvancedSocketCreator holds methods for people who need to get around
the limitations of the other two interfaces

* adding missing interface

* move code out of inner-classes into first-class classes

* renaming interfaces and methods to be less confusing

* reinstate SocketCreator ip to hostname cache for performance

* changes from review comments
GEODE-7808: standardize on use of HostAndPort for creating connections (#4765)

* Squashed merge of feature/GEODE-7808

removed HostAddress
renamed LocatorAddress to HostAndPort
modified TcpClient methods to take a HostAndPort argument instead of
InetAddress
modified SocketCreator to take a HostAndPort argument instead of
InetAddress

* GEODE-7808 - standardize on use of HostAndPort for connection formation

This continues a previous PR that passed and was approved for merge.
This commit raises up several methods from SocketCreator into the
TcpSocketCreator interface.  This is an intermediate commit.  A
subsequent commit will refactor TcpSocketCreator to separate the client
and server methods for creating server-sockets and client connections to
server-sockets.

* refactored socket-creators to separate concerns

ServerSocketCreator holds methods for non-client comms
ClientSocketCreator holds methods that clients should use for comms
AdvancedSocketCreator holds methods for people who need to get around
the limitations of the other two interfaces

* adding missing interface

* move code out of inner-classes into first-class classes

* renaming interfaces and methods to be less confusing

* reinstate SocketCreator ip to hostname cache for performance

* changes from review comments
GEODE-7832: Remove Connection Semaphores (#4754)

Removed the semaphores and related methods from DirectChannel and
Connection classes. They were used to constrain messaging when some
undocumented system properties were set.GEODE-7808: standardize on use of HostAndPort to form client-side connections (#4743)

* Squashed merge of feature/GEODE-7808

removed HostAddress
renamed LocatorAddress to HostAndPort
modified TcpClient methods to take a HostAndPort argument instead of
InetAddress
modified SocketCreator to take a HostAndPort argument instead of
InetAddress

* GEODE-7808 - standardize on use of HostAndPort for connection formation

This continues a previous PR that passed and was approved for merge.
This commit raises up several methods from SocketCreator into the
TcpSocketCreator interface.  This is an intermediate commit.  A
subsequent commit will refactor TcpSocketCreator to separate the client
and server methods for creating server-sockets and client connections to
server-sockets.

* refactored socket-creators to separate concerns

ServerSocketCreator holds methods for non-client comms
ClientSocketCreator holds methods that clients should use for comms
AdvancedSocketCreator holds methods for people who need to get around
the limitations of the other two interfaces

* adding missing interface

* move code out of inner-classes into first-class classes

* renaming interfaces and methods to be less confusing
GEODE-7808: standardize on use of HostAndPort to form client-side connections (#4743)

* Squashed merge of feature/GEODE-7808

removed HostAddress
renamed LocatorAddress to HostAndPort
modified TcpClient methods to take a HostAndPort argument instead of
InetAddress
modified SocketCreator to take a HostAndPort argument instead of
InetAddress

* GEODE-7808 - standardize on use of HostAndPort for connection formation

This continues a previous PR that passed and was approved for merge.
This commit raises up several methods from SocketCreator into the
TcpSocketCreator interface.  This is an intermediate commit.  A
subsequent commit will refactor TcpSocketCreator to separate the client
and server methods for creating server-sockets and client connections to
server-sockets.

* refactored socket-creators to separate concerns

ServerSocketCreator holds methods for non-client comms
ClientSocketCreator holds methods that clients should use for comms
AdvancedSocketCreator holds methods for people who need to get around
the limitations of the other two interfaces

* adding missing interface

* move code out of inner-classes into first-class classes

* renaming interfaces and methods to be less confusing
GEODE-7808: standardize on use of HostAndPort to form client-side connections (#4743)

* Squashed merge of feature/GEODE-7808

removed HostAddress
renamed LocatorAddress to HostAndPort
modified TcpClient methods to take a HostAndPort argument instead of
InetAddress
modified SocketCreator to take a HostAndPort argument instead of
InetAddress

* GEODE-7808 - standardize on use of HostAndPort for connection formation

This continues a previous PR that passed and was approved for merge.
This commit raises up several methods from SocketCreator into the
TcpSocketCreator interface.  This is an intermediate commit.  A
subsequent commit will refactor TcpSocketCreator to separate the client
and server methods for creating server-sockets and client connections to
server-sockets.

* refactored socket-creators to separate concerns

ServerSocketCreator holds methods for non-client comms
ClientSocketCreator holds methods that clients should use for comms
AdvancedSocketCreator holds methods for people who need to get around
the limitations of the other two interfaces

* adding missing interface

* move code out of inner-classes into first-class classes

* renaming interfaces and methods to be less confusing
GEODE-7799: Distribute rebalance status to other locators (#4692)

Co-authored-by: Joris Melchior <joris.melchior@gmail.com>
Co-authored-by: Darrel Schneider <dschneider@pivotal.io>
Co-authored-by: Dale Emery <demery@pivotal.io>
GEODE-7799: Distribute rebalance status to other locators (#4692)

Co-authored-by: Joris Melchior <joris.melchior@gmail.com>
Co-authored-by: Darrel Schneider <dschneider@pivotal.io>
Co-authored-by: Dale Emery <demery@pivotal.io>
GEODE-7799: Distribute rebalance status to other locators (#4692)

Co-authored-by: Joris Melchior <joris.melchior@gmail.com>
Co-authored-by: Darrel Schneider <dschneider@pivotal.io>
Co-authored-by: Dale Emery <demery@pivotal.io>
GEODE-7799: Distribute rebalance status to other locators (#4692)

Co-authored-by: Joris Melchior <joris.melchior@gmail.com>
Co-authored-by: Darrel Schneider <dschneider@pivotal.io>
Co-authored-by: Dale Emery <demery@pivotal.io>
GEODE-7210: Fix RedundancyLevelPart1DUnitTest

- Add awaits to assertions dependent on asynchronous calls

Co-authored-by: Mark Hanson <mhanson@pivotal.io>
Co-authored-by: Kirk Lund <klund@pivotal.io>GEODE-7739: Federate ManagerMXBean (#4655)

* Reenable locator mbean federation validation in
  JMXMBeanReconnectDUnitTest
* Fix federation of ManagerMXBean
* Remove atMost clause from await calls
GEODE-7752: Removed the current optionality on the ClusterManagementServiceBuilder. (#4650)

The Transport is not responsible to set the ConnectionConfig.GEODE-7752: Removed the current optionality on the ClusterManagementServiceBuilder. (#4650)

The Transport is not responsible to set the ConnectionConfig.GEODE-7652: MembershipBuilder lets you set the local locator (#4614)

GEODE-7652: MembershipBuilder lets you set the local locator (#4614)

GEODE-7600-4: Further cleanup (#4642)

* GEODE-7600-4: Further cleanup
- Cleaning the teardown approach
- Change to wait for event history to be correct.
- Getting rid of a timing issue
- Getting rid of a debug change.
GEODE-7600-4: Further cleanup (#4642)

* GEODE-7600-4: Further cleanup
- Cleaning the teardown approach
- Change to wait for event history to be correct.
- Getting rid of a timing issue
- Getting rid of a debug change.
GEODE-7600-4: Further cleanup (#4642)

* GEODE-7600-4: Further cleanup
- Cleaning the teardown approach
- Change to wait for event history to be correct.
- Getting rid of a timing issue
- Getting rid of a debug change.
GEODE-7600-4: Further cleanup (#4642)

* GEODE-7600-4: Further cleanup
- Cleaning the teardown approach
- Change to wait for event history to be correct.
- Getting rid of a timing issue
- Getting rid of a debug change.
GEODE-7600-4: Further cleanup (#4642)

* GEODE-7600-4: Further cleanup
- Cleaning the teardown approach
- Change to wait for event history to be correct.
- Getting rid of a timing issue
- Getting rid of a debug change.
GEODE-7600-4: Further cleanup (#4642)

* GEODE-7600-4: Further cleanup
- Cleaning the teardown approach
- Change to wait for event history to be correct.
- Getting rid of a timing issue
- Getting rid of a debug change.
GEODE-7600-4: Further cleanup (#4642)

* GEODE-7600-4: Further cleanup
- Cleaning the teardown approach
- Change to wait for event history to be correct.
- Getting rid of a timing issue
- Getting rid of a debug change.
GEODE-7600-4: Further cleanup (#4642)

* GEODE-7600-4: Further cleanup
- Cleaning the teardown approach
- Change to wait for event history to be correct.
- Getting rid of a timing issue
- Getting rid of a debug change.
GEODE-7600-4: Further cleanup (#4642)

* GEODE-7600-4: Further cleanup
- Cleaning the teardown approach
- Change to wait for event history to be correct.
- Getting rid of a timing issue
- Getting rid of a debug change.
GEODE-7600-4: Further cleanup (#4642)

* GEODE-7600-4: Further cleanup
- Cleaning the teardown approach
- Change to wait for event history to be correct.
- Getting rid of a timing issue
- Getting rid of a debug change.
GEODE-7600-4: Further cleanup (#4642)

* GEODE-7600-4: Further cleanup
- Cleaning the teardown approach
- Change to wait for event history to be correct.
- Getting rid of a timing issue
- Getting rid of a debug change.
GEODE-7600-4: Further cleanup (#4642)

* GEODE-7600-4: Further cleanup
- Cleaning the teardown approach
- Change to wait for event history to be correct.
- Getting rid of a timing issue
- Getting rid of a debug change.
GEODE-7600-4: Further cleanup (#4642)

* GEODE-7600-4: Further cleanup
- Cleaning the teardown approach
- Change to wait for event history to be correct.
- Getting rid of a timing issue
- Getting rid of a debug change.
GEODE-7600-4: Further cleanup (#4642)

* GEODE-7600-4: Further cleanup
- Cleaning the teardown approach
- Change to wait for event history to be correct.
- Getting rid of a timing issue
- Getting rid of a debug change.
GEODE-7600-4: Further cleanup (#4642)

* GEODE-7600-4: Further cleanup
- Cleaning the teardown approach
- Change to wait for event history to be correct.
- Getting rid of a timing issue
- Getting rid of a debug change.
GEODE-7600-4: Further cleanup (#4642)

* GEODE-7600-4: Further cleanup
- Cleaning the teardown approach
- Change to wait for event history to be correct.
- Getting rid of a timing issue
- Getting rid of a debug change.
GEODE-7600-4: Further cleanup (#4642)

* GEODE-7600-4: Further cleanup
- Cleaning the teardown approach
- Change to wait for event history to be correct.
- Getting rid of a timing issue
- Getting rid of a debug change.
GEODE-7600-4: Further cleanup (#4642)

* GEODE-7600-4: Further cleanup
- Cleaning the teardown approach
- Change to wait for event history to be correct.
- Getting rid of a timing issue
- Getting rid of a debug change.
GEODE-7600-4: Further cleanup (#4642)

* GEODE-7600-4: Further cleanup
- Cleaning the teardown approach
- Change to wait for event history to be correct.
- Getting rid of a timing issue
- Getting rid of a debug change.
GEODE-7600-4: Further cleanup (#4642)

* GEODE-7600-4: Further cleanup
- Cleaning the teardown approach
- Change to wait for event history to be correct.
- Getting rid of a timing issue
- Getting rid of a debug change.
GEODE-7600-4: Further cleanup (#4642)

* GEODE-7600-4: Further cleanup
- Cleaning the teardown approach
- Change to wait for event history to be correct.
- Getting rid of a timing issue
- Getting rid of a debug change.
GEODE-7600-4: Further cleanup (#4642)

* GEODE-7600-4: Further cleanup
- Cleaning the teardown approach
- Change to wait for event history to be correct.
- Getting rid of a timing issue
- Getting rid of a debug change.
GEODE-7600-4: Further cleanup (#4642)

* GEODE-7600-4: Further cleanup
- Cleaning the teardown approach
- Change to wait for event history to be correct.
- Getting rid of a timing issue
- Getting rid of a debug change.
GEODE-7600-4: Further cleanup (#4642)

* GEODE-7600-4: Further cleanup
- Cleaning the teardown approach
- Change to wait for event history to be correct.
- Getting rid of a timing issue
- Getting rid of a debug change.
GEODE-7600-4: Further cleanup (#4642)

* GEODE-7600-4: Further cleanup
- Cleaning the teardown approach
- Change to wait for event history to be correct.
- Getting rid of a timing issue
- Getting rid of a debug change.
GEODE-7600-4: Further cleanup (#4642)

* GEODE-7600-4: Further cleanup
- Cleaning the teardown approach
- Change to wait for event history to be correct.
- Getting rid of a timing issue
- Getting rid of a debug change.
GEODE-6819: Fix PartitionedRegionSingleHopDUnitTest (#4645)

* GEODE-6819: Remove sleeps and most deprecations

* No longer extending JUnit4CacheTestCase
* Remove all calls to sleep
* Use UniversalMembershipListenerAdapter with CountDownLatch to gate client

* Restart CI PR pipelines
GEODE-6819: Fix PartitionedRegionSingleHopDUnitTest (#4645)

* GEODE-6819: Remove sleeps and most deprecations

* No longer extending JUnit4CacheTestCase
* Remove all calls to sleep
* Use UniversalMembershipListenerAdapter with CountDownLatch to gate client

* Restart CI PR pipelines
Geode-7600-3 (#4568)

* GEODE-7600-3: Further cleanup
- Comparable is generic so it can be typed this fixed an assert.
- Wait and sleep removal
- Removing deprecated API calls
- Addressing comments on code
Geode-7600-3 (#4568)

* GEODE-7600-3: Further cleanup
- Comparable is generic so it can be typed this fixed an assert.
- Wait and sleep removal
- Removing deprecated API calls
- Addressing comments on code
Geode-7600-3 (#4568)

* GEODE-7600-3: Further cleanup
- Comparable is generic so it can be typed this fixed an assert.
- Wait and sleep removal
- Removing deprecated API calls
- Addressing comments on code
Geode-7600-3 (#4568)

* GEODE-7600-3: Further cleanup
- Comparable is generic so it can be typed this fixed an assert.
- Wait and sleep removal
- Removing deprecated API calls
- Addressing comments on code
Geode-7600-3 (#4568)

* GEODE-7600-3: Further cleanup
- Comparable is generic so it can be typed this fixed an assert.
- Wait and sleep removal
- Removing deprecated API calls
- Addressing comments on code
GEODE-5407: Fix JMXMBeanReconnectDUnitTest

* Rewrite test with standard Geode and JMX APIs
* Use CountDownLatch instead of Blackboard
* Use SharedErrorCollector for remote listener errors
* Always consistently use Awaitility before checking GemFire MXBeans

Co-authored-by: Ivan Godwin <igodwin@pivotal.io>GEODE-7600-2: ConnectionPoolDUnitTest Cleanup. (#4555)

- Changes to ClientServerTestCase to allow for the use of RegionFactory
- Removing Wait.pauses from run-time for testing.
- clean out a bunch of runnables
- refactoring code.
- cleaned out some extra sleeps
- Picking up suggested changes.
GEODE-7600-2: ConnectionPoolDUnitTest Cleanup. (#4555)

- Changes to ClientServerTestCase to allow for the use of RegionFactory
- Removing Wait.pauses from run-time for testing.
- clean out a bunch of runnables
- refactoring code.
- cleaned out some extra sleeps
- Picking up suggested changes.
GEODE-7600-2: ConnectionPoolDUnitTest Cleanup. (#4555)

- Changes to ClientServerTestCase to allow for the use of RegionFactory
- Removing Wait.pauses from run-time for testing.
- clean out a bunch of runnables
- refactoring code.
- cleaned out some extra sleeps
- Picking up suggested changes.
GEODE-7600-2: ConnectionPoolDUnitTest Cleanup. (#4555)

- Changes to ClientServerTestCase to allow for the use of RegionFactory
- Removing Wait.pauses from run-time for testing.
- clean out a bunch of runnables
- refactoring code.
- cleaned out some extra sleeps
- Picking up suggested changes.
GEODE-7600-2: ConnectionPoolDUnitTest Cleanup. (#4555)

- Changes to ClientServerTestCase to allow for the use of RegionFactory
- Removing Wait.pauses from run-time for testing.
- clean out a bunch of runnables
- refactoring code.
- cleaned out some extra sleeps
- Picking up suggested changes.
GEODE-7600-2: ConnectionPoolDUnitTest Cleanup. (#4555)

- Changes to ClientServerTestCase to allow for the use of RegionFactory
- Removing Wait.pauses from run-time for testing.
- clean out a bunch of runnables
- refactoring code.
- cleaned out some extra sleeps
- Picking up suggested changes.
GEODE-7600-2: ConnectionPoolDUnitTest Cleanup. (#4555)

- Changes to ClientServerTestCase to allow for the use of RegionFactory
- Removing Wait.pauses from run-time for testing.
- clean out a bunch of runnables
- refactoring code.
- cleaned out some extra sleeps
- Picking up suggested changes.
GEODE-7600-2: ConnectionPoolDUnitTest Cleanup. (#4555)

- Changes to ClientServerTestCase to allow for the use of RegionFactory
- Removing Wait.pauses from run-time for testing.
- clean out a bunch of runnables
- refactoring code.
- cleaned out some extra sleeps
- Picking up suggested changes.
GEODE-7600-2: ConnectionPoolDUnitTest Cleanup. (#4555)

- Changes to ClientServerTestCase to allow for the use of RegionFactory
- Removing Wait.pauses from run-time for testing.
- clean out a bunch of runnables
- refactoring code.
- cleaned out some extra sleeps
- Picking up suggested changes.
GEODE-7600-2: ConnectionPoolDUnitTest Cleanup. (#4555)

- Changes to ClientServerTestCase to allow for the use of RegionFactory
- Removing Wait.pauses from run-time for testing.
- clean out a bunch of runnables
- refactoring code.
- cleaned out some extra sleeps
- Picking up suggested changes.
GEODE-7600-2: ConnectionPoolDUnitTest Cleanup. (#4555)

- Changes to ClientServerTestCase to allow for the use of RegionFactory
- Removing Wait.pauses from run-time for testing.
- clean out a bunch of runnables
- refactoring code.
- cleaned out some extra sleeps
- Picking up suggested changes.
GEODE-7600-2: ConnectionPoolDUnitTest Cleanup. (#4555)

- Changes to ClientServerTestCase to allow for the use of RegionFactory
- Removing Wait.pauses from run-time for testing.
- clean out a bunch of runnables
- refactoring code.
- cleaned out some extra sleeps
- Picking up suggested changes.
GEODE-7600-2: ConnectionPoolDUnitTest Cleanup. (#4555)

- Changes to ClientServerTestCase to allow for the use of RegionFactory
- Removing Wait.pauses from run-time for testing.
- clean out a bunch of runnables
- refactoring code.
- cleaned out some extra sleeps
- Picking up suggested changes.
GEODE-7600-2: ConnectionPoolDUnitTest Cleanup. (#4555)

- Changes to ClientServerTestCase to allow for the use of RegionFactory
- Removing Wait.pauses from run-time for testing.
- clean out a bunch of runnables
- refactoring code.
- cleaned out some extra sleeps
- Picking up suggested changes.
GEODE-7600-2: ConnectionPoolDUnitTest Cleanup. (#4555)

- Changes to ClientServerTestCase to allow for the use of RegionFactory
- Removing Wait.pauses from run-time for testing.
- clean out a bunch of runnables
- refactoring code.
- cleaned out some extra sleeps
- Picking up suggested changes.
GEODE-7600-2: ConnectionPoolDUnitTest Cleanup. (#4555)

- Changes to ClientServerTestCase to allow for the use of RegionFactory
- Removing Wait.pauses from run-time for testing.
- clean out a bunch of runnables
- refactoring code.
- cleaned out some extra sleeps
- Picking up suggested changes.
GEODE-7600-2: ConnectionPoolDUnitTest Cleanup. (#4555)

- Changes to ClientServerTestCase to allow for the use of RegionFactory
- Removing Wait.pauses from run-time for testing.
- clean out a bunch of runnables
- refactoring code.
- cleaned out some extra sleeps
- Picking up suggested changes.
GEODE-7600-2: ConnectionPoolDUnitTest Cleanup. (#4555)

- Changes to ClientServerTestCase to allow for the use of RegionFactory
- Removing Wait.pauses from run-time for testing.
- clean out a bunch of runnables
- refactoring code.
- cleaned out some extra sleeps
- Picking up suggested changes.
GEODE-7600-2: ConnectionPoolDUnitTest Cleanup. (#4555)

- Changes to ClientServerTestCase to allow for the use of RegionFactory
- Removing Wait.pauses from run-time for testing.
- clean out a bunch of runnables
- refactoring code.
- cleaned out some extra sleeps
- Picking up suggested changes.
GEODE-7600-2: ConnectionPoolDUnitTest Cleanup. (#4555)

- Changes to ClientServerTestCase to allow for the use of RegionFactory
- Removing Wait.pauses from run-time for testing.
- clean out a bunch of runnables
- refactoring code.
- cleaned out some extra sleeps
- Picking up suggested changes.
GEODE-7600-2: ConnectionPoolDUnitTest Cleanup. (#4555)

- Changes to ClientServerTestCase to allow for the use of RegionFactory
- Removing Wait.pauses from run-time for testing.
- clean out a bunch of runnables
- refactoring code.
- cleaned out some extra sleeps
- Picking up suggested changes.
GEODE-7600-2: ConnectionPoolDUnitTest Cleanup. (#4555)

- Changes to ClientServerTestCase to allow for the use of RegionFactory
- Removing Wait.pauses from run-time for testing.
- clean out a bunch of runnables
- refactoring code.
- cleaned out some extra sleeps
- Picking up suggested changes.
GEODE-7600-2: ConnectionPoolDUnitTest Cleanup. (#4555)

- Changes to ClientServerTestCase to allow for the use of RegionFactory
- Removing Wait.pauses from run-time for testing.
- clean out a bunch of runnables
- refactoring code.
- cleaned out some extra sleeps
- Picking up suggested changes.
GEODE-7600-2: ConnectionPoolDUnitTest Cleanup. (#4555)

- Changes to ClientServerTestCase to allow for the use of RegionFactory
- Removing Wait.pauses from run-time for testing.
- clean out a bunch of runnables
- refactoring code.
- cleaned out some extra sleeps
- Picking up suggested changes.
GEODE-7600-2: ConnectionPoolDUnitTest Cleanup. (#4555)

- Changes to ClientServerTestCase to allow for the use of RegionFactory
- Removing Wait.pauses from run-time for testing.
- clean out a bunch of runnables
- refactoring code.
- cleaned out some extra sleeps
- Picking up suggested changes.
GEODE-7600-2: ConnectionPoolDUnitTest Cleanup. (#4555)

- Changes to ClientServerTestCase to allow for the use of RegionFactory
- Removing Wait.pauses from run-time for testing.
- clean out a bunch of runnables
- refactoring code.
- cleaned out some extra sleeps
- Picking up suggested changes.
GEODE-7623: Preventing recursion in alert generation

After the change to send alerts in a executor, there was a possibiltiy for
sending alerts to generate new alerts, resulting an in infinite loop.

Setting the AlertingAction threadlocal in the executor thread that is sending
alerts, to prevent recursion.

Adding a test that we do not generate recursive alert messages.
GEODE-7600: ConnectionPoolDUnitTest cleanup.
GEODE-7600: ConnectionPoolDUnitTest cleanup.
GEODE-7600: ConnectionPoolDUnitTest cleanup.
GEODE-7600: ConnectionPoolDUnitTest cleanup.
GEODE-7600: ConnectionPoolDUnitTest cleanup.
GEODE-7600: ConnectionPoolDUnitTest cleanup.
GEODE-7600: ConnectionPoolDUnitTest cleanup.
GEODE-7600: ConnectionPoolDUnitTest cleanup.
GEODE-7600: ConnectionPoolDUnitTest cleanup.
GEODE-7600: ConnectionPoolDUnitTest cleanup.
GEODE-7600: ConnectionPoolDUnitTest cleanup.
GEODE-7600: ConnectionPoolDUnitTest cleanup.
GEODE-7600: ConnectionPoolDUnitTest cleanup.
GEODE-7600: ConnectionPoolDUnitTest cleanup.
GEODE-7600: ConnectionPoolDUnitTest cleanup.
GEODE-7600: ConnectionPoolDUnitTest cleanup.
GEODE-7600: ConnectionPoolDUnitTest cleanup.
GEODE-7600: ConnectionPoolDUnitTest cleanup.
GEODE-7600: ConnectionPoolDUnitTest cleanup.
GEODE-7600: ConnectionPoolDUnitTest cleanup.
GEODE-7600: ConnectionPoolDUnitTest cleanup.
GEODE-7626: Break dependency on LocalViewMessage in membership (#4538)

* GEODE-7626: Break dependency on LocalViewMessage in membership

LocalViewMessage was a DistributionMessage executed in an executor owned
by ClusterDistributionmanager.  This arrangement was very convoluted
because CDM only had upstream involvement in membership view
installation.

This PR moves view installation into GMSMembership using a
single-threaded executor similar to what CDM used but without
statistics.  Stats for the view installation thread have never been
useful so I have not retained that functionality.

There are already many tests for view installation, so while I've
modified a couple I haven't added any new tests.

* make constructor private

* simplifying the executor
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
Geode 6374 - Fixing DistributedNoAckRegionCCEOffHeapDUnitTest.testNoLoaderWithInvalidEntry (#4409)

- Changes to wait and single sourcing code.
- Cleaning out AttributeFactory usages
- Cleanup of RegionFactory usages
- Deleting an unneeded test
GEODE-7577: Log when waiting for missing persistent members (#4476)

* Separate StartupStatusListenerRegistry from StartupStatus to allow
  non-static injection of StartupStatus into classes that use it
* Add CollectionTransformer interface to TransformUtils to facilitate
  unit testing of classes depending on it
* Add new MembershipChangeListenerFactory with validation to ensure that
  warningDelay and pollDuration have correct values in relation to each
  other (to prevent recurrences of GEODE-7577)
* Fixed the formatting of missing persistent members messages in
  PersistenceAdvisorImpl
* Fixed warnings and minor issues primarily for readability and
  testability in every class touched
* Added shouldSyncForCrashedMember to InternalRegion and pulled the
  javadocs up to the interface

GEODE-4267: Fix PersistentRecoveryOrderOldConfigDUnitTest
* Replace thread sleeps with CountDownLatch
* Add a couple await calls
* Actual fix involved preventing late-running asynchronous actions that
  resulted in logging DistributedSystemDisconnectedException AFTER the
  test already removed the IgnoredException
* Major cleanup of PersistentRecoveryOrderDUnitTest including replace
  usage of Admin API with usage of DistributedSystemMXBean
* Replace Region close with Cache close in test that needs to list and
  revoke missing disk-storesGEODE-7577: Log when waiting for missing persistent members (#4476)

* Separate StartupStatusListenerRegistry from StartupStatus to allow
  non-static injection of StartupStatus into classes that use it
* Add CollectionTransformer interface to TransformUtils to facilitate
  unit testing of classes depending on it
* Add new MembershipChangeListenerFactory with validation to ensure that
  warningDelay and pollDuration have correct values in relation to each
  other (to prevent recurrences of GEODE-7577)
* Fixed the formatting of missing persistent members messages in
  PersistenceAdvisorImpl
* Fixed warnings and minor issues primarily for readability and
  testability in every class touched
* Added shouldSyncForCrashedMember to InternalRegion and pulled the
  javadocs up to the interface

GEODE-4267: Fix PersistentRecoveryOrderOldConfigDUnitTest
* Replace thread sleeps with CountDownLatch
* Add a couple await calls
* Actual fix involved preventing late-running asynchronous actions that
  resulted in logging DistributedSystemDisconnectedException AFTER the
  test already removed the IgnoredException
* Major cleanup of PersistentRecoveryOrderDUnitTest including replace
  usage of Admin API with usage of DistributedSystemMXBean
* Replace Region close with Cache close in test that needs to list and
  revoke missing disk-storesGEODE-7577: Log when waiting for missing persistent members (#4476)

* Separate StartupStatusListenerRegistry from StartupStatus to allow
  non-static injection of StartupStatus into classes that use it
* Add CollectionTransformer interface to TransformUtils to facilitate
  unit testing of classes depending on it
* Add new MembershipChangeListenerFactory with validation to ensure that
  warningDelay and pollDuration have correct values in relation to each
  other (to prevent recurrences of GEODE-7577)
* Fixed the formatting of missing persistent members messages in
  PersistenceAdvisorImpl
* Fixed warnings and minor issues primarily for readability and
  testability in every class touched
* Added shouldSyncForCrashedMember to InternalRegion and pulled the
  javadocs up to the interface

GEODE-4267: Fix PersistentRecoveryOrderOldConfigDUnitTest
* Replace thread sleeps with CountDownLatch
* Add a couple await calls
* Actual fix involved preventing late-running asynchronous actions that
  resulted in logging DistributedSystemDisconnectedException AFTER the
  test already removed the IgnoredException
* Major cleanup of PersistentRecoveryOrderDUnitTest including replace
  usage of Admin API with usage of DistributedSystemMXBean
* Replace Region close with Cache close in test that needs to list and
  revoke missing disk-storesGEODE-7577: Log when waiting for missing persistent members (#4476)

* Separate StartupStatusListenerRegistry from StartupStatus to allow
  non-static injection of StartupStatus into classes that use it
* Add CollectionTransformer interface to TransformUtils to facilitate
  unit testing of classes depending on it
* Add new MembershipChangeListenerFactory with validation to ensure that
  warningDelay and pollDuration have correct values in relation to each
  other (to prevent recurrences of GEODE-7577)
* Fixed the formatting of missing persistent members messages in
  PersistenceAdvisorImpl
* Fixed warnings and minor issues primarily for readability and
  testability in every class touched
* Added shouldSyncForCrashedMember to InternalRegion and pulled the
  javadocs up to the interface

GEODE-4267: Fix PersistentRecoveryOrderOldConfigDUnitTest
* Replace thread sleeps with CountDownLatch
* Add a couple await calls
* Actual fix involved preventing late-running asynchronous actions that
  resulted in logging DistributedSystemDisconnectedException AFTER the
  test already removed the IgnoredException
* Major cleanup of PersistentRecoveryOrderDUnitTest including replace
  usage of Admin API with usage of DistributedSystemMXBean
* Replace Region close with Cache close in test that needs to list and
  revoke missing disk-storesGEODE-7577: Log when waiting for missing persistent members (#4476)

* Separate StartupStatusListenerRegistry from StartupStatus to allow
  non-static injection of StartupStatus into classes that use it
* Add CollectionTransformer interface to TransformUtils to facilitate
  unit testing of classes depending on it
* Add new MembershipChangeListenerFactory with validation to ensure that
  warningDelay and pollDuration have correct values in relation to each
  other (to prevent recurrences of GEODE-7577)
* Fixed the formatting of missing persistent members messages in
  PersistenceAdvisorImpl
* Fixed warnings and minor issues primarily for readability and
  testability in every class touched
* Added shouldSyncForCrashedMember to InternalRegion and pulled the
  javadocs up to the interface

GEODE-4267: Fix PersistentRecoveryOrderOldConfigDUnitTest
* Replace thread sleeps with CountDownLatch
* Add a couple await calls
* Actual fix involved preventing late-running asynchronous actions that
  resulted in logging DistributedSystemDisconnectedException AFTER the
  test already removed the IgnoredException
* Major cleanup of PersistentRecoveryOrderDUnitTest including replace
  usage of Admin API with usage of DistributedSystemMXBean
* Replace Region close with Cache close in test that needs to list and
  revoke missing disk-storesGEODE-7577: Log when waiting for missing persistent members (#4476)

* Separate StartupStatusListenerRegistry from StartupStatus to allow
  non-static injection of StartupStatus into classes that use it
* Add CollectionTransformer interface to TransformUtils to facilitate
  unit testing of classes depending on it
* Add new MembershipChangeListenerFactory with validation to ensure that
  warningDelay and pollDuration have correct values in relation to each
  other (to prevent recurrences of GEODE-7577)
* Fixed the formatting of missing persistent members messages in
  PersistenceAdvisorImpl
* Fixed warnings and minor issues primarily for readability and
  testability in every class touched
* Added shouldSyncForCrashedMember to InternalRegion and pulled the
  javadocs up to the interface

GEODE-4267: Fix PersistentRecoveryOrderOldConfigDUnitTest
* Replace thread sleeps with CountDownLatch
* Add a couple await calls
* Actual fix involved preventing late-running asynchronous actions that
  resulted in logging DistributedSystemDisconnectedException AFTER the
  test already removed the IgnoredException
* Major cleanup of PersistentRecoveryOrderDUnitTest including replace
  usage of Admin API with usage of DistributedSystemMXBean
* Replace Region close with Cache close in test that needs to list and
  revoke missing disk-storesGEODE-7577: Log when waiting for missing persistent members (#4476)

* Separate StartupStatusListenerRegistry from StartupStatus to allow
  non-static injection of StartupStatus into classes that use it
* Add CollectionTransformer interface to TransformUtils to facilitate
  unit testing of classes depending on it
* Add new MembershipChangeListenerFactory with validation to ensure that
  warningDelay and pollDuration have correct values in relation to each
  other (to prevent recurrences of GEODE-7577)
* Fixed the formatting of missing persistent members messages in
  PersistenceAdvisorImpl
* Fixed warnings and minor issues primarily for readability and
  testability in every class touched
* Added shouldSyncForCrashedMember to InternalRegion and pulled the
  javadocs up to the interface

GEODE-4267: Fix PersistentRecoveryOrderOldConfigDUnitTest
* Replace thread sleeps with CountDownLatch
* Add a couple await calls
* Actual fix involved preventing late-running asynchronous actions that
  resulted in logging DistributedSystemDisconnectedException AFTER the
  test already removed the IgnoredException
* Major cleanup of PersistentRecoveryOrderDUnitTest including replace
  usage of Admin API with usage of DistributedSystemMXBean
* Replace Region close with Cache close in test that needs to list and
  revoke missing disk-storesGeode 7424 create index (#4458)

co-authored-by: Jinmei Liao <jliao@pivotal.io>
Geode 7424 create index (#4458)

co-authored-by: Jinmei Liao <jliao@pivotal.io>
GEODE-7503: Cleanup GemFireCacheImpl (#4436)

* Move inner-classes to bottom of outer class

* Move fields to top of class

* More fields

* Fixup

* Fix IJ inspection warnings

* Remove bug system ticket numbers

* Cleanup javadocs, toString, and comments

* Use @VisibleForTesting annotation

* Move toString method and backupFiles field

* Pull javadocs up to interfaces.
Define VisibleForTesting methods in InternalCacheForTesting.
Identify more methods as VisibleForTesting.

* Fixup javadocs and minor warnings in Cache interfaces.

* Move unchecked util methods to UncheckedUtils inner class

* Move static constants and fields to top of class.
Rename FIVE_HOURS to FIVE_HOURS_MILLIS.
Review older TODOs.

* Move volatile fields above non-final fields

* Move non-final fields below volatile and final fields

* Move final fields above volatile fields

* wip

* Adjust whitespace and line feeds.
Remove more TODOs and comments.
Fix spelling typo.

* Import various static methods and constants
Adjust more line feeds
Adjust more white space

* Weaken declared types where it makes sense
Add more static imports

* Remove unnecessary uses of final on local vars

* Remove uncessary uses of final on local vars

* Fixup unchecked types
Restore return types to match the interfaces

* Minor cleanup

* Change Consumer<Void> to Runnable (duh)

* Adjust line feeds of large if-statement

* Remove SuppressWarnings

* Fix AssemblyContentsIntegrationTest

* Fixup GemFireCacheImpl
GEODE-7503: Cleanup GemFireCacheImpl (#4436)

* Move inner-classes to bottom of outer class

* Move fields to top of class

* More fields

* Fixup

* Fix IJ inspection warnings

* Remove bug system ticket numbers

* Cleanup javadocs, toString, and comments

* Use @VisibleForTesting annotation

* Move toString method and backupFiles field

* Pull javadocs up to interfaces.
Define VisibleForTesting methods in InternalCacheForTesting.
Identify more methods as VisibleForTesting.

* Fixup javadocs and minor warnings in Cache interfaces.

* Move unchecked util methods to UncheckedUtils inner class

* Move static constants and fields to top of class.
Rename FIVE_HOURS to FIVE_HOURS_MILLIS.
Review older TODOs.

* Move volatile fields above non-final fields

* Move non-final fields below volatile and final fields

* Move final fields above volatile fields

* wip

* Adjust whitespace and line feeds.
Remove more TODOs and comments.
Fix spelling typo.

* Import various static methods and constants
Adjust more line feeds
Adjust more white space

* Weaken declared types where it makes sense
Add more static imports

* Remove unnecessary uses of final on local vars

* Remove uncessary uses of final on local vars

* Fixup unchecked types
Restore return types to match the interfaces

* Minor cleanup

* Change Consumer<Void> to Runnable (duh)

* Adjust line feeds of large if-statement

* Remove SuppressWarnings

* Fix AssemblyContentsIntegrationTest

* Fixup GemFireCacheImpl
GEODE-7503: Cleanup GemFireCacheImpl (#4436)

* Move inner-classes to bottom of outer class

* Move fields to top of class

* More fields

* Fixup

* Fix IJ inspection warnings

* Remove bug system ticket numbers

* Cleanup javadocs, toString, and comments

* Use @VisibleForTesting annotation

* Move toString method and backupFiles field

* Pull javadocs up to interfaces.
Define VisibleForTesting methods in InternalCacheForTesting.
Identify more methods as VisibleForTesting.

* Fixup javadocs and minor warnings in Cache interfaces.

* Move unchecked util methods to UncheckedUtils inner class

* Move static constants and fields to top of class.
Rename FIVE_HOURS to FIVE_HOURS_MILLIS.
Review older TODOs.

* Move volatile fields above non-final fields

* Move non-final fields below volatile and final fields

* Move final fields above volatile fields

* wip

* Adjust whitespace and line feeds.
Remove more TODOs and comments.
Fix spelling typo.

* Import various static methods and constants
Adjust more line feeds
Adjust more white space

* Weaken declared types where it makes sense
Add more static imports

* Remove unnecessary uses of final on local vars

* Remove uncessary uses of final on local vars

* Fixup unchecked types
Restore return types to match the interfaces

* Minor cleanup

* Change Consumer<Void> to Runnable (duh)

* Adjust line feeds of large if-statement

* Remove SuppressWarnings

* Fix AssemblyContentsIntegrationTest

* Fixup GemFireCacheImpl
GEODE-7478: Register interest in appropriate cases. (#4366)

 * register interest for Tomcat when using client cache
 * add register interest in other app as well.
 * add cache client test cases for tomcat cases.
 * modify test to allow gets mutliple times on containers when local cache is enabled
   on client cache to verify the fix.



GEODE-7507 remove GMSMembership's dependency on DistributionMessage (#4384)

* GEODE-7507 remove GMSMembership's dependency on DistributionMessage

Prior to this change-set the membership module wrapped all messages in a
GMSMessageAdapter.  This is no longer necessary and I've deleted that
class.  Instead, our messages now implement GMSMessage (now renamed
DistributionMessage) and the geode-core abstract DistributionMessage
class (now renamed ClusterMessage) implements the membership module's
API.

Most of the files in the diff are only affected by the renaming of
GMSMessage and DistributionMessage.  The primary changes are in GMSManager
and DistributionMessage (now named ClusterMessage).

* rebase on develop, rename DistributionMessageObserver

* making pmdMain happy

* revert renaming message class/interface

* fix serialization test

* rename GMSMessage to Message

* fixes for Dan's comments

* addressing pmdMain issue

* removing DistributionMessage from another arch unit test
GEODE-7507 remove GMSMembership's dependency on DistributionMessage (#4384)

* GEODE-7507 remove GMSMembership's dependency on DistributionMessage

Prior to this change-set the membership module wrapped all messages in a
GMSMessageAdapter.  This is no longer necessary and I've deleted that
class.  Instead, our messages now implement GMSMessage (now renamed
DistributionMessage) and the geode-core abstract DistributionMessage
class (now renamed ClusterMessage) implements the membership module's
API.

Most of the files in the diff are only affected by the renaming of
GMSMessage and DistributionMessage.  The primary changes are in GMSManager
and DistributionMessage (now named ClusterMessage).

* rebase on develop, rename DistributionMessageObserver

* making pmdMain happy

* revert renaming message class/interface

* fix serialization test

* rename GMSMessage to Message

* fixes for Dan's comments

* addressing pmdMain issue

* removing DistributionMessage from another arch unit test
GEODE-7487: Update Running CQ Context (#4369)

- Added unit and integration tests.
- Implemented method to invalidate the cache used by CQs.
- Updated the context implementation to change the internal
  MethodInvocationAuthorizer used whenever the CQ resets the
  ExecutionContext.
- Added a warning message whenever the MethodInvocationAuthorizer 
  returned by the QueryConfigurationService is null.GEODE-7436: Deploy jar using semantic versioning scheme  (#4382)

Co-authored-by: Dale Emery <demery@pivotal.io>
Co-authored-by: Jinmei Liao <jiliao@pivotal.io>
Co-authored-by: Darrel Schneider <dschneider@pivotal.io>
Co-authored-by: Joris Melchior <jmelchior@pivotal.io>

* Deploy jar using semantic versioning scheme
* always add sequence number at the end of the filename no matter what version scheme the deployed file uses.

* fix window's tests
GEODE-6616: fix testClientDynamicallyDropsStoppedLocator (#4348)

* GEODE-6616: fix testClientDynamicallyDropsStoppedLocator

fixed an issue where the test was not waiting for getOnlineLocators' value
to become 1. It can take a moment to update.

GEODE-7436: Deploy jar using semantic versioning scheme (#4343)

Co-authored-by: Dale Emery <demery@pivotal.io>
Co-authored-by: Jinmei Liao <jiliao@pivotal.io>
Co-authored-by: Darrel Schneider <dschneider@pivotal.io>
Co-authored-by: Joris Melchior <jmelchior@pivotal.io>

* Deploy jar using semantic versioning scheme
* always add sequence number at the end of the filename no matter what version scheme the deployed file uses.
GEODE-6990: Add xml persistence for OQL authorization (#4161)

- Added new cache.xml infrastructure for query-config-service including the
method authorizer
- Added a new CacheService QueryConfigurationService to store long
lasting configuration details for the QueryService
- Added testing for both of the above

Co-authored-by: Benjamin Ross <bross@pivotal.io>
Co-authored-by: Donal Evans <doevans@pivotal.io>GEODE-6990: Add xml persistence for OQL authorization (#4161)

- Added new cache.xml infrastructure for query-config-service including the
method authorizer
- Added a new CacheService QueryConfigurationService to store long
lasting configuration details for the QueryService
- Added testing for both of the above

Co-authored-by: Benjamin Ross <bross@pivotal.io>
Co-authored-by: Donal Evans <doevans@pivotal.io>GEODE-7407: Remove AttributesFactory from Test (#4297)

- Fixed minor warnings.
- Replaced usages of 'junit.Assert' by 'assertj'.
- Removed references to the deprecated AttributesFactory class from
  the RestAPIOnRegionFunctionExecutionDUnitTest class.GEODE-7407: Remove AttributesFactory from Test (#4297)

- Fixed minor warnings.
- Replaced usages of 'junit.Assert' by 'assertj'.
- Removed references to the deprecated AttributesFactory class from
  the RestAPIOnRegionFunctionExecutionDUnitTest class.GEODE-7407: Remove AttributesFactory from Test (#4297)

- Fixed minor warnings.
- Replaced usages of 'junit.Assert' by 'assertj'.
- Removed references to the deprecated AttributesFactory class from
  the RestAPIOnRegionFunctionExecutionDUnitTest class.GEODE-7407: Remove AttributesFactory from Test (#4297)

- Fixed minor warnings.
- Replaced usages of 'junit.Assert' by 'assertj'.
- Removed references to the deprecated AttributesFactory class from
  the RestAPIOnRegionFunctionExecutionDUnitTest class.GEODE-7407: Remove AttributesFactory from Test (#4297)

- Fixed minor warnings.
- Replaced usages of 'junit.Assert' by 'assertj'.
- Removed references to the deprecated AttributesFactory class from
  the RestAPIOnRegionFunctionExecutionDUnitTest class.GEODE-7358: Membership code should use InternalDistributedMember as the membership identifier (#4230)

* GEODE-7358: Membership code should use InternalDistributedMember as the membership identifier

Initial refactor: removal of NetMember, MemberAttributes and other classes that subordinated GMS
identifiers.  Repurposing GMSMember as a data packet to hold information required in a membership
identifer.

* fixing failing tests

* fixing failing unit tests

* picking up a change that IntelliJ didn't auto-save & fixing serializables test

* fixing problems with durable client ids

these identifiers morph after the client's membership identifier has been formed
so the member ID needs to be updated before serializing it

* fixing merge error

* updating sanctionedDataSerializables

* fixing lgtm complaint

* removing unnecessary serialization/deserialization methods in GMSUtil

* remove methods no longer needed for serializing an object with a different DSFID

* fixing serializables test
GEODE-7283: Store MethodAuthorizer in Context (#4179)

The MethodInvocationAuthorizer should be unique per query and should
not be changed for a particular query while it's being executed so,
starting with this commit, it is directly stored as part of the
ExecutionContext. This also prevents the creation of multiple instances
of the DefaultQueryService and the configured authorizer itself while
the intermediate result objects are being traversed during the query
evaluation.

- Added tests.
- Fixed minor warnings and spelling.
- Replaced usages of 'junit.Assert' by 'assertj'.
- The AttributeDescriptor and MethodDispatch classes do not require
  MethodInvocationAuthorizer as a constructor parameter anymore, the
  authorizer is obtained from the context, and **only** when needed.
- The MethodDispatch class does not internally store and cache the
  MethodInvocationAuthorizer instance anymore, thus allowing Geode to
  change the authorizer in runtime without needing to re-load every
  already known method (expensive due to reflection).
- The ExecutionContext uses a no-op authorizer when created from a
  client cache: authorization and authentication logic happens only on
  server side, and the authorizer will be obtained from the cluster
  configuration service directly instead of the query service when OQL
  security is fully implemented.GEODE-7171: Encapsulate metrics session (#4203)

Metrics session responsibilities are starting to appear in too many
parts of Geode. This change encapsulates those responsibilities into a
single class.

Changes to core Geode classes:

- GemFireCacheImpl no longer holds a meter registry or the set of "user"
  registries added by the cache builder.

- InternalCacheBuilder no longer constructs objects on behalf of the
  metrics session.  Instead, it gathers meter registries and other
  details into a MetricsService.Builder, which it passes to the
  InternalDistributedSystem.Builder.

- InternalDistributedSystem no longer knows about client meter
  registries. Instead, it holds a MetricsService, which remembers its
  builder.  During reconnect, the InternalDistributedSystem retrieves
  the builder from its metrics service, and uses the builder to build
  a similar metrics service in the reconnected system.

New classes and interfaces (org.apache.geode.metrics.internal):

- StandardMeterBinder
  - Binds standard meter binders to the meter registry.
  - close() closes the closeable binders, freeing their resources.

- MetricsService interface
  - Extends MetricsSession.
  - Adds methods to start and stop the service, and to access the
    service's meter registry.
  - Adds a method that returns the builder that built the metrics
    service, so that reconnect can use the same builder to build the
    metrics service for the reconnected system.

- InternalDistributedSystemMetricsService
  - Implements MetricsService.
  - Creates and retains a composite meter registry to manage meters.
  - Configures the composite composite registry:
    - Adds common tags that describe the system
    - Adds client meter registries to the composite.
    - Applies a StandardMeterBinder to add standard meters to the
      registry.
  - Discovers, starts, and stops metrics publishing services.
  - Adds and removes sub-registries as instructed by publishing
    services.
  - When stopped, stops each publishing service, closes all closeable
    meter binders, removes all sub-registries, and closes its composite
    meter registry.

- MetricsService.Builder interface

- InternalDistriburtedSystemMetricsService.Builder
  - Implements MetricsService.Builder
  - Accumulates and retains constructor parameters for the eventual
    InternalDistributedSystemMetricsService.
  - In particular, maintains a collection of meter registries added by
    the cache builder. It calls these 'persistent' registries, because
    they will persist across reconnects.

Other changes:

- Added MetricsSession parameter to MetricsPublishingService.stop().

Authored-by: Dale Emery <demery@pivotal.io>GEODE-7171: Encapsulate metrics session (#4203)

Metrics session responsibilities are starting to appear in too many
parts of Geode. This change encapsulates those responsibilities into a
single class.

Changes to core Geode classes:

- GemFireCacheImpl no longer holds a meter registry or the set of "user"
  registries added by the cache builder.

- InternalCacheBuilder no longer constructs objects on behalf of the
  metrics session.  Instead, it gathers meter registries and other
  details into a MetricsService.Builder, which it passes to the
  InternalDistributedSystem.Builder.

- InternalDistributedSystem no longer knows about client meter
  registries. Instead, it holds a MetricsService, which remembers its
  builder.  During reconnect, the InternalDistributedSystem retrieves
  the builder from its metrics service, and uses the builder to build
  a similar metrics service in the reconnected system.

New classes and interfaces (org.apache.geode.metrics.internal):

- StandardMeterBinder
  - Binds standard meter binders to the meter registry.
  - close() closes the closeable binders, freeing their resources.

- MetricsService interface
  - Extends MetricsSession.
  - Adds methods to start and stop the service, and to access the
    service's meter registry.
  - Adds a method that returns the builder that built the metrics
    service, so that reconnect can use the same builder to build the
    metrics service for the reconnected system.

- InternalDistributedSystemMetricsService
  - Implements MetricsService.
  - Creates and retains a composite meter registry to manage meters.
  - Configures the composite composite registry:
    - Adds common tags that describe the system
    - Adds client meter registries to the composite.
    - Applies a StandardMeterBinder to add standard meters to the
      registry.
  - Discovers, starts, and stops metrics publishing services.
  - Adds and removes sub-registries as instructed by publishing
    services.
  - When stopped, stops each publishing service, closes all closeable
    meter binders, removes all sub-registries, and closes its composite
    meter registry.

- MetricsService.Builder interface

- InternalDistriburtedSystemMetricsService.Builder
  - Implements MetricsService.Builder
  - Accumulates and retains constructor parameters for the eventual
    InternalDistributedSystemMetricsService.
  - In particular, maintains a collection of meter registries added by
    the cache builder. It calls these 'persistent' registries, because
    they will persist across reconnects.

Other changes:

- Added MetricsSession parameter to MetricsPublishingService.stop().

Authored-by: Dale Emery <demery@pivotal.io>GEODE-7171: Encapsulate metrics session (#4203)

Metrics session responsibilities are starting to appear in too many
parts of Geode. This change encapsulates those responsibilities into a
single class.

Changes to core Geode classes:

- GemFireCacheImpl no longer holds a meter registry or the set of "user"
  registries added by the cache builder.

- InternalCacheBuilder no longer constructs objects on behalf of the
  metrics session.  Instead, it gathers meter registries and other
  details into a MetricsService.Builder, which it passes to the
  InternalDistributedSystem.Builder.

- InternalDistributedSystem no longer knows about client meter
  registries. Instead, it holds a MetricsService, which remembers its
  builder.  During reconnect, the InternalDistributedSystem retrieves
  the builder from its metrics service, and uses the builder to build
  a similar metrics service in the reconnected system.

New classes and interfaces (org.apache.geode.metrics.internal):

- StandardMeterBinder
  - Binds standard meter binders to the meter registry.
  - close() closes the closeable binders, freeing their resources.

- MetricsService interface
  - Extends MetricsSession.
  - Adds methods to start and stop the service, and to access the
    service's meter registry.
  - Adds a method that returns the builder that built the metrics
    service, so that reconnect can use the same builder to build the
    metrics service for the reconnected system.

- InternalDistributedSystemMetricsService
  - Implements MetricsService.
  - Creates and retains a composite meter registry to manage meters.
  - Configures the composite composite registry:
    - Adds common tags that describe the system
    - Adds client meter registries to the composite.
    - Applies a StandardMeterBinder to add standard meters to the
      registry.
  - Discovers, starts, and stops metrics publishing services.
  - Adds and removes sub-registries as instructed by publishing
    services.
  - When stopped, stops each publishing service, closes all closeable
    meter binders, removes all sub-registries, and closes its composite
    meter registry.

- MetricsService.Builder interface

- InternalDistriburtedSystemMetricsService.Builder
  - Implements MetricsService.Builder
  - Accumulates and retains constructor parameters for the eventual
    InternalDistributedSystemMetricsService.
  - In particular, maintains a collection of meter registries added by
    the cache builder. It calls these 'persistent' registries, because
    they will persist across reconnects.

Other changes:

- Added MetricsSession parameter to MetricsPublishingService.stop().

Authored-by: Dale Emery <demery@pivotal.io>GEODE-7171: Encapsulate metrics session (#4203)

Metrics session responsibilities are starting to appear in too many
parts of Geode. This change encapsulates those responsibilities into a
single class.

Changes to core Geode classes:

- GemFireCacheImpl no longer holds a meter registry or the set of "user"
  registries added by the cache builder.

- InternalCacheBuilder no longer constructs objects on behalf of the
  metrics session.  Instead, it gathers meter registries and other
  details into a MetricsService.Builder, which it passes to the
  InternalDistributedSystem.Builder.

- InternalDistributedSystem no longer knows about client meter
  registries. Instead, it holds a MetricsService, which remembers its
  builder.  During reconnect, the InternalDistributedSystem retrieves
  the builder from its metrics service, and uses the builder to build
  a similar metrics service in the reconnected system.

New classes and interfaces (org.apache.geode.metrics.internal):

- StandardMeterBinder
  - Binds standard meter binders to the meter registry.
  - close() closes the closeable binders, freeing their resources.

- MetricsService interface
  - Extends MetricsSession.
  - Adds methods to start and stop the service, and to access the
    service's meter registry.
  - Adds a method that returns the builder that built the metrics
    service, so that reconnect can use the same builder to build the
    metrics service for the reconnected system.

- InternalDistributedSystemMetricsService
  - Implements MetricsService.
  - Creates and retains a composite meter registry to manage meters.
  - Configures the composite composite registry:
    - Adds common tags that describe the system
    - Adds client meter registries to the composite.
    - Applies a StandardMeterBinder to add standard meters to the
      registry.
  - Discovers, starts, and stops metrics publishing services.
  - Adds and removes sub-registries as instructed by publishing
    services.
  - When stopped, stops each publishing service, closes all closeable
    meter binders, removes all sub-registries, and closes its composite
    meter registry.

- MetricsService.Builder interface

- InternalDistriburtedSystemMetricsService.Builder
  - Implements MetricsService.Builder
  - Accumulates and retains constructor parameters for the eventual
    InternalDistributedSystemMetricsService.
  - In particular, maintains a collection of meter registries added by
    the cache builder. It calls these 'persistent' registries, because
    they will persist across reconnects.

Other changes:

- Added MetricsSession parameter to MetricsPublishingService.stop().

Authored-by: Dale Emery <demery@pivotal.io>GEODE:6784 Added unit tests to classes in the tomcat module (#4061)

Co-authored-by: Benjamin Ross <bross@pivotal.io>
Co-authored-by: Donal Evans <doevans@pivotal.io>GEODE-6566: Prevent MemberMXBeanAttributesDistributedTest flakiness

Set STATISTIC_SAMPLE_RATE to max value (60000).

Additional cleanup:
* Cleanup MemberMXBeanAttributesDistributedTest
* Remove unnecessary VMs
* Convert from JUnit Assert to AssertJ
* Inline lots of methods
* Use controller VM as the member VM
sort versions before handing them out to tests
GEODE-7221: Set hasOwnStats true for management regions

Ensure that managements regions close CachePerfStats by setting
hasOwnStats to true from FederatingManager and LocalManager.
GEODE-7221: Set hasOwnStats true for management regions

Ensure that managements regions close CachePerfStats by setting
hasOwnStats to true from FederatingManager and LocalManager.
GEODE-7076: remove "group" for pdx configuration (#4035)

Co-authored-by: Darrel Schneider <dschneider@pivotal.io>

* moved RestfulEndpoint up to AbstractConfiguration
* moved CorrespondsWith to AbstractConfigurationGEODE-7156: add token based authentication support in management rest… (#4005)

* GEODE-7156: add token based authentication support in management rest api

Co-authored-by: Joris Melchior <jmelchior@pivotal.io>

* added security-auth-token-enabled-components property
* pass this property to the management web application context
* enabled auth token filter when that property is set
* improve SimpleSecurityManager to authenticate mock token
GEODE-7114: fix flaky tests by using GeodeAwaitility. (#3979)


GEODE-4993: Store GatewaySender connection stats (#3787)

* Add ClientSendStats to stats documentation
* Alphabetically sort ClientSendStats to align with documentation and some fixes
* Leave just one ConnectionStats constructor
* Missing tests for addPdxType
* Remove not used stats
* More missing tests for addPdxType
* Added tests
GEODE-4993: Store GatewaySender connection stats (#3787)

* Add ClientSendStats to stats documentation
* Alphabetically sort ClientSendStats to align with documentation and some fixes
* Leave just one ConnectionStats constructor
* Missing tests for addPdxType
* Remove not used stats
* More missing tests for addPdxType
* Added tests
GEODE-4993: Store GatewaySender connection stats (#3787)

* Add ClientSendStats to stats documentation
* Alphabetically sort ClientSendStats to align with documentation and some fixes
* Leave just one ConnectionStats constructor
* Missing tests for addPdxType
* Remove not used stats
* More missing tests for addPdxType
* Added tests
GEODE-4993: Store GatewaySender connection stats (#3787)

* Add ClientSendStats to stats documentation
* Alphabetically sort ClientSendStats to align with documentation and some fixes
* Leave just one ConnectionStats constructor
* Missing tests for addPdxType
* Remove not used stats
* More missing tests for addPdxType
* Added tests
GEODE-7010: Replace static globals in CachePerfStats with StatisticsClock (#3859)

* Replace CachePerfStats.getStatTime with Cache owned StatisticsClock
* Inject StatisticsClock dependency via constructor
GEODE-7042: Set server status to "online" after all startup tasks complete (#3878)

ServerLauncher start will now wait until all asynchronous startup tasks
complete to update server status as "online".

Previously, the server status was set to "online" before all of the
startup tasks had completed. This provided users with incorrect facts
about the system and its availability. This commit changes the behavior
of ServerLauncher.start() so that it waits for all of the asynchronous
startup tasks to complete before returning the "online" status. The GFSH
"start server" command relies on this status, so this also has the
effect of making the command wait for all startup tasks to complete
before returning.

* ServerLauncher.start() waits for startup tasks to complete
* Improve testability of ServerLauncher
* Extract ControllableProcess interface
* Change InternalResourceManager support for asynchronous startup tasks
* Move the responsibility for chaining the completion and exception
actions of startup tasks to ServerLauncher

Co-authored-by: Aaron Lindsey <alindsey@pivotal.io>
Co-authored-by: Kirk Lund <klund@apache.org>
Co-authored-by: Dale Emery <demery@pivotal.io>
GEODE-7042: Set server status to "online" after all startup tasks complete (#3878)

ServerLauncher start will now wait until all asynchronous startup tasks
complete to update server status as "online".

Previously, the server status was set to "online" before all of the
startup tasks had completed. This provided users with incorrect facts
about the system and its availability. This commit changes the behavior
of ServerLauncher.start() so that it waits for all of the asynchronous
startup tasks to complete before returning the "online" status. The GFSH
"start server" command relies on this status, so this also has the
effect of making the command wait for all startup tasks to complete
before returning.

* ServerLauncher.start() waits for startup tasks to complete
* Improve testability of ServerLauncher
* Extract ControllableProcess interface
* Change InternalResourceManager support for asynchronous startup tasks
* Move the responsibility for chaining the completion and exception
actions of startup tasks to ServerLauncher

Co-authored-by: Aaron Lindsey <alindsey@pivotal.io>
Co-authored-by: Kirk Lund <klund@apache.org>
Co-authored-by: Dale Emery <demery@pivotal.io>
GEODE-7042: Set server status to "online" after all startup tasks complete (#3878)

ServerLauncher start will now wait until all asynchronous startup tasks
complete to update server status as "online".

Previously, the server status was set to "online" before all of the
startup tasks had completed. This provided users with incorrect facts
about the system and its availability. This commit changes the behavior
of ServerLauncher.start() so that it waits for all of the asynchronous
startup tasks to complete before returning the "online" status. The GFSH
"start server" command relies on this status, so this also has the
effect of making the command wait for all startup tasks to complete
before returning.

* ServerLauncher.start() waits for startup tasks to complete
* Improve testability of ServerLauncher
* Extract ControllableProcess interface
* Change InternalResourceManager support for asynchronous startup tasks
* Move the responsibility for chaining the completion and exception
actions of startup tasks to ServerLauncher

Co-authored-by: Aaron Lindsey <alindsey@pivotal.io>
Co-authored-by: Kirk Lund <klund@apache.org>
Co-authored-by: Dale Emery <demery@pivotal.io>
GEODE-6883 Move the membership code into a separate gradle sub-project

This commit is focused on removing references to
InternalDistributedMember and DistributionMessage from "gms"
packages.

    GMS classes only refer to GMSMember
    GMS classes use GMSMembershipView.  NetView is now an interface
    GMS classes do not refer to DistributionMessage.  JGroupsMessenger
      expects GMSMessage instances.  Geode messages to be sent over UDP
      are wrapped in a GMSMessageAdapter.
    "gms" messages extend AbstractGMSMessage which implements GMSMessage
    GMSMembershipManager has an inner class that implements the GMS Manager
      interface and is now in the "adapter" package
    GMSMembershipManager translates GMSMembershipView into a MembershipView
      for the rest of Geode to use (this is the old NetView class)
    GMS instantiation allows us to inject the Manager into the new Services
      instance.
    Other adapter classes have been added to translate between Geode
      and GMS.

    GMSUtil has new methods for marshalling/unmarshalling
    InternalDistributedMember instances for backward-compatibility.
    GMSMember now has the same on-wire form as
    InternalDistributedMember.  This allows the GMS classes to
    deserialize a message from a pre-1.10 member whose code writes
    InternalDistributedMembers when serializing something like a
    JoinRequest.
GEODE-6883 Move the membership code into a separate gradle sub-project

This commit is focused on removing references to
InternalDistributedMember and DistributionMessage from "gms"
packages.

    GMS classes only refer to GMSMember
    GMS classes use GMSMembershipView.  NetView is now an interface
    GMS classes do not refer to DistributionMessage.  JGroupsMessenger
      expects GMSMessage instances.  Geode messages to be sent over UDP
      are wrapped in a GMSMessageAdapter.
    "gms" messages extend AbstractGMSMessage which implements GMSMessage
    GMSMembershipManager has an inner class that implements the GMS Manager
      interface and is now in the "adapter" package
    GMSMembershipManager translates GMSMembershipView into a MembershipView
      for the rest of Geode to use (this is the old NetView class)
    GMS instantiation allows us to inject the Manager into the new Services
      instance.
    Other adapter classes have been added to translate between Geode
      and GMS.

    GMSUtil has new methods for marshalling/unmarshalling
    InternalDistributedMember instances for backward-compatibility.
    GMSMember now has the same on-wire form as
    InternalDistributedMember.  This allows the GMS classes to
    deserialize a message from a pre-1.10 member whose code writes
    InternalDistributedMembers when serializing something like a
    JoinRequest.
GEODE-6883 Move the membership code into a separate gradle sub-project

This commit is focused on removing references to
InternalDistributedMember and DistributionMessage from "gms"
packages.

    GMS classes only refer to GMSMember
    GMS classes use GMSMembershipView.  NetView is now an interface
    GMS classes do not refer to DistributionMessage.  JGroupsMessenger
      expects GMSMessage instances.  Geode messages to be sent over UDP
      are wrapped in a GMSMessageAdapter.
    "gms" messages extend AbstractGMSMessage which implements GMSMessage
    GMSMembershipManager has an inner class that implements the GMS Manager
      interface and is now in the "adapter" package
    GMSMembershipManager translates GMSMembershipView into a MembershipView
      for the rest of Geode to use (this is the old NetView class)
    GMS instantiation allows us to inject the Manager into the new Services
      instance.
    Other adapter classes have been added to translate between Geode
      and GMS.

    GMSUtil has new methods for marshalling/unmarshalling
    InternalDistributedMember instances for backward-compatibility.
    GMSMember now has the same on-wire form as
    InternalDistributedMember.  This allows the GMS classes to
    deserialize a message from a pre-1.10 member whose code writes
    InternalDistributedMembers when serializing something like a
    JoinRequest.
Rename and remove parameters for InternalResourceManager.runWhenStartupTasksComplete

- Refactor InternalResourceManager.runWhenStartupTasksComplete to return the allOf CompletableFuture
- Move the responsibility for chaining the completion and exception actions to ServerLauncher.awaitStartupTasks

Co-authored-by: Aaron Lindsey <alindsey@pivotal.io>
Co-authored-by: Kirk Lund <klund@apache.org>
Rename and remove parameters for InternalResourceManager.runWhenStartupTasksComplete

- Refactor InternalResourceManager.runWhenStartupTasksComplete to return the allOf CompletableFuture
- Move the responsibility for chaining the completion and exception actions to ServerLauncher.awaitStartupTasks

Co-authored-by: Aaron Lindsey <alindsey@pivotal.io>
Co-authored-by: Kirk Lund <klund@apache.org>
GEODE-7001: Add region entry count gauge (#3850)

* GEODE-7001: Add region entry count gauge

Add 'member.region.entries' gauge in RegionPerfStats
- Add region.name and data.policy tags
- Add an AtomicLong to track the entry count
- Configure the member.region.entries gauge to fetch from new
  getLocalSize() method (see below).
- Configure the 'entryCount' stat to be supplied by new getLocalSize()
  method.

Add getLocalSize() method to InternalRegion, and implement it in
LocalRegion and PartitionedRegion
- In LocalRegion, the method returns the region map size minus the
  number of tombstones.
- In PartitionedRegion, the method sums the local sizes of all local
  bucket regions.

Also refactored the following:
- Reorganize CachePerfStats/RegionPerfStats constructors
- Remove CachePerfStats.getEntries()
- Remove use of CachePerfStats.getEntries() from
  PartitionedRegionStatus.
- Add @Override to ValidatingStatisticsType methods in StatisticsTypeImpl
- Extracted invokeSuppliers() to new SuppliableStatistics interface and
  rename as updateSuppliedValues()
- Move responsibility to prepend 'RegionStats-' onto region statistics
  textID into the classes that create RegionPerfStats and
  CachePerfStats.

Co-authored-by: Michael Oleske <moleske@pivotal.io>
Co-authored-by: Kirk Lund <klund@apache.org>
Co-Authored-By: Mark Hanson <mhanson@pivotal.io>
Co-Authored-By: Aaron Lindsey <alindsey@pivotal.io>

* empty commit to trigger precheckin

* Remove leftover atMost

* Spotless found unused import
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7008: Function execution by id uses correct bucket filter. (#3835)

* Modifies tests to execute by both object and id.
* Cleanup most warnings in tests.
GEODE-7006: Fixes function execution by id with transactions. (#3840)

* Fixes test to force and wait for PR metadata to update.Add LegacyStatCounter and LegacyStatTimer

- Also migrate GatewayReceiverStats events received to use new
LegacyStatCounter.

Co-authored-by: Kirk Lund <klund@apache.org>
GEODE-6850: change int stats to long (#3713)

The "Int" methods on the statistics interfaces have been deprecated in favor of the corresponding "Long" methods.
The implementation of these deprecated "Int" methods now use the "Long" methods.
The only place this could be visible to a user is if they call Statistics.get(String) or Statistics.get(StatisticDescriptor). Both of these methods return a "Number" instance.
These methods continue to do this and existing code will work fine if it does not try to downcast the Number to a subclass. But for "Int" stats, these methods used to return an "Integer" instance and now return a "Long" instance. If code used to cast to an "Integer" it will now be broken.
Many places in the product now use these deprecated "Int" methods and as of this checkin all those places are now creating a "Long" statistic.GEODE-6850: change int stats to long (#3713)

The "Int" methods on the statistics interfaces have been deprecated in favor of the corresponding "Long" methods.
The implementation of these deprecated "Int" methods now use the "Long" methods.
The only place this could be visible to a user is if they call Statistics.get(String) or Statistics.get(StatisticDescriptor). Both of these methods return a "Number" instance.
These methods continue to do this and existing code will work fine if it does not try to downcast the Number to a subclass. But for "Int" stats, these methods used to return an "Integer" instance and now return a "Long" instance. If code used to cast to an "Integer" it will now be broken.
Many places in the product now use these deprecated "Int" methods and as of this checkin all those places are now creating a "Long" statistic.GEODE-6861: Generify ClusterManagementService (#3708)

* GEODE-6861: Generify ClusterManagementServiceGEODE-6861: Generify ClusterManagementService (#3708)

* GEODE-6861: Generify ClusterManagementServiceGEODE-6811: be able to create GWR in management api. (#3687)

* add createGWR methods in the gateway controllers
* add GatewaReceiverConfigValidator
* add MemberValidator to validate same element can't exists in multiple groups which have common member
* add ConfigurationManager.get method to replace ConfigurationValidator.exists method for more conflict validationGEODE-6811: be able to create GWR in management api. (#3687)

* add createGWR methods in the gateway controllers
* add GatewaReceiverConfigValidator
* add MemberValidator to validate same element can't exists in multiple groups which have common member
* add ConfigurationManager.get method to replace ConfigurationValidator.exists method for more conflict validationGEODE-6786: be able to delete cache element when no members are found. (#3663)

* validate group when there deleting a cache element
* group name should not have comma when creating the cache element.GEODE-6777: Create gateway senders command should only return when DistributedSystemMXBean reflects creation status (#3643)

GEODE-6777: Create gateway senders command should only return when DistributedSystemMXBean reflects creation status (#3643)

GEODE-6678: use builder to build ClusterManagementService (#3554)


GEODE-6754: Remove micrometer timers from LocalRegion (#3567)

Co-authored-by: Mark Hanson mhanson@pivotal.ioGEODE-6754: Remove micrometer timers from LocalRegion (#3567)

Co-authored-by: Mark Hanson mhanson@pivotal.ioGEODE-6754: Remove micrometer timers from LocalRegion (#3567)

Co-authored-by: Mark Hanson mhanson@pivotal.ioGEODE-6754: Remove micrometer timers from LocalRegion (#3567)

Co-authored-by: Mark Hanson mhanson@pivotal.ioGEODE-6754: Remove micrometer timers from LocalRegion (#3567)

Co-authored-by: Mark Hanson mhanson@pivotal.ioGEODE-6754: Remove micrometer timers from LocalRegion (#3567)

Co-authored-by: Mark Hanson mhanson@pivotal.ioGEODE-6754: Remove micrometer timers from LocalRegion (#3567)

Co-authored-by: Mark Hanson mhanson@pivotal.ioGEODE-6754: Remove micrometer timers from LocalRegion (#3567)

Co-authored-by: Mark Hanson mhanson@pivotal.ioGEODE-6731: Cleanup tests using ResourceUtils
GEODE-6731: Cleanup tests using ResourceUtils
GEODE-5971: delete LegacyCommandResult and rename ModelResultModel to… (#3497)


GEODE-6612: add entry count for list Region and rework filtering by groups (#3465)

Co-authored-by: Owen Nichols <onichols@pivotal.io>
Co-authored-by: Jens Deppe jdeppe@pivotal.io

* Create a RuntimeCacheElement interface to hold multiple groups
* Using RegionConfig can only set/get one groupGEODE-6551: Fix Constraints Check in Alter Region (#3349)

* GEODE-6551: Fix Constraints Check in Alter Region

Some persistence constraints were not correctly validated for a
partitioned region before associating an async-event-queue and/or
gateway-sender, leaving the region and the cluster configuration
service inconsistent.

- Fixed minor warnings.
- Fixed the internal validation implemented by PartitionedRegion.
- Some method's signatures were changed from "parallelGatewaySender" to
"parallelAsynchronousEventDispatcher" as they are used alike for
both a gateway-sender and async-event-queue.GEODE-6551: Fix Constraints Check in Alter Region (#3349)

* GEODE-6551: Fix Constraints Check in Alter Region

Some persistence constraints were not correctly validated for a
partitioned region before associating an async-event-queue and/or
gateway-sender, leaving the region and the cluster configuration
service inconsistent.

- Fixed minor warnings.
- Fixed the internal validation implemented by PartitionedRegion.
- Some method's signatures were changed from "parallelGatewaySender" to
"parallelAsynchronousEventDispatcher" as they are used alike for
both a gateway-sender and async-event-queue.GEODE-6551: Fix Constraints Check in Alter Region (#3349)

* GEODE-6551: Fix Constraints Check in Alter Region

Some persistence constraints were not correctly validated for a
partitioned region before associating an async-event-queue and/or
gateway-sender, leaving the region and the cluster configuration
service inconsistent.

- Fixed minor warnings.
- Fixed the internal validation implemented by PartitionedRegion.
- Some method's signatures were changed from "parallelGatewaySender" to
"parallelAsynchronousEventDispatcher" as they are used alike for
both a gateway-sender and async-event-queue.GEODE-6551: Fix Constraints Check in Alter Region (#3349)

* GEODE-6551: Fix Constraints Check in Alter Region

Some persistence constraints were not correctly validated for a
partitioned region before associating an async-event-queue and/or
gateway-sender, leaving the region and the cluster configuration
service inconsistent.

- Fixed minor warnings.
- Fixed the internal validation implemented by PartitionedRegion.
- Some method's signatures were changed from "parallelGatewaySender" to
"parallelAsynchronousEventDispatcher" as they are used alike for
both a gateway-sender and async-event-queue.GEODE-6551: Fix Constraints Check in Alter Region (#3349)

* GEODE-6551: Fix Constraints Check in Alter Region

Some persistence constraints were not correctly validated for a
partitioned region before associating an async-event-queue and/or
gateway-sender, leaving the region and the cluster configuration
service inconsistent.

- Fixed minor warnings.
- Fixed the internal validation implemented by PartitionedRegion.
- Some method's signatures were changed from "parallelGatewaySender" to
"parallelAsynchronousEventDispatcher" as they are used alike for
both a gateway-sender and async-event-queue.GEODE-6551: Fix Constraints Check in Alter Region (#3349)

* GEODE-6551: Fix Constraints Check in Alter Region

Some persistence constraints were not correctly validated for a
partitioned region before associating an async-event-queue and/or
gateway-sender, leaving the region and the cluster configuration
service inconsistent.

- Fixed minor warnings.
- Fixed the internal validation implemented by PartitionedRegion.
- Some method's signatures were changed from "parallelGatewaySender" to
"parallelAsynchronousEventDispatcher" as they are used alike for
both a gateway-sender and async-event-queue.GEODE-6443: log all request and response in geode management service (#3373)


GEODE-6534: Extract RegionPerfStats from LocalRegion (#3315)

Set enableClockStats before constructing CachePerfStats.
 GEODE-5971: refactor DestroyRegionCommand and CreateRegionCommand.interceptor (#3299)

* GEODE-5971: refactor DestroyRegionCommand and CreateRegionCommand.interceptor to use ResultModel
GEODE-6505: Use Enum instead of String for RegionConfig type (#3287)

Co-authored-by: Jinmei Liao <jiliao@pivotal.io>
Co-authored-by: Peter Tran <ptran@pivotal.io>
Co-authored-by: Owen Nichols <onichols@pivotal.io>GEODE-6412: Improve concurrency for getBucketIndex (#3198)

  * Caching an arbitrary index instead of finding one for every getBucketIndex call
  * Refactored to use jmh asych group threadsGEODE-5971: refactor more to use ResultModel (#3268)

Co-authored-by: Owen Nichols <onichols@pivotal.io>GEODE-5971: refactor more to use ResultModel (#3268)

Co-authored-by: Owen Nichols <onichols@pivotal.io>GEODE-6442: Fix Statistics textId and numericId

* Move getPid from StatSampler to StatisticsManager
* Default textId to StatisticsManager.getName if textId is empty
* Default numericId to StatisticsManager.getPid if numericId is zero
GEODE-6442: Fix Statistics textId and numericId

* Move getPid from StatSampler to StatisticsManager
* Default textId to StatisticsManager.getName if textId is empty
* Default numericId to StatisticsManager.getPid if numericId is zero
GEODE-6442: Fix Statistics textId and numericId

* Move getPid from StatSampler to StatisticsManager
* Default textId to StatisticsManager.getName if textId is empty
* Default numericId to StatisticsManager.getPid if numericId is zero
GEODE-6442: Fix Statistics textId and numericId

* Move getPid from StatSampler to StatisticsManager
* Default textId to StatisticsManager.getName if textId is empty
* Default numericId to StatisticsManager.getPid if numericId is zero
GEODE-6283: expose HttpService on InternalCache so that different com… (#3110)

* GEODE-6283: expose HttpService on InternalCache so that different component can add their own webapps independently.

Co-authored-by: Jens Deppe <jdeppe@pivotal.io>
GEODE-5971: refactor AlterRegionCommand to use RegionConfig object (#3054)

* GEODE-5971: refactor AlterRegionCommand to use RegionConfig object

Co-authored-by: Kenneth Howe <khowe@pivotal.io>
Co-authored-by: Aditya Anchuri <aanchuri@pivotal.io>
Co-authored-by: Peter Tran <ptran@pivotal.io>

* refactor AlterRegionCommand to use ResultModel and RegionConfig
* only alter region in the same group as the region is created on
* when cluster configuration is enabled, if region does not exist in CC, the command would error out.
* The command would no longer alter region not created by gfsh command
* add more unit tests
GEODE-6221: Cleanup some Protobuf tests (#3039)

GEODE-6221: Cleanup some Protobuf tests

* clarify the doc comments for DistributedRestoreSystemProperties.
* Remove usage of JUnit4CacheTestCase from geode-protobuf.
* Don't use DUnit embedded locator for testing against.

I'm not 100% this will fix all the flakiness, but it should be an
improvement.GEODE-6177: WAN Event processing continues after authentication fails

Due to different handling in the GatewaySenderEventRemoteDispatcher
dispatcher and ack reader threads, it was possible for event processing
to stop when a GemFireSecurityException was encountered by the ack
reader connection retry logic.

This commit attempts to share common recoverable cases between the ack
reader and dispatcher, while maintaining the cases which are specific to
each.  We also added a test which ensures that if a connection is denied
due to invalid credentials upon a restart of the receiver, that the
sender can recover if it again provides valid credentials.  In the process,
we removed a significant amount of duplicated and noisy code in the
NewWanAuthenticationDUnitTests.

Co-authored-by: Bill Burcham <bburcham@pivotal.io>
Co-authored-by: Ryan McMahon <rmcmahon@pivotal.io>
GEODE-6177: WAN Event processing continues after authentication fails

Due to different handling in the GatewaySenderEventRemoteDispatcher
dispatcher and ack reader threads, it was possible for event processing
to stop when a GemFireSecurityException was encountered by the ack
reader connection retry logic.

This commit attempts to share common recoverable cases between the ack
reader and dispatcher, while maintaining the cases which are specific to
each.  We also added a test which ensures that if a connection is denied
due to invalid credentials upon a restart of the receiver, that the
sender can recover if it again provides valid credentials.  In the process,
we removed a significant amount of duplicated and noisy code in the
NewWanAuthenticationDUnitTests.

Co-authored-by: Bill Burcham <bburcham@pivotal.io>
Co-authored-by: Ryan McMahon <rmcmahon@pivotal.io>
GEODE-5971: refactor expiration config objects (#2991)

* GEODE-5971: refactor expiration config objects

* maintain the xml structure
* ease of use when setting/getting expiration attributes
GEODE-5971: refactor expiration config objects (#2991)

* GEODE-5971: refactor expiration config objects

* maintain the xml structure
* ease of use when setting/getting expiration attributes
GEODE-5971: refactor expiration config objects (#2991)

* GEODE-5971: refactor expiration config objects

* maintain the xml structure
* ease of use when setting/getting expiration attributes
GEODE-5971: refactor expiration config objects (#2991)

* GEODE-5971: refactor expiration config objects

* maintain the xml structure
* ease of use when setting/getting expiration attributes
GEODE-5971: refactor expiration config objects (#2991)

* GEODE-5971: refactor expiration config objects

* maintain the xml structure
* ease of use when setting/getting expiration attributes
GEODE-5971: refactor expiration config objects (#2991)

* GEODE-5971: refactor expiration config objects

* maintain the xml structure
* ease of use when setting/getting expiration attributes
GEODE-5971: refactor expiration config objects (#2991)

* GEODE-5971: refactor expiration config objects

* maintain the xml structure
* ease of use when setting/getting expiration attributes
GEODE-5971: refactor expiration config objects (#2991)

* GEODE-5971: refactor expiration config objects

* maintain the xml structure
* ease of use when setting/getting expiration attributes
GEODE-5971: refactor expiration config objects (#2991)

* GEODE-5971: refactor expiration config objects

* maintain the xml structure
* ease of use when setting/getting expiration attributes
GEODE-5971: refactor expiration config objects (#2991)

* GEODE-5971: refactor expiration config objects

* maintain the xml structure
* ease of use when setting/getting expiration attributes
GEODE-5971: refactor expiration config objects (#2991)

* GEODE-5971: refactor expiration config objects

* maintain the xml structure
* ease of use when setting/getting expiration attributes
GEODE-5971: refactor expiration config objects (#2991)

* GEODE-5971: refactor expiration config objects

* maintain the xml structure
* ease of use when setting/getting expiration attributes
GEODE-5971: refactor expiration config objects (#2991)

* GEODE-5971: refactor expiration config objects

* maintain the xml structure
* ease of use when setting/getting expiration attributes
GEODE-5971: refactor expiration config objects (#2991)

* GEODE-5971: refactor expiration config objects

* maintain the xml structure
* ease of use when setting/getting expiration attributes
GEODE-5971: refactor expiration config objects (#2991)

* GEODE-5971: refactor expiration config objects

* maintain the xml structure
* ease of use when setting/getting expiration attributes
GEODE-5971: refactor expiration config objects (#2991)

* GEODE-5971: refactor expiration config objects

* maintain the xml structure
* ease of use when setting/getting expiration attributes
GEODE-5971: refactor expiration config objects (#2991)

* GEODE-5971: refactor expiration config objects

* maintain the xml structure
* ease of use when setting/getting expiration attributes
GEODE-5971: refactor expiration config objects (#2991)

* GEODE-5971: refactor expiration config objects

* maintain the xml structure
* ease of use when setting/getting expiration attributes
GEODE-5971: refactor expiration config objects (#2991)

* GEODE-5971: refactor expiration config objects

* maintain the xml structure
* ease of use when setting/getting expiration attributes
GEODE-5971: refactor expiration config objects (#2991)

* GEODE-5971: refactor expiration config objects

* maintain the xml structure
* ease of use when setting/getting expiration attributes
GEODE-5971: refactor expiration config objects (#2991)

* GEODE-5971: refactor expiration config objects

* maintain the xml structure
* ease of use when setting/getting expiration attributes
GEODE-5971: refactor expiration config objects (#2991)

* GEODE-5971: refactor expiration config objects

* maintain the xml structure
* ease of use when setting/getting expiration attributes
GEODE-5971: refactor expiration config objects (#2991)

* GEODE-5971: refactor expiration config objects

* maintain the xml structure
* ease of use when setting/getting expiration attributes
GEODE-5971: refactor expiration config objects (#2991)

* GEODE-5971: refactor expiration config objects

* maintain the xml structure
* ease of use when setting/getting expiration attributes
GEODE-5971: refactor expiration config objects (#2991)

* GEODE-5971: refactor expiration config objects

* maintain the xml structure
* ease of use when setting/getting expiration attributes
GEODE-5971: refactor expiration config objects (#2991)

* GEODE-5971: refactor expiration config objects

* maintain the xml structure
* ease of use when setting/getting expiration attributes
GEODE-5971: refactor expiration config objects (#2991)

* GEODE-5971: refactor expiration config objects

* maintain the xml structure
* ease of use when setting/getting expiration attributes
GEODE-5971: refactor expiration config objects (#2991)

* GEODE-5971: refactor expiration config objects

* maintain the xml structure
* ease of use when setting/getting expiration attributes
GEODE-5971: refactor expiration config objects (#2991)

* GEODE-5971: refactor expiration config objects

* maintain the xml structure
* ease of use when setting/getting expiration attributes
GEODE-5971: refactor expiration config objects (#2991)

* GEODE-5971: refactor expiration config objects

* maintain the xml structure
* ease of use when setting/getting expiration attributes
GEODE-5971: refactor expiration config objects (#2991)

* GEODE-5971: refactor expiration config objects

* maintain the xml structure
* ease of use when setting/getting expiration attributes
GEODE-5971: refactor expiration config objects (#2991)

* GEODE-5971: refactor expiration config objects

* maintain the xml structure
* ease of use when setting/getting expiration attributes
GEODE-5971: refactor expiration config objects (#2991)

* GEODE-5971: refactor expiration config objects

* maintain the xml structure
* ease of use when setting/getting expiration attributes
GEODE-5971: refactor expiration config objects (#2991)

* GEODE-5971: refactor expiration config objects

* maintain the xml structure
* ease of use when setting/getting expiration attributes
GEODE-5971: refactor expiration config objects (#2991)

* GEODE-5971: refactor expiration config objects

* maintain the xml structure
* ease of use when setting/getting expiration attributes
GEODE-5971: refactor expiration config objects (#2991)

* GEODE-5971: refactor expiration config objects

* maintain the xml structure
* ease of use when setting/getting expiration attributes
GEODE-5971: refactor expiration config objects (#2991)

* GEODE-5971: refactor expiration config objects

* maintain the xml structure
* ease of use when setting/getting expiration attributes
Geode-5793: LocatorDUnitTest. testNonSSLLocatorDiesWhenConnectingToSSLLocator (#2654)

* Refactoring
* Rethrow `LocatorCancelException` during `startLocator` rather than swallowing.
* address some timing issuesGeode-5793: LocatorDUnitTest. testNonSSLLocatorDiesWhenConnectingToSSLLocator (#2654)

* Refactoring
* Rethrow `LocatorCancelException` during `startLocator` rather than swallowing.
* address some timing issuesGeode-5793: LocatorDUnitTest. testNonSSLLocatorDiesWhenConnectingToSSLLocator (#2654)

* Refactoring
* Rethrow `LocatorCancelException` during `startLocator` rather than swallowing.
* address some timing issuesGeode-5793: LocatorDUnitTest. testNonSSLLocatorDiesWhenConnectingToSSLLocator (#2654)

* Refactoring
* Rethrow `LocatorCancelException` during `startLocator` rather than swallowing.
* address some timing issuesGeode-5793: LocatorDUnitTest. testNonSSLLocatorDiesWhenConnectingToSSLLocator (#2654)

* Refactoring
* Rethrow `LocatorCancelException` during `startLocator` rather than swallowing.
* address some timing issuesGeode-5793: LocatorDUnitTest. testNonSSLLocatorDiesWhenConnectingToSSLLocator (#2654)

* Refactoring
* Rethrow `LocatorCancelException` during `startLocator` rather than swallowing.
* address some timing issuesGeode-5793: LocatorDUnitTest. testNonSSLLocatorDiesWhenConnectingToSSLLocator (#2654)

* Refactoring
* Rethrow `LocatorCancelException` during `startLocator` rather than swallowing.
* address some timing issuesGeode-5793: LocatorDUnitTest. testNonSSLLocatorDiesWhenConnectingToSSLLocator (#2654)

* Refactoring
* Rethrow `LocatorCancelException` during `startLocator` rather than swallowing.
* address some timing issuesGeode-5793: LocatorDUnitTest. testNonSSLLocatorDiesWhenConnectingToSSLLocator (#2654)

* Refactoring
* Rethrow `LocatorCancelException` during `startLocator` rather than swallowing.
* address some timing issuesGeode-5793: LocatorDUnitTest. testNonSSLLocatorDiesWhenConnectingToSSLLocator (#2654)

* Refactoring
* Rethrow `LocatorCancelException` during `startLocator` rather than swallowing.
* address some timing issuesGeode-5793: LocatorDUnitTest. testNonSSLLocatorDiesWhenConnectingToSSLLocator (#2654)

* Refactoring
* Rethrow `LocatorCancelException` during `startLocator` rather than swallowing.
* address some timing issuesGeode-5793: LocatorDUnitTest. testNonSSLLocatorDiesWhenConnectingToSSLLocator (#2654)

* Refactoring
* Rethrow `LocatorCancelException` during `startLocator` rather than swallowing.
* address some timing issuesGeode-5793: LocatorDUnitTest. testNonSSLLocatorDiesWhenConnectingToSSLLocator (#2654)

* Refactoring
* Rethrow `LocatorCancelException` during `startLocator` rather than swallowing.
* address some timing issuesGeode-5793: LocatorDUnitTest. testNonSSLLocatorDiesWhenConnectingToSSLLocator (#2654)

* Refactoring
* Rethrow `LocatorCancelException` during `startLocator` rather than swallowing.
* address some timing issuesGeode-5793: LocatorDUnitTest. testNonSSLLocatorDiesWhenConnectingToSSLLocator (#2654)

* Refactoring
* Rethrow `LocatorCancelException` during `startLocator` rather than swallowing.
* address some timing issuesGeode-5793: LocatorDUnitTest. testNonSSLLocatorDiesWhenConnectingToSSLLocator (#2654)

* Refactoring
* Rethrow `LocatorCancelException` during `startLocator` rather than swallowing.
* address some timing issuesGeode-5793: LocatorDUnitTest. testNonSSLLocatorDiesWhenConnectingToSSLLocator (#2654)

* Refactoring
* Rethrow `LocatorCancelException` during `startLocator` rather than swallowing.
* address some timing issuesGeode-5793: LocatorDUnitTest. testNonSSLLocatorDiesWhenConnectingToSSLLocator (#2654)

* Refactoring
* Rethrow `LocatorCancelException` during `startLocator` rather than swallowing.
* address some timing issuesGeode-5793: LocatorDUnitTest. testNonSSLLocatorDiesWhenConnectingToSSLLocator (#2654)

* Refactoring
* Rethrow `LocatorCancelException` during `startLocator` rather than swallowing.
* address some timing issuesGeode-5793: LocatorDUnitTest. testNonSSLLocatorDiesWhenConnectingToSSLLocator (#2654)

* Refactoring
* Rethrow `LocatorCancelException` during `startLocator` rather than swallowing.
* address some timing issuesGeode-5793: LocatorDUnitTest. testNonSSLLocatorDiesWhenConnectingToSSLLocator (#2654)

* Refactoring
* Rethrow `LocatorCancelException` during `startLocator` rather than swallowing.
* address some timing issuesGeode-5793: LocatorDUnitTest. testNonSSLLocatorDiesWhenConnectingToSSLLocator (#2654)

* Refactoring
* Rethrow `LocatorCancelException` during `startLocator` rather than swallowing.
* address some timing issuesGeode-5793: LocatorDUnitTest. testNonSSLLocatorDiesWhenConnectingToSSLLocator (#2654)

* Refactoring
* Rethrow `LocatorCancelException` during `startLocator` rather than swallowing.
* address some timing issuesGeode-5793: LocatorDUnitTest. testNonSSLLocatorDiesWhenConnectingToSSLLocator (#2654)

* Refactoring
* Rethrow `LocatorCancelException` during `startLocator` rather than swallowing.
* address some timing issuesGeode-5793: LocatorDUnitTest. testNonSSLLocatorDiesWhenConnectingToSSLLocator (#2654)

* Refactoring
* Rethrow `LocatorCancelException` during `startLocator` rather than swallowing.
* address some timing issuesGeode-5793: LocatorDUnitTest. testNonSSLLocatorDiesWhenConnectingToSSLLocator (#2654)

* Refactoring
* Rethrow `LocatorCancelException` during `startLocator` rather than swallowing.
* address some timing issuesGeode-5793: LocatorDUnitTest. testNonSSLLocatorDiesWhenConnectingToSSLLocator (#2654)

* Refactoring
* Rethrow `LocatorCancelException` during `startLocator` rather than swallowing.
* address some timing issuesGeode-5793: LocatorDUnitTest. testNonSSLLocatorDiesWhenConnectingToSSLLocator (#2654)

* Refactoring
* Rethrow `LocatorCancelException` during `startLocator` rather than swallowing.
* address some timing issuesGeode-5793: LocatorDUnitTest. testNonSSLLocatorDiesWhenConnectingToSSLLocator (#2654)

* Refactoring
* Rethrow `LocatorCancelException` during `startLocator` rather than swallowing.
* address some timing issuesGeode-5793: LocatorDUnitTest. testNonSSLLocatorDiesWhenConnectingToSSLLocator (#2654)

* Refactoring
* Rethrow `LocatorCancelException` during `startLocator` rather than swallowing.
* address some timing issuesGeode-5793: LocatorDUnitTest. testNonSSLLocatorDiesWhenConnectingToSSLLocator (#2654)

* Refactoring
* Rethrow `LocatorCancelException` during `startLocator` rather than swallowing.
* address some timing issuesGeode-5793: LocatorDUnitTest. testNonSSLLocatorDiesWhenConnectingToSSLLocator (#2654)

* Refactoring
* Rethrow `LocatorCancelException` during `startLocator` rather than swallowing.
* address some timing issuesGeode-5793: LocatorDUnitTest. testNonSSLLocatorDiesWhenConnectingToSSLLocator (#2654)

* Refactoring
* Rethrow `LocatorCancelException` during `startLocator` rather than swallowing.
* address some timing issuesGeode-5793: LocatorDUnitTest. testNonSSLLocatorDiesWhenConnectingToSSLLocator (#2654)

* Refactoring
* Rethrow `LocatorCancelException` during `startLocator` rather than swallowing.
* address some timing issuesGeode-5793: LocatorDUnitTest. testNonSSLLocatorDiesWhenConnectingToSSLLocator (#2654)

* Refactoring
* Rethrow `LocatorCancelException` during `startLocator` rather than swallowing.
* address some timing issuesGeode-5793: LocatorDUnitTest. testNonSSLLocatorDiesWhenConnectingToSSLLocator (#2654)

* Refactoring
* Rethrow `LocatorCancelException` during `startLocator` rather than swallowing.
* address some timing issuesGeode-5793: LocatorDUnitTest. testNonSSLLocatorDiesWhenConnectingToSSLLocator (#2654)

* Refactoring
* Rethrow `LocatorCancelException` during `startLocator` rather than swallowing.
* address some timing issuesGeode-5793: LocatorDUnitTest. testNonSSLLocatorDiesWhenConnectingToSSLLocator (#2654)

* Refactoring
* Rethrow `LocatorCancelException` during `startLocator` rather than swallowing.
* address some timing issuesGeode-5793: LocatorDUnitTest. testNonSSLLocatorDiesWhenConnectingToSSLLocator (#2654)

* Refactoring
* Rethrow `LocatorCancelException` during `startLocator` rather than swallowing.
* address some timing issuesGeode-5793: LocatorDUnitTest. testNonSSLLocatorDiesWhenConnectingToSSLLocator (#2654)

* Refactoring
* Rethrow `LocatorCancelException` during `startLocator` rather than swallowing.
* address some timing issuesGeode-5793: LocatorDUnitTest. testNonSSLLocatorDiesWhenConnectingToSSLLocator (#2654)

* Refactoring
* Rethrow `LocatorCancelException` during `startLocator` rather than swallowing.
* address some timing issuesGeode-5793: LocatorDUnitTest. testNonSSLLocatorDiesWhenConnectingToSSLLocator (#2654)

* Refactoring
* Rethrow `LocatorCancelException` during `startLocator` rather than swallowing.
* address some timing issuesGeode-5793: LocatorDUnitTest. testNonSSLLocatorDiesWhenConnectingToSSLLocator (#2654)

* Refactoring
* Rethrow `LocatorCancelException` during `startLocator` rather than swallowing.
* address some timing issuesGeode-5793: LocatorDUnitTest. testNonSSLLocatorDiesWhenConnectingToSSLLocator (#2654)

* Refactoring
* Rethrow `LocatorCancelException` during `startLocator` rather than swallowing.
* address some timing issuesGeode-5793: LocatorDUnitTest. testNonSSLLocatorDiesWhenConnectingToSSLLocator (#2654)

* Refactoring
* Rethrow `LocatorCancelException` during `startLocator` rather than swallowing.
* address some timing issuesGeode-5793: LocatorDUnitTest. testNonSSLLocatorDiesWhenConnectingToSSLLocator (#2654)

* Refactoring
* Rethrow `LocatorCancelException` during `startLocator` rather than swallowing.
* address some timing issuesGeode-5793: LocatorDUnitTest. testNonSSLLocatorDiesWhenConnectingToSSLLocator (#2654)

* Refactoring
* Rethrow `LocatorCancelException` during `startLocator` rather than swallowing.
* address some timing issuesGeode-5793: LocatorDUnitTest. testNonSSLLocatorDiesWhenConnectingToSSLLocator (#2654)

* Refactoring
* Rethrow `LocatorCancelException` during `startLocator` rather than swallowing.
* address some timing issuesGeode-5793: LocatorDUnitTest. testNonSSLLocatorDiesWhenConnectingToSSLLocator (#2654)

* Refactoring
* Rethrow `LocatorCancelException` during `startLocator` rather than swallowing.
* address some timing issuesGEODE-5971: RegionConfig can only have one RegionAttributesType

Signed-off-by: Jinmei Liao <jiliao@pivotal.io>
GEODE-5971: RegionConfig can only have one RegionAttributesType

Signed-off-by: Jinmei Liao <jiliao@pivotal.io>
GEODE-5971: RegionConfig can only have one RegionAttributesType

Signed-off-by: Jinmei Liao <jiliao@pivotal.io>
GEODE-5971: RegionConfig can only have one RegionAttributesType

Signed-off-by: Jinmei Liao <jiliao@pivotal.io>
GEODE-5971: RegionConfig can only have one RegionAttributesType

Signed-off-by: Jinmei Liao <jiliao@pivotal.io>
GEODE-5971: RegionConfig can only have one RegionAttributesType

Signed-off-by: Jinmei Liao <jiliao@pivotal.io>
GEODE-5971: RegionConfig can only have one RegionAttributesType

Signed-off-by: Jinmei Liao <jiliao@pivotal.io>
GEODE-5971: RegionConfig can only have one RegionAttributesType

Signed-off-by: Jinmei Liao <jiliao@pivotal.io>
GEODE-5971: RegionConfig can only have one RegionAttributesType

Signed-off-by: Jinmei Liao <jiliao@pivotal.io>
GEODE-5971: RegionConfig can only have one RegionAttributesType

Signed-off-by: Jinmei Liao <jiliao@pivotal.io>
GEODE-5971: RegionConfig can only have one RegionAttributesType

Signed-off-by: Jinmei Liao <jiliao@pivotal.io>
GEODE-5971: RegionConfig can only have one RegionAttributesType

Signed-off-by: Jinmei Liao <jiliao@pivotal.io>
GEODE-5971: RegionConfig can only have one RegionAttributesType

Signed-off-by: Jinmei Liao <jiliao@pivotal.io>
GEODE-5971: RegionConfig can only have one RegionAttributesType

Signed-off-by: Jinmei Liao <jiliao@pivotal.io>
GEODE-5971: RegionConfig can only have one RegionAttributesType

Signed-off-by: Jinmei Liao <jiliao@pivotal.io>
GEODE-5971: RegionConfig can only have one RegionAttributesType

Signed-off-by: Jinmei Liao <jiliao@pivotal.io>
GEODE-5971: RegionConfig can only have one RegionAttributesType

Signed-off-by: Jinmei Liao <jiliao@pivotal.io>
GEODE-5971: RegionConfig can only have one RegionAttributesType

Signed-off-by: Jinmei Liao <jiliao@pivotal.io>
GEODE-5971: RegionConfig can only have one RegionAttributesType

Signed-off-by: Jinmei Liao <jiliao@pivotal.io>
GEODE-5971: RegionConfig can only have one RegionAttributesType

Signed-off-by: Jinmei Liao <jiliao@pivotal.io>
GEODE-5971: RegionConfig can only have one RegionAttributesType

Signed-off-by: Jinmei Liao <jiliao@pivotal.io>
GEODE-5971: RegionConfig can only have one RegionAttributesType

Signed-off-by: Jinmei Liao <jiliao@pivotal.io>
GEODE-5971: RegionConfig can only have one RegionAttributesType

Signed-off-by: Jinmei Liao <jiliao@pivotal.io>
GEODE-5971: RegionConfig can only have one RegionAttributesType

Signed-off-by: Jinmei Liao <jiliao@pivotal.io>
GEODE-5971: RegionConfig can only have one RegionAttributesType

Signed-off-by: Jinmei Liao <jiliao@pivotal.io>
GEODE-5993: Eliminate race in monitorQueryThread() (#2818)

A race existed between setting low memory in the heap monitor thread,
and checking the low memory state in query monitoring thread.

The cancelation executor was shut down and no longer accepting new
tasks when this race occurred, causing a RejectedExecutionException.

This commit solves that problem by encapsulating the scheduling
behavior using the state design pattern.

Co-authored-by: Ryan McMahon <rmcmahon@pivotal.io>
Co-authored-by: Bill Burcham <bburcham@pivotal.io>
GEODE-5993: Eliminate race in monitorQueryThread() (#2818)

A race existed between setting low memory in the heap monitor thread,
and checking the low memory state in query monitoring thread.

The cancelation executor was shut down and no longer accepting new
tasks when this race occurred, causing a RejectedExecutionException.

This commit solves that problem by encapsulating the scheduling
behavior using the state design pattern.

Co-authored-by: Ryan McMahon <rmcmahon@pivotal.io>
Co-authored-by: Bill Burcham <bburcham@pivotal.io>
GEODE-5993: Eliminate race in monitorQueryThread() (#2818)

A race existed between setting low memory in the heap monitor thread,
and checking the low memory state in query monitoring thread.

The cancelation executor was shut down and no longer accepting new
tasks when this race occurred, causing a RejectedExecutionException.

This commit solves that problem by encapsulating the scheduling
behavior using the state design pattern.

Co-authored-by: Ryan McMahon <rmcmahon@pivotal.io>
Co-authored-by: Bill Burcham <bburcham@pivotal.io>
GEODE-5993: Eliminate race in monitorQueryThread() (#2818)

A race existed between setting low memory in the heap monitor thread,
and checking the low memory state in query monitoring thread.

The cancelation executor was shut down and no longer accepting new
tasks when this race occurred, causing a RejectedExecutionException.

This commit solves that problem by encapsulating the scheduling
behavior using the state design pattern.

Co-authored-by: Ryan McMahon <rmcmahon@pivotal.io>
Co-authored-by: Bill Burcham <bburcham@pivotal.io>
GEODE-5993: Eliminate race in monitorQueryThread() (#2818)

A race existed between setting low memory in the heap monitor thread,
and checking the low memory state in query monitoring thread.

The cancelation executor was shut down and no longer accepting new
tasks when this race occurred, causing a RejectedExecutionException.

This commit solves that problem by encapsulating the scheduling
behavior using the state design pattern.

Co-authored-by: Ryan McMahon <rmcmahon@pivotal.io>
Co-authored-by: Bill Burcham <bburcham@pivotal.io>
GEODE-5993: Eliminate race in monitorQueryThread() (#2818)

A race existed between setting low memory in the heap monitor thread,
and checking the low memory state in query monitoring thread.

The cancelation executor was shut down and no longer accepting new
tasks when this race occurred, causing a RejectedExecutionException.

This commit solves that problem by encapsulating the scheduling
behavior using the state design pattern.

Co-authored-by: Ryan McMahon <rmcmahon@pivotal.io>
Co-authored-by: Bill Burcham <bburcham@pivotal.io>
GEODE-5993: Eliminate race in monitorQueryThread() (#2818)

A race existed between setting low memory in the heap monitor thread,
and checking the low memory state in query monitoring thread.

The cancelation executor was shut down and no longer accepting new
tasks when this race occurred, causing a RejectedExecutionException.

This commit solves that problem by encapsulating the scheduling
behavior using the state design pattern.

Co-authored-by: Ryan McMahon <rmcmahon@pivotal.io>
Co-authored-by: Bill Burcham <bburcham@pivotal.io>
GEODE-5993: Eliminate race in monitorQueryThread() (#2818)

A race existed between setting low memory in the heap monitor thread,
and checking the low memory state in query monitoring thread.

The cancelation executor was shut down and no longer accepting new
tasks when this race occurred, causing a RejectedExecutionException.

This commit solves that problem by encapsulating the scheduling
behavior using the state design pattern.

Co-authored-by: Ryan McMahon <rmcmahon@pivotal.io>
Co-authored-by: Bill Burcham <bburcham@pivotal.io>
GEODE-5993: Eliminate race in monitorQueryThread() (#2818)

A race existed between setting low memory in the heap monitor thread,
and checking the low memory state in query monitoring thread.

The cancelation executor was shut down and no longer accepting new
tasks when this race occurred, causing a RejectedExecutionException.

This commit solves that problem by encapsulating the scheduling
behavior using the state design pattern.

Co-authored-by: Ryan McMahon <rmcmahon@pivotal.io>
Co-authored-by: Bill Burcham <bburcham@pivotal.io>
GEODE-5993: Eliminate race in monitorQueryThread() (#2818)

A race existed between setting low memory in the heap monitor thread,
and checking the low memory state in query monitoring thread.

The cancelation executor was shut down and no longer accepting new
tasks when this race occurred, causing a RejectedExecutionException.

This commit solves that problem by encapsulating the scheduling
behavior using the state design pattern.

Co-authored-by: Ryan McMahon <rmcmahon@pivotal.io>
Co-authored-by: Bill Burcham <bburcham@pivotal.io>
GEODE-5970: remove field-mapping from jdbc:mapping (#2766)

GEODE-5970: remove field-mapping from jdbc:mapping (#2766)

GEODE-5970: remove field-mapping from jdbc:mapping (#2766)

GEODE-5943: rework calculation for expected eviction to fix this test in jdk11 (#2754)

Co-authored-by: Patrick Rhomberg <prhomberg@pivotal.io>GEODE-5797: Move assertion to async invoke (#2635)

GEODE-5797: throw CacheClosed in ColocationHelper

The ColocationHelper runs in the background and wrote a suspect string
to the logs during this test when the cache was closed at the wrong
time, causing the test to fail.

The ColocationHelper would check a static variable to get colocated
regions, and if the cache was closed at the wrong point in this process,
the static region would have already been reset by closing the cache,
and the ColocationHelper would write a suspect string.

To fix this test, and the behavior of the ColocationHelper, we first
check if the cache is in the process of being cancelled. If it is, a
CacheClosedException is thrown instead of an IllegalStateException.
CacheClosedExceptions are ignored.

* add unit test for changes to ColocationHelper. Tests that a
CacheClosedException is thrown from getColocatedRegion when the cache is
closed.
* remove wait for regions to be ready as it was never the correct fix
for this bug.
* create the senders before the regions, since that is the correct order

Signed-off-by: Dan Smith <dsmith@pivotal.io>
GEODE-5797: Move assertion to async invoke (#2635)

GEODE-5797: throw CacheClosed in ColocationHelper

The ColocationHelper runs in the background and wrote a suspect string
to the logs during this test when the cache was closed at the wrong
time, causing the test to fail.

The ColocationHelper would check a static variable to get colocated
regions, and if the cache was closed at the wrong point in this process,
the static region would have already been reset by closing the cache,
and the ColocationHelper would write a suspect string.

To fix this test, and the behavior of the ColocationHelper, we first
check if the cache is in the process of being cancelled. If it is, a
CacheClosedException is thrown instead of an IllegalStateException.
CacheClosedExceptions are ignored.

* add unit test for changes to ColocationHelper. Tests that a
CacheClosedException is thrown from getColocatedRegion when the cache is
closed.
* remove wait for regions to be ready as it was never the correct fix
for this bug.
* create the senders before the regions, since that is the correct order

Signed-off-by: Dan Smith <dsmith@pivotal.io>
GEODE-5797: Move assertion to async invoke (#2635)

GEODE-5797: throw CacheClosed in ColocationHelper

The ColocationHelper runs in the background and wrote a suspect string
to the logs during this test when the cache was closed at the wrong
time, causing the test to fail.

The ColocationHelper would check a static variable to get colocated
regions, and if the cache was closed at the wrong point in this process,
the static region would have already been reset by closing the cache,
and the ColocationHelper would write a suspect string.

To fix this test, and the behavior of the ColocationHelper, we first
check if the cache is in the process of being cancelled. If it is, a
CacheClosedException is thrown instead of an IllegalStateException.
CacheClosedExceptions are ignored.

* add unit test for changes to ColocationHelper. Tests that a
CacheClosedException is thrown from getColocatedRegion when the cache is
closed.
* remove wait for regions to be ready as it was never the correct fix
for this bug.
* create the senders before the regions, since that is the correct order

Signed-off-by: Dan Smith <dsmith@pivotal.io>
GEODE-5797: Move assertion to async invoke (#2635)

GEODE-5797: throw CacheClosed in ColocationHelper

The ColocationHelper runs in the background and wrote a suspect string
to the logs during this test when the cache was closed at the wrong
time, causing the test to fail.

The ColocationHelper would check a static variable to get colocated
regions, and if the cache was closed at the wrong point in this process,
the static region would have already been reset by closing the cache,
and the ColocationHelper would write a suspect string.

To fix this test, and the behavior of the ColocationHelper, we first
check if the cache is in the process of being cancelled. If it is, a
CacheClosedException is thrown instead of an IllegalStateException.
CacheClosedExceptions are ignored.

* add unit test for changes to ColocationHelper. Tests that a
CacheClosedException is thrown from getColocatedRegion when the cache is
closed.
* remove wait for regions to be ready as it was never the correct fix
for this bug.
* create the senders before the regions, since that is the correct order

Signed-off-by: Dan Smith <dsmith@pivotal.io>
GEODE-5861: change jdbc connector to use jndi binding (#2650)

The jdbc connector now uses the existing "jndi-binding" xml/gfsh instead of adding "jdbc-connection" xml/gfsh. All the old "jdbc-connection" commands have been removed.

The create jndi-binding command has been changed in the following ways:
* the driver-class-name gfsh parameter is now optional.
* --url can be used as a replacement for --connnection-url
* the --type now defaults to SIMPLE (it used to not have a default).
* the --type=POOLED now defaults to creating a Hikari pool and an SPI exists to customize the class 
that implements the pool.

New External APIS:
  DataSourceFactoryTest: this is the SPI users can implement for the POOLED type.

Co-authored-by: @BenjaminPerryRoss GEODE-5424: Changing all awaitility calls to use consistent timings

We have a lot of Awaitility calls in our tests. Each test was picking
its own timeout. That lead to some tests picking too small of a timeout
and failing spuriously.

With this change, all tests will use a new factory,
GeodeAwaility.await(), rather than Awaitility.await(). This new factory
sets a default timeout of 5 minutes. It also sets a sensible pollDelay
and pollInterval.

The custom timeouts used in all tests have been removed, in favor of
this new factory, except for a couple of tests that had waits greater
than 5 minutes.
GEODE-5424: Changing all awaitility calls to use consistent timings

We have a lot of Awaitility calls in our tests. Each test was picking
its own timeout. That lead to some tests picking too small of a timeout
and failing spuriously.

With this change, all tests will use a new factory,
GeodeAwaility.await(), rather than Awaitility.await(). This new factory
sets a default timeout of 5 minutes. It also sets a sensible pollDelay
and pollInterval.

The custom timeouts used in all tests have been removed, in favor of
this new factory, except for a couple of tests that had waits greater
than 5 minutes.
GEODE-5424: Changing all awaitility calls to use consistent timings

We have a lot of Awaitility calls in our tests. Each test was picking
its own timeout. That lead to some tests picking too small of a timeout
and failing spuriously.

With this change, all tests will use a new factory,
GeodeAwaility.await(), rather than Awaitility.await(). This new factory
sets a default timeout of 5 minutes. It also sets a sensible pollDelay
and pollInterval.

The custom timeouts used in all tests have been removed, in favor of
this new factory, except for a couple of tests that had waits greater
than 5 minutes.
GEODE-5686: Remove LocalizedStrings

This removes the LocalizedStrings class and most uses of LogWriterI18n.
The I18n interfaces are still in place and still work since they're only
deprecated but there are no longer any uses of the StringID logging methods.

Going forward everyone should use the Log4j logging facility.  If you
must use the deprecated LogWriter use that version and not
LogWriterI18n.
GEODE-5686: Remove LocalizedStrings

This removes the LocalizedStrings class and most uses of LogWriterI18n.
The I18n interfaces are still in place and still work since they're only
deprecated but there are no longer any uses of the StringID logging methods.

Going forward everyone should use the Log4j logging facility.  If you
must use the deprecated LogWriter use that version and not
LogWriterI18n.
GEODE-5686: Remove LocalizedStrings

This removes the LocalizedStrings class and most uses of LogWriterI18n.
The I18n interfaces are still in place and still work since they're only
deprecated but there are no longer any uses of the StringID logging methods.

Going forward everyone should use the Log4j logging facility.  If you
must use the deprecated LogWriter use that version and not
LogWriterI18n.
GEODE-5686: Remove LocalizedStrings

This removes the LocalizedStrings class and most uses of LogWriterI18n.
The I18n interfaces are still in place and still work since they're only
deprecated but there are no longer any uses of the StringID logging methods.

Going forward everyone should use the Log4j logging facility.  If you
must use the deprecated LogWriter use that version and not
LogWriterI18n.
GEODE-5780: remove LoggingThreadGroup

GEODE-5783: have a single source for ThreadFactory

LoggingThreadGroup is no longer used and has been removed.

LoggingUnhandledExceptionHandler creates a single handler that logs
to a static logger. All geode threads should use this singleton.

LoggingThread should be used when creating a Thread.
It will automatically set a LoggingUnhandledExceptionHandler on the thread.

LoggingThreadFactory makes it easy to create a ThreadFactory instance that
uses LoggingThread and gives each thread a unique name.

LoggingExecutors should be used in place of Executors.
Each executor it creates will have a LoggingThreadFactory.

All the places geode used Thread, ThreadGroup, ThreadFactory, and Executors have
been changed to use these classes. The only exception is some of the add on modules
(like redis, and memcached) were not changed so that they would not use new internal
geode APIs.
This checkin uses these new classes in every place the previously used
LoggingThreadGroup. The code should also be reviewed for other places
we create Thread or ThreadFactory instances without using the LoggingThreadGroup.
GEODE-369: wait for primary to be available when going from 0 to 1 server (#2482)

* wait for primary to be available when going from 0 to 1 server
* added argument checking
* connectedServers (count) must be > 0 in order to test it via API
* Turns out the get is safer than getentry

Co-Authored-By: Bill Burcham <bburcham@pivotal.io>
GEODE-369: wait for primary to be available when going from 0 to 1 server (#2482)

* wait for primary to be available when going from 0 to 1 server
* added argument checking
* connectedServers (count) must be > 0 in order to test it via API
* Turns out the get is safer than getentry

Co-Authored-By: Bill Burcham <bburcham@pivotal.io>
GEODE-369: wait for primary to be available when going from 0 to 1 server (#2482)

* wait for primary to be available when going from 0 to 1 server
* added argument checking
* connectedServers (count) must be > 0 in order to test it via API
* Turns out the get is safer than getentry

Co-Authored-By: Bill Burcham <bburcham@pivotal.io>
GEODE-369: wait for primary to be available when going from 0 to 1 server (#2482)

* wait for primary to be available when going from 0 to 1 server
* added argument checking
* connectedServers (count) must be > 0 in order to test it via API
* Turns out the get is safer than getentry

Co-Authored-By: Bill Burcham <bburcham@pivotal.io>
GEODE-369: wait for primary to be available when going from 0 to 1 server (#2482)

* wait for primary to be available when going from 0 to 1 server
* added argument checking
* connectedServers (count) must be > 0 in order to test it via API
* Turns out the get is safer than getentry

Co-Authored-By: Bill Burcham <bburcham@pivotal.io>
GEODE-369: wait for primary to be available when going from 0 to 1 server (#2482)

* wait for primary to be available when going from 0 to 1 server
* added argument checking
* connectedServers (count) must be > 0 in order to test it via API
* Turns out the get is safer than getentry

Co-Authored-By: Bill Burcham <bburcham@pivotal.io>
GEODE-369: wait for primary to be available when going from 0 to 1 server (#2482)

* wait for primary to be available when going from 0 to 1 server
* added argument checking
* connectedServers (count) must be > 0 in order to test it via API
* Turns out the get is safer than getentry

Co-Authored-By: Bill Burcham <bburcham@pivotal.io>
GEODE-369: wait for primary to be available when going from 0 to 1 server (#2482)

* wait for primary to be available when going from 0 to 1 server
* added argument checking
* connectedServers (count) must be > 0 in order to test it via API
* Turns out the get is safer than getentry

Co-Authored-By: Bill Burcham <bburcham@pivotal.io>
GEODE-369: wait for primary to be available when going from 0 to 1 server (#2482)

* wait for primary to be available when going from 0 to 1 server
* added argument checking
* connectedServers (count) must be > 0 in order to test it via API
* Turns out the get is safer than getentry

Co-Authored-By: Bill Burcham <bburcham@pivotal.io>
GEODE-5428: Refactored DurableClientTests due to massive duplication

The DurableClientSimpleDUnitTest class was huge and doing three different
types of testing, so the code was partitioned into classes representing
the types.

Further, there were some bugs that needed to be addressed in the code.

Co-Authored-By: Galen O'Sullivan <gosullivan@pivotal.io>GEODE-5428: Refactored DurableClientTests due to massive duplication

The DurableClientSimpleDUnitTest class was huge and doing three different
types of testing, so the code was partitioned into classes representing
the types.

Further, there were some bugs that needed to be addressed in the code.

Co-Authored-By: Galen O'Sullivan <gosullivan@pivotal.io>GEODE-5428: Refactored DurableClientTests due to massive duplication

The DurableClientSimpleDUnitTest class was huge and doing three different
types of testing, so the code was partitioned into classes representing
the types.

Further, there were some bugs that needed to be addressed in the code.

Co-Authored-By: Galen O'Sullivan <gosullivan@pivotal.io>GEODE-5428: Refactored DurableClientTests due to massive duplication

The DurableClientSimpleDUnitTest class was huge and doing three different
types of testing, so the code was partitioned into classes representing
the types.

Further, there were some bugs that needed to be addressed in the code.

Co-Authored-By: Galen O'Sullivan <gosullivan@pivotal.io>GEODE-5428: Refactored DurableClientTests due to massive duplication

The DurableClientSimpleDUnitTest class was huge and doing three different
types of testing, so the code was partitioned into classes representing
the types.

Further, there were some bugs that needed to be addressed in the code.

Co-Authored-By: Galen O'Sullivan <gosullivan@pivotal.io>GEODE-5712: move awaitility into invoked runnable (#2455)

Assertion errors within invoked runnables get wrapped in an
RMIException, so untilAsserted does not recognize them as failed
assertions. Since they are treated as unexpected errors, awaitility
does not loop.  Moving the awaitility inside the invocation gives us the
expected behavior.

Signed-off-by: Dale Emery<demery@pivotal.io>GEODE-5712: Increase Awaitility timeout (#2447)

* GEODE-5712: increase awaitility timeout

The awaitility timed out after only 1 second, so there was no time to
evaluate the assertion. Awaitility throws a timeout exception once the
duration given in atMost() is reached.

Signed-off-by: Dale Emery<demery@pivotal.io>GEODE-5574: unit test coverage for RegionMapDestroy (#2431)

GEODE-5574: improve unit test coverage of RegionMapDestroy

This is a major rewrite of RegionMapDestroyTest. The test was changed enough that I doubt the diffs will be helpful. I changed it to use mocks except for the class under test.
Each test method now has the pattern "given, do, verify".

This unit test now covers 90% of the class (used to be 60%) and the uncovered code is debug logging and what I think is dead code.

I made one small change to the product to use "putEntryIfAbsent" instead of "getEntryMap().putIfAbsent".
GEODE-5574: unit test coverage for RegionMapDestroy (#2431)

GEODE-5574: improve unit test coverage of RegionMapDestroy

This is a major rewrite of RegionMapDestroyTest. The test was changed enough that I doubt the diffs will be helpful. I changed it to use mocks except for the class under test.
Each test method now has the pattern "given, do, verify".

This unit test now covers 90% of the class (used to be 60%) and the uncovered code is debug logging and what I think is dead code.

I made one small change to the product to use "putEntryIfAbsent" instead of "getEntryMap().putIfAbsent".
GEODE-5574: unit test coverage for RegionMapDestroy (#2431)

GEODE-5574: improve unit test coverage of RegionMapDestroy

This is a major rewrite of RegionMapDestroyTest. The test was changed enough that I doubt the diffs will be helpful. I changed it to use mocks except for the class under test.
Each test method now has the pattern "given, do, verify".

This unit test now covers 90% of the class (used to be 60%) and the uncovered code is debug logging and what I think is dead code.

I made one small change to the product to use "putEntryIfAbsent" instead of "getEntryMap().putIfAbsent".
GEODE-5574: unit test coverage for RegionMapDestroy (#2431)

GEODE-5574: improve unit test coverage of RegionMapDestroy

This is a major rewrite of RegionMapDestroyTest. The test was changed enough that I doubt the diffs will be helpful. I changed it to use mocks except for the class under test.
Each test method now has the pattern "given, do, verify".

This unit test now covers 90% of the class (used to be 60%) and the uncovered code is debug logging and what I think is dead code.

I made one small change to the product to use "putEntryIfAbsent" instead of "getEntryMap().putIfAbsent".
GEODE-5607: Replace Jmock with Mockito (#2414)

* GEODE-5607: Replace Jmock with Mockito

- Removed dependency to `org.jmock`.
- Migrated several test classes to use `Mockito` instead `Jmock`.
- Changed same classes to use `assertj` instead of `junit.Assert`.
- Changed same classes to use `Awaitility` instead of `WaitCriterion`.

* Minor fixes in test asserts

Several test methods had the wrong order in the `assertThat` calls.
Asserts were written as `assertThat(<exepcted>).is*(<actual>)`, now
they have been corrected to `assertThat(<actual>).is*(<expected>)`.

* Minor fixes in test classes
GEODE-5607: Replace Jmock with Mockito (#2414)

* GEODE-5607: Replace Jmock with Mockito

- Removed dependency to `org.jmock`.
- Migrated several test classes to use `Mockito` instead `Jmock`.
- Changed same classes to use `assertj` instead of `junit.Assert`.
- Changed same classes to use `Awaitility` instead of `WaitCriterion`.

* Minor fixes in test asserts

Several test methods had the wrong order in the `assertThat` calls.
Asserts were written as `assertThat(<exepcted>).is*(<actual>)`, now
they have been corrected to `assertThat(<actual>).is*(<expected>)`.

* Minor fixes in test classes
GEODE-5607: Replace Jmock with Mockito (#2414)

* GEODE-5607: Replace Jmock with Mockito

- Removed dependency to `org.jmock`.
- Migrated several test classes to use `Mockito` instead `Jmock`.
- Changed same classes to use `assertj` instead of `junit.Assert`.
- Changed same classes to use `Awaitility` instead of `WaitCriterion`.

* Minor fixes in test asserts

Several test methods had the wrong order in the `assertThat` calls.
Asserts were written as `assertThat(<exepcted>).is*(<actual>)`, now
they have been corrected to `assertThat(<actual>).is*(<expected>)`.

* Minor fixes in test classes
GEODE-5684: refactor callAndValidate

* rename flag from outcomeSet to expectedResultIsSet
* refactor callAndValidate to use try/catch blocks for checking expected
results and exceptions and throwing up assertion errors to the error
collector, for the purpose of readability and reducing repetition.
GEODE-5684: refactor callAndValidate

* rename flag from outcomeSet to expectedResultIsSet
* refactor callAndValidate to use try/catch blocks for checking expected
results and exceptions and throwing up assertion errors to the error
collector, for the purpose of readability and reducing repetition.
GEODE-3200 Remove unused authzrequest (#2311)

GEODE-3451: Adding awaitility and cleaning up warnings in MultiVMRegionTestCase

* added awaitility to testConcurrentEventsOnEmptyRegion to handle the case where no-ack region upgrades are not completely propagated.
* Cleaned up warnings

Co-Authored-By: Dale Emery <demery@pivotal.io>
Co-Authored-By: Mark Hanson <mhanson@pivotal.io>

GEODE-3451: Adding awaitility and cleaning up warnings in MultiVMRegionTestCase

* added awaitility to testConcurrentEventsOnEmptyRegion to handle the case where no-ack region upgrades are not completely propagated.
* Cleaned up warnings

Co-Authored-By: Dale Emery <demery@pivotal.io>
Co-Authored-By: Mark Hanson <mhanson@pivotal.io>

GEODE-3451: Adding awaitility and cleaning up warnings in MultiVMRegionTestCase

* added awaitility to testConcurrentEventsOnEmptyRegion to handle the case where no-ack region upgrades are not completely propagated.
* Cleaned up warnings

Co-Authored-By: Dale Emery <demery@pivotal.io>
Co-Authored-By: Mark Hanson <mhanson@pivotal.io>

GEODE-3451: Adding awaitility and cleaning up warnings in MultiVMRegionTestCase

* added awaitility to testConcurrentEventsOnEmptyRegion to handle the case where no-ack region upgrades are not completely propagated.
* Cleaned up warnings

Co-Authored-By: Dale Emery <demery@pivotal.io>
Co-Authored-By: Mark Hanson <mhanson@pivotal.io>

GEODE-3451: Adding awaitility and cleaning up warnings in MultiVMRegionTestCase

* added awaitility to testConcurrentEventsOnEmptyRegion to handle the case where no-ack region upgrades are not completely propagated.
* Cleaned up warnings

Co-Authored-By: Dale Emery <demery@pivotal.io>
Co-Authored-By: Mark Hanson <mhanson@pivotal.io>

GEODE-3451: Adding awaitility and cleaning up warnings in MultiVMRegionTestCase

* added awaitility to testConcurrentEventsOnEmptyRegion to handle the case where no-ack region upgrades are not completely propagated.
* Cleaned up warnings

Co-Authored-By: Dale Emery <demery@pivotal.io>
Co-Authored-By: Mark Hanson <mhanson@pivotal.io>

GEODE-3451: Adding awaitility and cleaning up warnings in MultiVMRegionTestCase

* added awaitility to testConcurrentEventsOnEmptyRegion to handle the case where no-ack region upgrades are not completely propagated.
* Cleaned up warnings

Co-Authored-By: Dale Emery <demery@pivotal.io>
Co-Authored-By: Mark Hanson <mhanson@pivotal.io>

GEODE-3451: Adding awaitility and cleaning up warnings in MultiVMRegionTestCase

* added awaitility to testConcurrentEventsOnEmptyRegion to handle the case where no-ack region upgrades are not completely propagated.
* Cleaned up warnings

Co-Authored-By: Dale Emery <demery@pivotal.io>
Co-Authored-By: Mark Hanson <mhanson@pivotal.io>

GEODE-3451: Adding awaitility and cleaning up warnings in MultiVMRegionTestCase

* added awaitility to testConcurrentEventsOnEmptyRegion to handle the case where no-ack region upgrades are not completely propagated.
* Cleaned up warnings

Co-Authored-By: Dale Emery <demery@pivotal.io>
Co-Authored-By: Mark Hanson <mhanson@pivotal.io>

GEODE-3451: Adding awaitility and cleaning up warnings in MultiVMRegionTestCase

* added awaitility to testConcurrentEventsOnEmptyRegion to handle the case where no-ack region upgrades are not completely propagated.
* Cleaned up warnings

Co-Authored-By: Dale Emery <demery@pivotal.io>
Co-Authored-By: Mark Hanson <mhanson@pivotal.io>

GEODE-3451: Adding awaitility and cleaning up warnings in MultiVMRegionTestCase

* added awaitility to testConcurrentEventsOnEmptyRegion to handle the case where no-ack region upgrades are not completely propagated.
* Cleaned up warnings

Co-Authored-By: Dale Emery <demery@pivotal.io>
Co-Authored-By: Mark Hanson <mhanson@pivotal.io>

GEODE-3451: Adding awaitility and cleaning up warnings in MultiVMRegionTestCase

* added awaitility to testConcurrentEventsOnEmptyRegion to handle the case where no-ack region upgrades are not completely propagated.
* Cleaned up warnings

Co-Authored-By: Dale Emery <demery@pivotal.io>
Co-Authored-By: Mark Hanson <mhanson@pivotal.io>

GEODE-3451: Adding awaitility and cleaning up warnings in MultiVMRegionTestCase

* added awaitility to testConcurrentEventsOnEmptyRegion to handle the case where no-ack region upgrades are not completely propagated.
* Cleaned up warnings

Co-Authored-By: Dale Emery <demery@pivotal.io>
Co-Authored-By: Mark Hanson <mhanson@pivotal.io>

GEODE-3451: Adding awaitility and cleaning up warnings in MultiVMRegionTestCase

* added awaitility to testConcurrentEventsOnEmptyRegion to handle the case where no-ack region upgrades are not completely propagated.
* Cleaned up warnings

Co-Authored-By: Dale Emery <demery@pivotal.io>
Co-Authored-By: Mark Hanson <mhanson@pivotal.io>

GEODE-5639: use AssertJ instead of CatchException

* Move PdxAttributesJUnitTest to distributedTest
GEODE-5639: use AssertJ instead of CatchException

* Move PdxAttributesJUnitTest to distributedTest
GEODE-5639: use AssertJ instead of CatchException

* Move PdxAttributesJUnitTest to distributedTest
GEODE-5639: use AssertJ instead of CatchException

* Move PdxAttributesJUnitTest to distributedTest
GEODE-5547: cleanup RegionManagementDUnitTest

Convert test to use DistributedTestRule and lay the groundwork
to make it easier to eventually remove ManagementTestRule.
GEODE-5547: cleanup RegionManagementDUnitTest

Convert test to use DistributedTestRule and lay the groundwork
to make it easier to eventually remove ManagementTestRule.
GEODE-5547: cleanup RegionManagementDUnitTest

Convert test to use DistributedTestRule and lay the groundwork
to make it easier to eventually remove ManagementTestRule.
GEODE-5547: cleanup RegionManagementDUnitTest

Convert test to use DistributedTestRule and lay the groundwork
to make it easier to eventually remove ManagementTestRule.
GEODE-5547: cleanup RegionManagementDUnitTest

Convert test to use DistributedTestRule and lay the groundwork
to make it easier to eventually remove ManagementTestRule.
GEODE-838: remove port conflict by always creating the cache server connecting to dunit locator (#2275)

GEODE-4858: Update *DiskStore commands to use ResultModel and SingleGfshCommand (#1996)

GEODE-5157: use distributedMember as client ID

Changed the client to put stats information in the monitoring region
using the DistributedMember instead of the toString of
DistributedMember. On the server, if that fails, the toString of
DistributedMember is used, for backward compatibility.

This closes #2218
GEODE-5157: use distributedMember as client ID

Changed the client to put stats information in the monitoring region
using the DistributedMember instead of the toString of
DistributedMember. On the server, if that fails, the toString of
DistributedMember is used, for backward compatibility.

This closes #2218
GEODE-5428: Fix test and cleanup of warnings. (#2159)

* GEODE-5428: Fix test and cleanup of warnings.

Co-authored-by: Finn Southerland <fsoutherland@pivotal.io>

* GEODE-5428: Intellij Analyze != spotless

* GEODE-1703: fixed a few items that were commented on.
GEODE-5428: Fix test and cleanup of warnings. (#2159)

* GEODE-5428: Fix test and cleanup of warnings.

Co-authored-by: Finn Southerland <fsoutherland@pivotal.io>

* GEODE-5428: Intellij Analyze != spotless

* GEODE-1703: fixed a few items that were commented on.
GEODE-5428: Fix test and cleanup of warnings. (#2159)

* GEODE-5428: Fix test and cleanup of warnings.

Co-authored-by: Finn Southerland <fsoutherland@pivotal.io>

* GEODE-5428: Intellij Analyze != spotless

* GEODE-1703: fixed a few items that were commented on.
GEODE-5428: Fix test and cleanup of warnings. (#2159)

* GEODE-5428: Fix test and cleanup of warnings.

Co-authored-by: Finn Southerland <fsoutherland@pivotal.io>

* GEODE-5428: Intellij Analyze != spotless

* GEODE-1703: fixed a few items that were commented on.
GEODE-5428: Fix test and cleanup of warnings. (#2159)

* GEODE-5428: Fix test and cleanup of warnings.

Co-authored-by: Finn Southerland <fsoutherland@pivotal.io>

* GEODE-5428: Intellij Analyze != spotless

* GEODE-1703: fixed a few items that were commented on.
GEODE-5428: Fix test and cleanup of warnings. (#2159)

* GEODE-5428: Fix test and cleanup of warnings.

Co-authored-by: Finn Southerland <fsoutherland@pivotal.io>

* GEODE-5428: Intellij Analyze != spotless

* GEODE-1703: fixed a few items that were commented on.
GEODE-5428: Fix test and cleanup of warnings. (#2159)

* GEODE-5428: Fix test and cleanup of warnings.

Co-authored-by: Finn Southerland <fsoutherland@pivotal.io>

* GEODE-5428: Intellij Analyze != spotless

* GEODE-1703: fixed a few items that were commented on.
GEODE-5428: Fix test and cleanup of warnings. (#2159)

* GEODE-5428: Fix test and cleanup of warnings.

Co-authored-by: Finn Southerland <fsoutherland@pivotal.io>

* GEODE-5428: Intellij Analyze != spotless

* GEODE-1703: fixed a few items that were commented on.
GEODE-5428: Fix test and cleanup of warnings. (#2159)

* GEODE-5428: Fix test and cleanup of warnings.

Co-authored-by: Finn Southerland <fsoutherland@pivotal.io>

* GEODE-5428: Intellij Analyze != spotless

* GEODE-1703: fixed a few items that were commented on.
GEODE-5428: Fix test and cleanup of warnings. (#2159)

* GEODE-5428: Fix test and cleanup of warnings.

Co-authored-by: Finn Southerland <fsoutherland@pivotal.io>

* GEODE-5428: Intellij Analyze != spotless

* GEODE-1703: fixed a few items that were commented on.
GEODE-5428: Fix test and cleanup of warnings. (#2159)

* GEODE-5428: Fix test and cleanup of warnings.

Co-authored-by: Finn Southerland <fsoutherland@pivotal.io>

* GEODE-5428: Intellij Analyze != spotless

* GEODE-1703: fixed a few items that were commented on.
GEODE-5428: Fix test and cleanup of warnings. (#2159)

* GEODE-5428: Fix test and cleanup of warnings.

Co-authored-by: Finn Southerland <fsoutherland@pivotal.io>

* GEODE-5428: Intellij Analyze != spotless

* GEODE-1703: fixed a few items that were commented on.
GEODE-5428: Fix test and cleanup of warnings. (#2159)

* GEODE-5428: Fix test and cleanup of warnings.

Co-authored-by: Finn Southerland <fsoutherland@pivotal.io>

* GEODE-5428: Intellij Analyze != spotless

* GEODE-1703: fixed a few items that were commented on.
GEODE-5428: Fix test and cleanup of warnings. (#2159)

* GEODE-5428: Fix test and cleanup of warnings.

Co-authored-by: Finn Southerland <fsoutherland@pivotal.io>

* GEODE-5428: Intellij Analyze != spotless

* GEODE-1703: fixed a few items that were commented on.
GEODE-5428: Fix test and cleanup of warnings. (#2159)

* GEODE-5428: Fix test and cleanup of warnings.

Co-authored-by: Finn Southerland <fsoutherland@pivotal.io>

* GEODE-5428: Intellij Analyze != spotless

* GEODE-1703: fixed a few items that were commented on.
GEODE-5428: Fix test and cleanup of warnings. (#2159)

* GEODE-5428: Fix test and cleanup of warnings.

Co-authored-by: Finn Southerland <fsoutherland@pivotal.io>

* GEODE-5428: Intellij Analyze != spotless

* GEODE-1703: fixed a few items that were commented on.
GEODE-5428: Fix test and cleanup of warnings. (#2159)

* GEODE-5428: Fix test and cleanup of warnings.

Co-authored-by: Finn Southerland <fsoutherland@pivotal.io>

* GEODE-5428: Intellij Analyze != spotless

* GEODE-1703: fixed a few items that were commented on.
GEODE-5428: Fix test and cleanup of warnings. (#2159)

* GEODE-5428: Fix test and cleanup of warnings.

Co-authored-by: Finn Southerland <fsoutherland@pivotal.io>

* GEODE-5428: Intellij Analyze != spotless

* GEODE-1703: fixed a few items that were commented on.
GEODE-5428: Fix test and cleanup of warnings. (#2159)

* GEODE-5428: Fix test and cleanup of warnings.

Co-authored-by: Finn Southerland <fsoutherland@pivotal.io>

* GEODE-5428: Intellij Analyze != spotless

* GEODE-1703: fixed a few items that were commented on.
GEODE-5428: Fix test and cleanup of warnings. (#2159)

* GEODE-5428: Fix test and cleanup of warnings.

Co-authored-by: Finn Southerland <fsoutherland@pivotal.io>

* GEODE-5428: Intellij Analyze != spotless

* GEODE-1703: fixed a few items that were commented on.
GEODE_5402 Disk recovery hangs after killing members (#2148)

GEODE-5402 Fix issue where disk recovery hangs when all members are waiting for other members to proceed.
GEODE-5405: Streamline Backup distributed tests
GEODE-5405: Streamline Backup distributed tests
GEODE-5405: Streamline Backup distributed tests
GEODE-3530 Refactor RebalanceCommandDistributedTest (#2130)

* set up regions properly
* used parameterization for http/jmx connect
GEODE-4511: rework ClientAuthDUnitRule to illustrate when authenticat… (#2077)

* GEODE-4511: rework ClientAuthDUnitRule to illustrate when authentication is executed on client operations.
Fix test failure related to #2067
Fix test failure related to #2067
GEODE-5065: fix race in DataSerializerPropagationDUnitTest. (#2063)

DataSerializerPropagationDUnitTest.testServerUpFirstClientLater didn't
wait for the event to be propagated before checking its value.

Signed-off-by: Scott Jewell <sjewell@pivotal.io>GEODE-5065: fix race in DataSerializerPropagationDUnitTest. (#2063)

DataSerializerPropagationDUnitTest.testServerUpFirstClientLater didn't
wait for the event to be propagated before checking its value.

Signed-off-by: Scott Jewell <sjewell@pivotal.io>GEODE-5065: fix race in DataSerializerPropagationDUnitTest. (#2063)

DataSerializerPropagationDUnitTest.testServerUpFirstClientLater didn't
wait for the event to be propagated before checking its value.

Signed-off-by: Scott Jewell <sjewell@pivotal.io>GEODE-5065: fix race in DataSerializerPropagationDUnitTest. (#2063)

DataSerializerPropagationDUnitTest.testServerUpFirstClientLater didn't
wait for the event to be propagated before checking its value.

Signed-off-by: Scott Jewell <sjewell@pivotal.io>GEODE-5065: fix race in DataSerializerPropagationDUnitTest. (#2063)

DataSerializerPropagationDUnitTest.testServerUpFirstClientLater didn't
wait for the event to be propagated before checking its value.

Signed-off-by: Scott Jewell <sjewell@pivotal.io>GEODE-5306: add crashVM and forceDisconnect in ClusterStartupRule (#2048)

Co-authored-by: Helena Bales <hbales@pivotal.io>GEODE-5306: add crashVM and forceDisconnect in ClusterStartupRule (#2048)

Co-authored-by: Helena Bales <hbales@pivotal.io>GEODE-5306: add crashVM and forceDisconnect in ClusterStartupRule (#2048)

Co-authored-by: Helena Bales <hbales@pivotal.io>GEODE-5306: add crashVM and forceDisconnect in ClusterStartupRule (#2048)

Co-authored-by: Helena Bales <hbales@pivotal.io>GEODE-5306: add crashVM and forceDisconnect in ClusterStartupRule (#2048)

Co-authored-by: Helena Bales <hbales@pivotal.io>GEODE-5322: Catch exceptions during plugin loading (#2058)

- Revert to using an Iterator as the exceptions are generated from the next()
  call. Using forEach doesn't allow catch per-item exceptions just for the
  whole loop.GEODE-4858: Convert *DefinedIndex commands to use ResultModel and Sin… (#1983)

GEODE-4858: CreateAsyncEventQueue and tests refactor. (#1969)

* Unsupported ModelCommandResult methods failedToPersist, setCommandPersisted, and setFileToDownload now throw exceptions to avoid accidental use in testing.
* Extracted cluster configuration messages in CommandExecutor to public class fields, for test consumption.
* Extracted several message strings in ModelCommandResult to public class fields, for test consumption
* Serialized necessary AsyncEventQueue configuration classes and updated sanctioned-geode-core-serializables
GEODE-4858: CreateAsyncEventQueue and tests refactor. (#1969)

* Unsupported ModelCommandResult methods failedToPersist, setCommandPersisted, and setFileToDownload now throw exceptions to avoid accidental use in testing.
* Extracted cluster configuration messages in CommandExecutor to public class fields, for test consumption.
* Extracted several message strings in ModelCommandResult to public class fields, for test consumption
* Serialized necessary AsyncEventQueue configuration classes and updated sanctioned-geode-core-serializables
GEODE-974: Fix PersistentPartitionedRegionDistributedTest

* Rename PersistentPartitionedRegionDUnitTest -> PersistentPartitionedRegionDistributedTest
* Remove dependency on PersistentPartitionedRegionTestBase (GEODE-5175)
* Rename all test methods
* Overhaul test to use JUnit Rules, Awaitility and AssertJ

Fix all flaky issues in this test:
* GEODE-974: testRevokeBeforeStartup
* GEODE-1047: testMissingMemberRedundancy1
* GEODE-1208: testBug42226
* GEODE-1582: testCleanStop
* GEODE-1738: testCrashDuringBucketCreation
* GEODE-4418: testCleanupAfterConflict
GEODE-4858: Convert DestroyIndexCommand to ResultModel and new cluster persistence API (#1966)

GEODE-4858: Convert DestroyIndexCommand to ResultModel and new cluster persistence API (#1966)

GEODE-577: Refactored QueryMonitorDUnitTest to use new rules (#1923)

* Modified product to have cq's ignore the query timeout - not sure if that was expected originally, from the tests it sounds like it shouldn't have been
  * Enabled ignored tests and removed flaky tag
  * Tests can be further pruned and refactored but this was a first stepGEODE-577: Refactored QueryMonitorDUnitTest to use new rules (#1923)

* Modified product to have cq's ignore the query timeout - not sure if that was expected originally, from the tests it sounds like it shouldn't have been
  * Enabled ignored tests and removed flaky tag
  * Tests can be further pruned and refactored but this was a first stepGEODE-4858: refactor JndiBinding commands (#1935)

GEODE-5065 Increase timeout for a flaky distributed test. And cleanup. (#1821)

GEODE-5065 Increase timeout for a flaky distributed test.

* remove duplicate/unneeded methods and fields
* make a lot of methods private
* Don't use the reflection-based `invoke` form
* Change some CacheSerializableRunnables with misleading description
  text to plain ol' lambdas.
* Simplify waiting logic.
* Merge all the registration methods into one.
* We don't need more than three registered DataSerializers per test;
  remove the others.
* Remove single data serializer test because it's redundant.

I'm not entirely sure this will fix all the issues but at least the code is more readable now.
GEODE-5065 Increase timeout for a flaky distributed test. And cleanup. (#1821)

GEODE-5065 Increase timeout for a flaky distributed test.

* remove duplicate/unneeded methods and fields
* make a lot of methods private
* Don't use the reflection-based `invoke` form
* Change some CacheSerializableRunnables with misleading description
  text to plain ol' lambdas.
* Simplify waiting logic.
* Merge all the registration methods into one.
* We don't need more than three registered DataSerializers per test;
  remove the others.
* Remove single data serializer test because it's redundant.

I'm not entirely sure this will fix all the issues but at least the code is more readable now.
GEODE-4858: refactor CreateIndexCommand and jdbc commands (#1853)

* use ClusterConfigurationService
* introduce SingleGfshCommand to ease update of cluster configuration
* get rid of default methods in CluterConfigurationServiceGEODE-3523 AutoConnectionSourceDUnitTest: testDynamicallyFindLocators failed

Refactored the test into two smaller tests, one that tests that a client
discovers another locator and another that tests that a client discovers
that a locator has gone away.

I did some general updating of the code in this class to
- replace SerializableCallable/Runnables with lambdas
- replace wait-loops with Awaitility
- replace use of AvailablePortHelper with wildcard binds
- replace ignoring of Exceptions with checks for the correct exception class
- replaced heavy use of deprecated methods with their non-deprecated versions

This closes #1837
GEODE-4863: refactor jdbc commands to use this public cluster configuration api (#1776)

   * refactored jdbc connector commands to use public cc service
   * removed JdbcConnectorServiceXmlGenerator
   * removed RegionMappingBuilder & ConnectionConfigBuilder
   * if cc service is running then user can only alter whats available in CC
   * describe & List commands now list entries from cc service
   * converted some integration tests to junits
   * removed unwanted functions, tests

Signed-off-by: Jinmei Liao <jiliao@pivotal.io>
GEODE-4863: refactor jdbc commands to use this public cluster configuration api (#1776)

   * refactored jdbc connector commands to use public cc service
   * removed JdbcConnectorServiceXmlGenerator
   * removed RegionMappingBuilder & ConnectionConfigBuilder
   * if cc service is running then user can only alter whats available in CC
   * describe & List commands now list entries from cc service
   * converted some integration tests to junits
   * removed unwanted functions, tests

Signed-off-by: Jinmei Liao <jiliao@pivotal.io>
GEODE-4857: add interface methods to ClusterConfigurationService (#1637)

* GEODE-4857: add interface methods to ClusterConfigurationService
GEODE-4769: fix tests using non-Serializable value objects

Cleanup all test classes touched for this change.
GEODE-4769: fix tests using non-Serializable value objects

Cleanup all test classes touched for this change.
GEODE-4769: fix tests using non-Serializable value objects

Cleanup all test classes touched for this change.
GEODE-4769: fix tests using non-Serializable value objects

Cleanup all test classes touched for this change.
GEODE-4693: fix JDBCLoader on non-object pdx fields (#1517)

If the region mapping has a pdxClassName then the JdbcLoader will look for a pdx type that is already defined and use its field types when creating the PdxInstance. If the pdx type does not have a field that corresponds to an existing column then an exception is thrown.

A pdx field of type "char" or an instance of "java.lang.Character" will be sent to SQL as a String of size 1.
A pdx field of type "Date" will be sent to SQL as a java.sql.Timestamp.

A new external API was added to GemFireCache. It is the method "registerPdxMetaData".
It only needs to be called on clients if they are going to do reads using a JdbcLoader of data that wa s not written using the JdbcWriter or JdbcAsyncWriter.GEODE-4685: Moving of static DefaultQuery.setPdxReadSerialized to the TypeRegistry.
Cleaned up the overriding of readSerialized to reset to previous value.
Added cache to AbstractJdbcCallback.java so that children classes can access it.
Replaced AtomicLong with LongAdder.
GEODE-4735: get rid of Cache.getInstance call from CliUtils and GfshC… (#1551)

* GEODE-4735: get rid of Cache.getInstance call from CliUtils and GfshCommand

* all functions in CliUtils take cache as a parameter if needs one.
* InternalCache is injected to the command when the command is initialized.GEODE-4735: get rid of Cache.getInstance call from CliUtils and GfshC… (#1551)

* GEODE-4735: get rid of Cache.getInstance call from CliUtils and GfshCommand

* all functions in CliUtils take cache as a parameter if needs one.
* InternalCache is injected to the command when the command is initialized.GEODE-2673: overhaul PartitionedRegion dunit tests (#1486)

* Delete PartitionedRegionDUnitTestCase
* Overhaul every dunit test that extended PartitionedRegionDUnitTestCase
* Fix flakiness in several dunit tests
* Document and update test methods that were named after old TRAC bugs
* Extract regression test methods to new dedicated test classes
* Extract unrelated test methods to new dedicated test classes
* Extract inner classes that are used by multiple test classes
* Change PRIdMap prIdToPR in PartitionedRegion to be private and change tests to use an accessor to reference it
* Change localBucket2RegionMap in PartitionedRegionDataStore to be private and change tests to use an accessor to reference it
* Move "Set getSomeKeys(Random rnd)" from PartitionedRegion product code to PartitionedRegionGetSomeKeys in test code
* Make IgnoredException AutoCloseable so you can use it within try-resource blocks
* Add "IgnoredException addIgnoredException(final Class exceptionClass)" to IgnoredException
GEODE-4464: remove singleton calls from all tests in org.apache.geode.cache30 (#1484)

* removed unneeded fine logging on deprecated method
so that getAnyInstance would not be called

* changed getAnyInstance calls to getCache

* InternalDistributedSystem.getConnectedInstance no longer called

* InternalDistributedSystem.getAnyInstance call removed from CachedAllEventsDUnitTest

* InternalDistributedSystem.getAnyInstance call removed from CallbackArgDUnitTest

* removed InternalDistributedSystem.getAnyInstance call from ClientMembershipDUnitTest

* removed getAnyInstance calls from ClientServerTestCase by
removing the methods getDistributedMember and getSystemProperties

* removed InternalDistributedSystem.getAnyInstance from ProxyDUnitTest

* removed InternalDistributedSystem.getAnyInstance call from RegionMembershipListenerDUnitTest

* removed unused InternalDistributedSystem.getAnyInstance call from RegionReliabilityTestCase

* InternalDistributedSystem.getAnyInstance call removed from TXOrderDUnitTest
GEODE-4464: remove singleton calls from all tests in org.apache.geode.cache30 (#1484)

* removed unneeded fine logging on deprecated method
so that getAnyInstance would not be called

* changed getAnyInstance calls to getCache

* InternalDistributedSystem.getConnectedInstance no longer called

* InternalDistributedSystem.getAnyInstance call removed from CachedAllEventsDUnitTest

* InternalDistributedSystem.getAnyInstance call removed from CallbackArgDUnitTest

* removed InternalDistributedSystem.getAnyInstance call from ClientMembershipDUnitTest

* removed getAnyInstance calls from ClientServerTestCase by
removing the methods getDistributedMember and getSystemProperties

* removed InternalDistributedSystem.getAnyInstance from ProxyDUnitTest

* removed InternalDistributedSystem.getAnyInstance call from RegionMembershipListenerDUnitTest

* removed unused InternalDistributedSystem.getAnyInstance call from RegionReliabilityTestCase

* InternalDistributedSystem.getAnyInstance call removed from TXOrderDUnitTest
GEODE-4464: remove singleton calls from all tests in org.apache.geode.cache30 (#1484)

* removed unneeded fine logging on deprecated method
so that getAnyInstance would not be called

* changed getAnyInstance calls to getCache

* InternalDistributedSystem.getConnectedInstance no longer called

* InternalDistributedSystem.getAnyInstance call removed from CachedAllEventsDUnitTest

* InternalDistributedSystem.getAnyInstance call removed from CallbackArgDUnitTest

* removed InternalDistributedSystem.getAnyInstance call from ClientMembershipDUnitTest

* removed getAnyInstance calls from ClientServerTestCase by
removing the methods getDistributedMember and getSystemProperties

* removed InternalDistributedSystem.getAnyInstance from ProxyDUnitTest

* removed InternalDistributedSystem.getAnyInstance call from RegionMembershipListenerDUnitTest

* removed unused InternalDistributedSystem.getAnyInstance call from RegionReliabilityTestCase

* InternalDistributedSystem.getAnyInstance call removed from TXOrderDUnitTest
GEODE-3928: createIndex on existing region creates lucene indexes for existing data
GEODE-3928: createIndex on existing region creates lucene indexes for existing data
GEODE-3928: createIndex on existing region creates lucene indexes for existing data
GEODE-3928: createIndex on existing region creates lucene indexes for existing data
GEODE-3928: createIndex on existing region creates lucene indexes for existing data
GEODE-3928: createIndex on existing region creates lucene indexes for existing data
GEODE-3928: createIndex on existing region creates lucene indexes for existing data
GEODE-3928: createIndex on existing region creates lucene indexes for existing data
GEODE-3928: createIndex on existing region creates lucene indexes for existing data
GEODE-3928: createIndex on existing region creates lucene indexes for existing data
GEODE-3928: createIndex on existing region creates lucene indexes for existing data
GEODE-3928: createIndex on existing region creates lucene indexes for existing data
GEODE-3928: createIndex on existing region creates lucene indexes for existing data
GEODE-3928: createIndex on existing region creates lucene indexes for existing data
GEODE-3928: createIndex on existing region creates lucene indexes for existing data
GEODE-3928: createIndex on existing region creates lucene indexes for existing data
GEODE-3928: createIndex on existing region creates lucene indexes for existing data
GEODE-3928: createIndex on existing region creates lucene indexes for existing data
GEODE-4640: Remove potential race condition from RemoveCommandDUnitTest. (#1421)

GEODE-4373: gfsh 'describe region' not showing accessor region description (#1365)

  Fixed describe region to return region descriptions from all members
  that host the region and from accessors(if any).
GEODE-3539: rule cleanup (#1242)

* add javadoc to explain the issue of with useTempWorkingDir
* properly cleanup all residue files in the working dir
* fix tests that do not need to use a tempWorkingDirGEODE-4131: Do not reference deployed jars as byte arrays anymore (#1212)

* GEODE-4131: Do not reference deployed jars as byte arrays anymore

- All jars are streamed between locators and servers using the RMIIO library.
- Whenever an upload happens (either deploying jars or importing cluster
  config) we stage the files initially and then proceed with the command.GEODE-4131: Do not reference deployed jars as byte arrays anymore (#1212)

* GEODE-4131: Do not reference deployed jars as byte arrays anymore

- All jars are streamed between locators and servers using the RMIIO library.
- Whenever an upload happens (either deploying jars or importing cluster
  config) we stage the files initially and then proceed with the command.GEODE-4131: Do not reference deployed jars as byte arrays anymore (#1212)

* GEODE-4131: Do not reference deployed jars as byte arrays anymore

- All jars are streamed between locators and servers using the RMIIO library.
- Whenever an upload happens (either deploying jars or importing cluster
  config) we stage the files initially and then proceed with the command.GEODE-4110: extend LocatorServerStartupRule to start a client VM. (#1175)

* created a new ClientCacheRule to create a client cache in current VM.
* have lcoatorserverStartupRule to use that rule to start up a client VM.GEODE-3799: Move backups towards a pluggable architecture (#1109)


  * This effort decouples the definition of files to be backed up
    from the destination of the backup. It will allow for the
    development of different, pluggable, strategies for conducting
    backups, such as compressed archive files of backups or backup
    to cloud providers.

  * A new BackupDestination interface is provided and the existing
    logic for saving a backup to the filesystem has been moved into
    an implementation of this interface, FileSystemBackupDestination.
    During a backup, all files are copied to a temporary directory
    and added to a definition of the backup. This definition is then
    used to send the files to their ultimate destination. In the
    current case of moving the files to a specified location on the
    filesystem, this is implemented by moving the files from the
    temporary location to the target backup directory.
GEODE-3799: Move backups towards a pluggable architecture (#1109)


  * This effort decouples the definition of files to be backed up
    from the destination of the backup. It will allow for the
    development of different, pluggable, strategies for conducting
    backups, such as compressed archive files of backups or backup
    to cloud providers.

  * A new BackupDestination interface is provided and the existing
    logic for saving a backup to the filesystem has been moved into
    an implementation of this interface, FileSystemBackupDestination.
    During a backup, all files are copied to a temporary directory
    and added to a definition of the backup. This definition is then
    used to send the files to their ultimate destination. In the
    current case of moving the files to a specified location on the
    filesystem, this is implemented by moving the files from the
    temporary location to the target backup directory.
GEODE-3799: Move backups towards a pluggable architecture (#1109)


  * This effort decouples the definition of files to be backed up
    from the destination of the backup. It will allow for the
    development of different, pluggable, strategies for conducting
    backups, such as compressed archive files of backups or backup
    to cloud providers.

  * A new BackupDestination interface is provided and the existing
    logic for saving a backup to the filesystem has been moved into
    an implementation of this interface, FileSystemBackupDestination.
    During a backup, all files are copied to a temporary directory
    and added to a definition of the backup. This definition is then
    used to send the files to their ultimate destination. In the
    current case of moving the files to a specified location on the
    filesystem, this is implemented by moving the files from the
    temporary location to the target backup directory.
GEODE-4081: update cluster config after destroy gateway sender (#1140)

* make sure we don't update cc when gateway commands are executed on a particular memberGEODE-4081: update cluster config after destroy gateway sender (#1140)

* make sure we don't update cc when gateway commands are executed on a particular member GEODE-2668: build tabular command result from a list of function results  (#1127)

* GEODE-2668: build tabular command result from a list of function results

* reduce duplicate code to create the tabular results
* promote presentation consistency
* Add more validation for CreateGatewaySender/Receiver command and reworked the tests
GEODE-4059: Changing protobuf handshake to not need communication mode bytes

This closes pull request #1137

Squashed commit of the following:

commit d9f5144cd7f7ddcf42eb7eb5febed531cbf67362
Merge: 6fa9bf6c8 8fd707201
Author: Bruce Schuchardt <bschuchardt@pivotal.io>
Date:   Fri Dec 8 09:34:55 2017 -0800

    Merge branch 'feature/GEODE-4059' of https://github.com/WireBaron/geode into WireBaron-feature/GEODE-4059

commit 8fd707201f0e02b1fdf81c1596f93d3fd9ccb0cf
Author: Brian Rowe <browe@pivotal.io>
Date:   Thu Dec 7 14:53:28 2017 -0800

    Removing extra handshake from a unit test.

    Signed-off-by: Galen O'Sullivan <gosullivan@pivotal.io>

commit 7d07c6f5163d99b92a12ca856a1b397fda6e0eb4
Author: Galen O'Sullivan <gosullivan@pivotal.io>
Date:   Wed Dec 6 16:20:25 2017 -0800

    GEODE-4059: Changing protobuf handshake to not need communication mode bytes

    - Moved handshake proto messages into top level handshake.proto
    - Changed protobuf communication mode to match leading byte of handshake
    - Updated handshake handler and tests to handle changes
    - Modified locator to accept protobuf communication mode in lieu of gossip

    Signed-off-by: Brian Rowe <browe@pivotal.io>
GEODE-4049: refactor CreateRegionCommand and DestoryRegionCommand status

* use tabular result display for destroy region command.
* status to reflect at least one region is created/deleted and cluser config is updated.
GEODE-4029: Deployed jars may not be correct when multiple locators a… (#1103)

* GEODE-4029: Deployed jars may not be correct when multiple locators are in use

* GEODE-4029: Review updates
GEODE-4029: Deployed jars may not be correct when multiple locators a… (#1103)

* GEODE-4029: Deployed jars may not be correct when multiple locators are in use

* GEODE-4029: Review updates
GEODE-3788: GfshParserRule enhancement (#1082)

GEODE-3940: fix deadlock in backup messages

When backup sends FlushToDisk, PrepareBackup, and FinishBackup,
it will no longer wait for all other members to respond before
doing the same work on its own member.
In addition to preventing a distributed deadlock, this will
also improve how long it takes for a backup to complete.
As part of this work the backup classes and tests have been
moved into their own backup package.
GEODE-3940: fix deadlock in backup messages

When backup sends FlushToDisk, PrepareBackup, and FinishBackup,
it will no longer wait for all other members to respond before
doing the same work on its own member.
In addition to preventing a distributed deadlock, this will
also improve how long it takes for a backup to complete.
As part of this work the backup classes and tests have been
moved into their own backup package.
GEODE-3940: fix deadlock in backup messages

When backup sends FlushToDisk, PrepareBackup, and FinishBackup,
it will no longer wait for all other members to respond before
doing the same work on its own member.
In addition to preventing a distributed deadlock, this will
also improve how long it takes for a backup to complete.
As part of this work the backup classes and tests have been
moved into their own backup package.
GEODE-3940: fix deadlock in backup messages

When backup sends FlushToDisk, PrepareBackup, and FinishBackup,
it will no longer wait for all other members to respond before
doing the same work on its own member.
In addition to preventing a distributed deadlock, this will
also improve how long it takes for a backup to complete.
As part of this work the backup classes and tests have been
moved into their own backup package.
GEODE-3940: fix deadlock in backup messages

When backup sends FlushToDisk, PrepareBackup, and FinishBackup,
it will no longer wait for all other members to respond before
doing the same work on its own member.
In addition to preventing a distributed deadlock, this will
also improve how long it takes for a backup to complete.
As part of this work the backup classes and tests have been
moved into their own backup package.
GEODE-3940: fix deadlock in backup messages

When backup sends FlushToDisk, PrepareBackup, and FinishBackup,
it will no longer wait for all other members to respond before
doing the same work on its own member.
In addition to preventing a distributed deadlock, this will
also improve how long it takes for a backup to complete.
As part of this work the backup classes and tests have been
moved into their own backup package.
GEODE-3940: fix deadlock in backup messages

When backup sends FlushToDisk, PrepareBackup, and FinishBackup,
it will no longer wait for all other members to respond before
doing the same work on its own member.
In addition to preventing a distributed deadlock, this will
also improve how long it takes for a backup to complete.
As part of this work the backup classes and tests have been
moved into their own backup package.
GEODE-3940: fix deadlock in backup messages

When backup sends FlushToDisk, PrepareBackup, and FinishBackup,
it will no longer wait for all other members to respond before
doing the same work on its own member.
In addition to preventing a distributed deadlock, this will
also improve how long it takes for a backup to complete.
As part of this work the backup classes and tests have been
moved into their own backup package.
GEODE-3940: fix deadlock in backup messages

When backup sends FlushToDisk, PrepareBackup, and FinishBackup,
it will no longer wait for all other members to respond before
doing the same work on its own member.
In addition to preventing a distributed deadlock, this will
also improve how long it takes for a backup to complete.
As part of this work the backup classes and tests have been
moved into their own backup package.
GEODE-3961: Refactor ShowMetricsCommand to handle --categories uniformly

* GEODE-3961: Refactor ShowMetricsCommand to behave uniformly when --categories is provided.

* The ShowMetricsCommand has been almost entirely refactored, but with minimal change to existing behavior.
* The category "cache-server" has been renamed to "cacheserver"
* The "query" category now only lists once instead of twice.
* Category checking is now performed by the client, not the server.
* Alphabetized excludedClasses.txt
GEODE-3961: Refactor ShowMetricsCommand to handle --categories uniformly

* GEODE-3961: Refactor ShowMetricsCommand to behave uniformly when --categories is provided.

* The ShowMetricsCommand has been almost entirely refactored, but with minimal change to existing behavior.
* The category "cache-server" has been renamed to "cacheserver"
* The "query" category now only lists once instead of twice.
* Category checking is now performed by the client, not the server.
* Alphabetized excludedClasses.txt
GEODE-3539: add more tests for get, put, locate entry commands (#1025)

* GEODE-3539: add more tests for get, put, locate entry commands

* clean up more methods in CliUtil
* refactor tests out of GemfireDataCommandsDUnitTest
* get rid of unnecessary try/catch block in commands
GEODE-3539: add more tests for get, put, locate entry commands (#1025)

* GEODE-3539: add more tests for get, put, locate entry commands

* clean up more methods in CliUtil
* refactor tests out of GemfireDataCommandsDUnitTest
* get rid of unnecessary try/catch block in commands
GEODE-3539: add more tests for get, put, locate entry commands (#1025)

* GEODE-3539: add more tests for get, put, locate entry commands

* clean up more methods in CliUtil
* refactor tests out of GemfireDataCommandsDUnitTest
* get rid of unnecessary try/catch block in commands
GEODE-3539: add more tests for get, put, locate entry commands (#1025)

* GEODE-3539: add more tests for get, put, locate entry commands

* clean up more methods in CliUtil
* refactor tests out of GemfireDataCommandsDUnitTest
* get rid of unnecessary try/catch block in commands
GEODE-3539: add more tests for get, put, locate entry commands (#1025)

* GEODE-3539: add more tests for get, put, locate entry commands

* clean up more methods in CliUtil
* refactor tests out of GemfireDataCommandsDUnitTest
* get rid of unnecessary try/catch block in commands
GEODE-3539: add more tests for get, put, locate entry commands (#1025)

* GEODE-3539: add more tests for get, put, locate entry commands

* clean up more methods in CliUtil
* refactor tests out of GemfireDataCommandsDUnitTest
* get rid of unnecessary try/catch block in commands
GEODE-3539: add more tests for get, put, locate entry commands (#1025)

* GEODE-3539: add more tests for get, put, locate entry commands

* clean up more methods in CliUtil
* refactor tests out of GemfireDataCommandsDUnitTest
* get rid of unnecessary try/catch block in commands
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3338 Refactor WAN command tests to use new Rules

This commit includes refactoring the 13 test classes in WAN Command tests to
use the new Test Rules vs. the deprecated CliCommandTestBase.
In addition to GEODE-3338, please refer to GEODE-3362 through GEODE-3374
(one per test plus one to remove WANCommandTestBase) all of which are included
as sub jiras for GEODE-1359.

- Remove use of deprecated APIs in CliCommandTestBase
- Remove WANCommandTestBase (all classes extended this class)
- Refactored to use new rules
- Removed FlakyTest specification for GEODE-1355, GEODE-1395, GEODE-1418
and GEODE-1448.
GEODE-3872: Consolidate GfshShellConnectionRule Assertions

This closes #978.
GEODE-3614 remove JUnit3CacheTestCase, cleanup JUnit4CacheTestCase

* Use LogService instead of LogWriter
* get rid of an unused method or two
* remove redundant error handling
* remove TODOs.
GEODE-3614 remove JUnit3CacheTestCase, cleanup JUnit4CacheTestCase

* Use LogService instead of LogWriter
* get rid of an unused method or two
* remove redundant error handling
* remove TODOs.
GEODE-2563: destroy region should be idempotent (#926)

* GEODE-2563: destroy region should be idempotent

* added the if-exists option for destroy region
* refactor the RegionPathConverter for better validation of regionPath
* cleaned up commands that uses the RegionPathConverter to not do unnecessary validation
* reworked DestroyRegionCommandDUnitTest
* added more tests
GEODE-2563: destroy region should be idempotent (#926)

* GEODE-2563: destroy region should be idempotent

* added the if-exists option for destroy region
* refactor the RegionPathConverter for better validation of regionPath
* cleaned up commands that uses the RegionPathConverter to not do unnecessary validation
* reworked DestroyRegionCommandDUnitTest
* added more tests
GEODE-2563: destroy region should be idempotent (#926)

* GEODE-2563: destroy region should be idempotent

* added the if-exists option for destroy region
* refactor the RegionPathConverter for better validation of regionPath
* cleaned up commands that uses the RegionPathConverter to not do unnecessary validation
* reworked DestroyRegionCommandDUnitTest
* added more tests
GEODE-2563: destroy region should be idempotent (#926)

* GEODE-2563: destroy region should be idempotent

* added the if-exists option for destroy region
* refactor the RegionPathConverter for better validation of regionPath
* cleaned up commands that uses the RegionPathConverter to not do unnecessary validation
* reworked DestroyRegionCommandDUnitTest
* added more tests
GEODE-2563: destroy region should be idempotent (#926)

* GEODE-2563: destroy region should be idempotent

* added the if-exists option for destroy region
* refactor the RegionPathConverter for better validation of regionPath
* cleaned up commands that uses the RegionPathConverter to not do unnecessary validation
* reworked DestroyRegionCommandDUnitTest
* added more tests
GEODE-2563: destroy region should be idempotent (#926)

* GEODE-2563: destroy region should be idempotent

* added the if-exists option for destroy region
* refactor the RegionPathConverter for better validation of regionPath
* cleaned up commands that uses the RegionPathConverter to not do unnecessary validation
* reworked DestroyRegionCommandDUnitTest
* added more tests
GEODE-3749: DeltaPropagationDUnitTest.testBug40165ClientReconnects failure
GEODE-3749: DeltaPropagationDUnitTest.testBug40165ClientReconnects failure
GEODE-3749: DeltaPropagationDUnitTest.testBug40165ClientReconnects failure
GEODE-3749: DeltaPropagationDUnitTest.testBug40165ClientReconnects failure
GEODE-3749: DeltaPropagationDUnitTest.testBug40165ClientReconnects failure
GEODE-3749: DeltaPropagationDUnitTest.testBug40165ClientReconnects failure
GEODE-3749: DeltaPropagationDUnitTest.testBug40165ClientReconnects failure
GEODE-3749: DeltaPropagationDUnitTest.testBug40165ClientReconnects failure
GEODE-3749: DeltaPropagationDUnitTest.testBug40165ClientReconnects failure
GEODE-3749: DeltaPropagationDUnitTest.testBug40165ClientReconnects failure
GEODE-3749: DeltaPropagationDUnitTest.testBug40165ClientReconnects failure
GEODE-3749: DeltaPropagationDUnitTest.testBug40165ClientReconnects failure
GEODE-3749: DeltaPropagationDUnitTest.testBug40165ClientReconnects failure
GEODE-3749: DeltaPropagationDUnitTest.testBug40165ClientReconnects failure
GEODE-3749: DeltaPropagationDUnitTest.testBug40165ClientReconnects failure
GEODE-3749: DeltaPropagationDUnitTest.testBug40165ClientReconnects failure
GEODE-3749: DeltaPropagationDUnitTest.testBug40165ClientReconnects failure
GEODE-3749: DeltaPropagationDUnitTest.testBug40165ClientReconnects failure
GEODE-3749: DeltaPropagationDUnitTest.testBug40165ClientReconnects failure
GEODE-3749: DeltaPropagationDUnitTest.testBug40165ClientReconnects failure
GEODE-3749: DeltaPropagationDUnitTest.testBug40165ClientReconnects failure
GEODE-3749: DeltaPropagationDUnitTest.testBug40165ClientReconnects failure
GEODE-3749: DeltaPropagationDUnitTest.testBug40165ClientReconnects failure
GEODE-3749: DeltaPropagationDUnitTest.testBug40165ClientReconnects failure
GEODE-3749: DeltaPropagationDUnitTest.testBug40165ClientReconnects failure
GEODE-3749: DeltaPropagationDUnitTest.testBug40165ClientReconnects failure
GEODE-3749: DeltaPropagationDUnitTest.testBug40165ClientReconnects failure
GEODE-3749: DeltaPropagationDUnitTest.testBug40165ClientReconnects failure
GEODE-3749: DeltaPropagationDUnitTest.testBug40165ClientReconnects failure
GEODE-3749: DeltaPropagationDUnitTest.testBug40165ClientReconnects failure
GEODE-3749: DeltaPropagationDUnitTest.testBug40165ClientReconnects failure
GEODE-3749: DeltaPropagationDUnitTest.testBug40165ClientReconnects failure
GEODE-3749: DeltaPropagationDUnitTest.testBug40165ClientReconnects failure
GEODE-3749: DeltaPropagationDUnitTest.testBug40165ClientReconnects failure
GEODE-3749: DeltaPropagationDUnitTest.testBug40165ClientReconnects failure
GEODE-3749: DeltaPropagationDUnitTest.testBug40165ClientReconnects failure
GEODE-3749: DeltaPropagationDUnitTest.testBug40165ClientReconnects failure
GEODE-3749: DeltaPropagationDUnitTest.testBug40165ClientReconnects failure
GEODE-3749: DeltaPropagationDUnitTest.testBug40165ClientReconnects failure
GEODE-3749: DeltaPropagationDUnitTest.testBug40165ClientReconnects failure
GEODE-3749: DeltaPropagationDUnitTest.testBug40165ClientReconnects failure
GEODE-3749: DeltaPropagationDUnitTest.testBug40165ClientReconnects failure
GEODE-3749: DeltaPropagationDUnitTest.testBug40165ClientReconnects failure
GEODE-3749: DeltaPropagationDUnitTest.testBug40165ClientReconnects failure
GEODE-3715: introduce CacheRule and SharedCountersRule

Also minor improvements to DUnit:

* Move disconnect methods to Disconnect
* Add withVMCount support to DistributedTestRule
* Improve API for DUnit Locator in DistributedTestUtils
GEODE-3713: add VM.getId() and fix VM.getPid()
GEODE-2817: Add new function security callback

This closes #801.
GEODE-3552: cleanup more MXBean tests

* start refactoring MXBean await methods to MXBeanAwaitility
* organize imports
* remove unused code
* convert from WaitCriterion to Awaitility
* reduce scope from protected/public to private where possible
* fix minor race conditions
GEODE-3445: Convert connect acceptance test to DUnit test
GEODE-3434: Allow the modules to be interoperable with current and older versions of tomcat 7

  * Modified DeltaSessions to use reflection to handle attributes fields incase an earlier tomcat 7 is used
  * Modified DeltaSession7 and DeltaSession8 to extend from DeltaSession
  * Added session backward compatibility tests
  * Modified aseembly build to download old product installs
  * Minor refactor of VersionManager to reuse property file load code
GEODE-3383: Refactor deploy tests
GEODE-3271: Renaming punePort variables, refactoring WANCommandsTestBase

This closes #647
GEODE-3271: Renaming punePort variables, refactoring WANCommandsTestBase

This closes #647
GEODE-3271: Renaming punePort variables, refactoring WANCommandsTestBase

This closes #647
GEODE-3271: Renaming punePort variables, refactoring WANCommandsTestBase

This closes #647
GEODE-3271: Renaming punePort variables, refactoring WANCommandsTestBase

This closes #647
GEODE-3271: Renaming punePort variables, refactoring WANCommandsTestBase

This closes #647
GEODE-3271: Renaming punePort variables, refactoring WANCommandsTestBase

This closes #647
GEODE-3271: Renaming punePort variables, refactoring WANCommandsTestBase

This closes #647
GEODE-2919: Provide finer grained security

 - For full details, see https://cwiki.apache.org/confluence/display/GEODE/Finer+grained+security
GEODE-2919: Provide finer grained security

 - For full details, see https://cwiki.apache.org/confluence/display/GEODE/Finer+grained+security
GEODE-2919: Provide finer grained security

 - For full details, see https://cwiki.apache.org/confluence/display/GEODE/Finer+grained+security
GEODE-2919: Provide finer grained security

 - For full details, see https://cwiki.apache.org/confluence/display/GEODE/Finer+grained+security
GEODE-2919: Provide finer grained security

 - For full details, see https://cwiki.apache.org/confluence/display/GEODE/Finer+grained+security
GEODE-2919: Provide finer grained security

 - For full details, see https://cwiki.apache.org/confluence/display/GEODE/Finer+grained+security
GEODE-2919: Provide finer grained security

 - For full details, see https://cwiki.apache.org/confluence/display/GEODE/Finer+grained+security
GEODE-2919: Provide finer grained security

 - For full details, see https://cwiki.apache.org/confluence/display/GEODE/Finer+grained+security
GEODE-2919: Provide finer grained security

 - For full details, see https://cwiki.apache.org/confluence/display/GEODE/Finer+grained+security
GEODE-2420: add file-size-limit param to the ExportLogsController

Refactored size and warning for exported logs to be based on fully
expanded size of the exported files

(cherry picked from commit a658322)
GEODE-2420: add file-size-limit param to the ExportLogsController

Refactored size and warning for exported logs to be based on fully
expanded size of the exported files
GEODE-2662: Gfsh displays field value on wrong line when receiving objects with missing fields

* DataCommandResult.buildTable refactored to scan for all necessary fields and build rows, padding with MISSING_VALUE as necessary.
* ServerStarterRule adjusted to build .withPDXPersistent() rather than take it as input to .startServer()
* Refactored a great deal for readability.
* this closes #500
GEODE-2662: Gfsh displays field value on wrong line when receiving objects with missing fields

* DataCommandResult.buildTable refactored to scan for all necessary fields and build rows, padding with MISSING_VALUE as necessary.
* ServerStarterRule adjusted to build .withPDXPersistent() rather than take it as input to .startServer()
* Refactored a great deal for readability.
* this closes #500
LuceneClientSecurityDUnitTest was not testing anything

This test was just creating lambdas without executing them. Changing the
test to actually run some tests.
Move the startBridgeClient method added to LocatorTestBase to
AutoConnectionSourceDUnitTest, and use the
DistributedRestoreSystemProperties rule.
GEODE-2647: remove unnecessary client puts from ClientHealthStatsDUnitTest

This removes the puts from the clients which was unnecessary for the
tests. By removing the puts, the race condition caused by async puts
and clears for the subscription enabled test is gone.
GEODE-2647: remove unnecessary client puts from ClientHealthStatsDUnitTest

This removes the puts from the clients which was unnecessary for the
tests. By removing the puts, the race condition caused by async puts
and clears for the subscription enabled test is gone.
GEODE-2647: remove unnecessary client puts from ClientHealthStatsDUnitTest

This removes the puts from the clients which was unnecessary for the
tests. By removing the puts, the race condition caused by async puts
and clears for the subscription enabled test is gone.
GEODE-2647: remove unnecessary client puts from ClientHealthStatsDUnitTest

This removes the puts from the clients which was unnecessary for the
tests. By removing the puts, the race condition caused by async puts
and clears for the subscription enabled test is gone.
GEODE-2647: remove unnecessary client puts from ClientHealthStatsDUnitTest

This removes the puts from the clients which was unnecessary for the
tests. By removing the puts, the race condition caused by async puts
and clears for the subscription enabled test is gone.
GEODE-2647: remove unnecessary client puts from ClientHealthStatsDUnitTest

This removes the puts from the clients which was unnecessary for the
tests. By removing the puts, the race condition caused by async puts
and clears for the subscription enabled test is gone.
GEODE-2643: Combine chunk and file region into a single region

* removed file and chunk count from stat
* removed tests that were doing checks against chunk bucketRegions
GEODE-2643: Combine chunk and file region into a single region

* removed file and chunk count from stat
* removed tests that were doing checks against chunk bucketRegions
GEODE-1716: refactor JMXMBeanDunitTest

* refactor MBeanServerConnectRule for easier usage.
* refactor LocatorServerStartupRule to be able to start up locator/server in VM out of sequence
GEODE-1716: refactor JMXMBeanDunitTest

* refactor MBeanServerConnectRule for easier usage.
* refactor LocatorServerStartupRule to be able to start up locator/server in VM out of sequence
GEODE-2198: do not import cluster config if any region exists to prevent different servers having conflicing region definitions at one point of time.
GEODE-2198: do not import cluster config if any region exists to prevent different servers having conflicing region definitions at one point of time.
GEODE-2198: do not import cluster config if any region exists to prevent different servers having conflicing region definitions at one point of time.
Refactor test rules

* Refactor GfshShellConnectorRule so that it's easier to use it either as a rule or classRule
* Refactor LocatorServerStartupRule so that tests using it do not need to extend from Junit4DUnitTest and can be used as a class rule.
* properly close all the vms using the ServerStartupRule
* add NetstatDUnitTest
GEODE-2003: Changed REST api to handle fully qualified Classname for function ID's.
GEODE-2261: do not use remote function calls to update the shared configuration
GEODE-2261: do not use remote function calls to update the shared configuration
GEODE-2197: refactor cluster config and fix the test failures
GEODE-2197: refactor cluster config and fix the test failures
[GEODE-2196] Add test for Cluster Config. Refactor LocatorServerStartupRule.

* Add ClusterConfigDUnitTest
* Refactor LocatorServerStartupRule
* this closes #309
GEODE-2112: UITests actually take screenshots on failure

This closes #301
GEODE-2095: Stabilize flaky tests

Changed checks for expected log messages from time based to event based.
GEODE-2095: Stabilize flaky tests

Changed checks for expected log messages from time based to event based.
This closes #293

GEODE-1653: Added helper method getAllServers in ExecuteFunctionNoAckOp
to get all available servers, instead executing Fire and Forget only on the ones the
client is currently connected to.

GEODE-1653: Dunit test for Executing a fire-and-forget function on all
servers as opposed to only executing on the ones the client is currently
connected to.

GEODE-1653: changes after spotlessApply.

GEODE-1653:
1. renamed test file to FireAndForgetFunctionOnAllServersDUnitTest and
test to testFireAndForgetFunctionOnAllServers
2. replaced thread sleep with waitUntilDeterministic function before
verifying results after Fire and Forget Function execution
3. removed commented testServerSingleKeyExecution_Bug43513_OnServer
test.

GEODE-1653: Replacing Thread's sleep with Awatility, if the condition is not met during the
timeout, a ConditionTimeoutException will be thrown. This makes
analyzing the failure much simpler.

GEODE-1653: Use a larger timeout value such as 60 seconds to prevent
test from failing on slower machines or garbage collection during the
test.

GEODE-1653:
1. Code changes
  a. Added getAllServers() method to connection source, and converted
  AutoConnectionSourceImpl's findAllServers logic into it.
  b. Made relevant changes to both ExecuteFunctionNoAckOp and
  ExecuteFunctionOp classes

2. Test changes
  a. removed author tag in the test.
  b. created a new function (FireAndForgetFunctionOnAllServers) for
  test and removed it from TestFunction.
  c. test change about awaitility and actual assertion.
  d. asserted for pool's current server size after starting a new
  server and stopping existing server.

GEODE-1653: Adding missed out file for FireAndForgetFunctionOnAllServers function.

GEODE-1653: Adding @Override to ExplicitConnectionSourceImpl's
getAllServers() method.

GEODE-1653: fix the test code to double check the getCurrentServer only
returns 1 server
GEODE-2017: removal of nonPRSingleHop stat in client
GEODE-2017: removal of nonPRSingleHop stat in client
GEODE-2017: removal of nonPRSingleHop stat in client
GEODE-2017: removal of nonPRSingleHop stat in client
GEODE-1353: Added listeners to slow down the receiver.

	* Added a listener on after create to slow down the receiver.
	* This was done to avoid the need for a very large number of puts.
	* When region size is more than 5 it can initiate the destroy region
	* While the puts have been reduced to 2000 from 20,000
	* This will make sure the queue is not empty.
GEODE-1979: refactor SecurityClusterConfig to remove the flakiness.

* add more test cases to cover more scenarios
GEODE-1570 - developer REST API should be secured

* Merged with develop after org.apache package rename
* Moved classes to internal.
* this closes #251
GEODE-1570 - developer REST API should be secured

* Merged with develop after org.apache package rename
* Moved classes to internal.
* this closes #251
Fixed eclipse compilation and test execution issues

With the eclipse compiler, AsyncEventListenerDUnitTest was generating a
compilation error about a deserializeLambda method being to large. This
doesn't seem to be a real issue because the javac doesn't have
the same problem. However, by refactoring the test slightly I was able
to make this error go away.

Changed the eclipse classpath to include the generated-resources
directories. These directories contain files like
GemFireVersion.properties that need to be included on the classpath, but
we were filtering them out.
Fixed eclipse compilation and test execution issues

With the eclipse compiler, AsyncEventListenerDUnitTest was generating a
compilation error about a deserializeLambda method being to large. This
doesn't seem to be a real issue because the javac doesn't have
the same problem. However, by refactoring the test slightly I was able
to make this error go away.

Changed the eclipse classpath to include the generated-resources
directories. These directories contain files like
GemFireVersion.properties that need to be included on the classpath, but
we were filtering them out.
Fixed eclipse compilation and test execution issues

With the eclipse compiler, AsyncEventListenerDUnitTest was generating a
compilation error about a deserializeLambda method being to large. This
doesn't seem to be a real issue because the javac doesn't have
the same problem. However, by refactoring the test slightly I was able
to make this error go away.

Changed the eclipse classpath to include the generated-resources
directories. These directories contain files like
GemFireVersion.properties that need to be included on the classpath, but
we were filtering them out.
Fixed eclipse compilation and test execution issues

With the eclipse compiler, AsyncEventListenerDUnitTest was generating a
compilation error about a deserializeLambda method being to large. This
doesn't seem to be a real issue because the javac doesn't have
the same problem. However, by refactoring the test slightly I was able
to make this error go away.

Changed the eclipse classpath to include the generated-resources
directories. These directories contain files like
GemFireVersion.properties that need to be included on the classpath, but
we were filtering them out.
Fixed eclipse compilation and test execution issues

With the eclipse compiler, AsyncEventListenerDUnitTest was generating a
compilation error about a deserializeLambda method being to large. This
doesn't seem to be a real issue because the javac doesn't have
the same problem. However, by refactoring the test slightly I was able
to make this error go away.

Changed the eclipse classpath to include the generated-resources
directories. These directories contain files like
GemFireVersion.properties that need to be included on the classpath, but
we were filtering them out.
Fixed eclipse compilation and test execution issues

With the eclipse compiler, AsyncEventListenerDUnitTest was generating a
compilation error about a deserializeLambda method being to large. This
doesn't seem to be a real issue because the javac doesn't have
the same problem. However, by refactoring the test slightly I was able
to make this error go away.

Changed the eclipse classpath to include the generated-resources
directories. These directories contain files like
GemFireVersion.properties that need to be included on the classpath, but
we were filtering them out.
Fixed eclipse compilation and test execution issues

With the eclipse compiler, AsyncEventListenerDUnitTest was generating a
compilation error about a deserializeLambda method being to large. This
doesn't seem to be a real issue because the javac doesn't have
the same problem. However, by refactoring the test slightly I was able
to make this error go away.

Changed the eclipse classpath to include the generated-resources
directories. These directories contain files like
GemFireVersion.properties that need to be included on the classpath, but
we were filtering them out.
Fixed eclipse compilation and test execution issues

With the eclipse compiler, AsyncEventListenerDUnitTest was generating a
compilation error about a deserializeLambda method being to large. This
doesn't seem to be a real issue because the javac doesn't have
the same problem. However, by refactoring the test slightly I was able
to make this error go away.

Changed the eclipse classpath to include the generated-resources
directories. These directories contain files like
GemFireVersion.properties that need to be included on the classpath, but
we were filtering them out.
Fixed eclipse compilation and test execution issues

With the eclipse compiler, AsyncEventListenerDUnitTest was generating a
compilation error about a deserializeLambda method being to large. This
doesn't seem to be a real issue because the javac doesn't have
the same problem. However, by refactoring the test slightly I was able
to make this error go away.

Changed the eclipse classpath to include the generated-resources
directories. These directories contain files like
GemFireVersion.properties that need to be included on the classpath, but
we were filtering them out.
Fixed eclipse compilation and test execution issues

With the eclipse compiler, AsyncEventListenerDUnitTest was generating a
compilation error about a deserializeLambda method being to large. This
doesn't seem to be a real issue because the javac doesn't have
the same problem. However, by refactoring the test slightly I was able
to make this error go away.

Changed the eclipse classpath to include the generated-resources
directories. These directories contain files like
GemFireVersion.properties that need to be included on the classpath, but
we were filtering them out.
Fixed eclipse compilation and test execution issues

With the eclipse compiler, AsyncEventListenerDUnitTest was generating a
compilation error about a deserializeLambda method being to large. This
doesn't seem to be a real issue because the javac doesn't have
the same problem. However, by refactoring the test slightly I was able
to make this error go away.

Changed the eclipse classpath to include the generated-resources
directories. These directories contain files like
GemFireVersion.properties that need to be included on the classpath, but
we were filtering them out.
Fixed eclipse compilation and test execution issues

With the eclipse compiler, AsyncEventListenerDUnitTest was generating a
compilation error about a deserializeLambda method being to large. This
doesn't seem to be a real issue because the javac doesn't have
the same problem. However, by refactoring the test slightly I was able
to make this error go away.

Changed the eclipse classpath to include the generated-resources
directories. These directories contain files like
GemFireVersion.properties that need to be included on the classpath, but
we were filtering them out.
Fixed eclipse compilation and test execution issues

With the eclipse compiler, AsyncEventListenerDUnitTest was generating a
compilation error about a deserializeLambda method being to large. This
doesn't seem to be a real issue because the javac doesn't have
the same problem. However, by refactoring the test slightly I was able
to make this error go away.

Changed the eclipse classpath to include the generated-resources
directories. These directories contain files like
GemFireVersion.properties that need to be included on the classpath, but
we were filtering them out.
Fixed eclipse compilation and test execution issues

With the eclipse compiler, AsyncEventListenerDUnitTest was generating a
compilation error about a deserializeLambda method being to large. This
doesn't seem to be a real issue because the javac doesn't have
the same problem. However, by refactoring the test slightly I was able
to make this error go away.

Changed the eclipse classpath to include the generated-resources
directories. These directories contain files like
GemFireVersion.properties that need to be included on the classpath, but
we were filtering them out.
Fixed eclipse compilation and test execution issues

With the eclipse compiler, AsyncEventListenerDUnitTest was generating a
compilation error about a deserializeLambda method being to large. This
doesn't seem to be a real issue because the javac doesn't have
the same problem. However, by refactoring the test slightly I was able
to make this error go away.

Changed the eclipse classpath to include the generated-resources
directories. These directories contain files like
GemFireVersion.properties that need to be included on the classpath, but
we were filtering them out.
Fixed eclipse compilation and test execution issues

With the eclipse compiler, AsyncEventListenerDUnitTest was generating a
compilation error about a deserializeLambda method being to large. This
doesn't seem to be a real issue because the javac doesn't have
the same problem. However, by refactoring the test slightly I was able
to make this error go away.

Changed the eclipse classpath to include the generated-resources
directories. These directories contain files like
GemFireVersion.properties that need to be included on the classpath, but
we were filtering them out.
Fixed eclipse compilation and test execution issues

With the eclipse compiler, AsyncEventListenerDUnitTest was generating a
compilation error about a deserializeLambda method being to large. This
doesn't seem to be a real issue because the javac doesn't have
the same problem. However, by refactoring the test slightly I was able
to make this error go away.

Changed the eclipse classpath to include the generated-resources
directories. These directories contain files like
GemFireVersion.properties that need to be included on the classpath, but
we were filtering them out.
Fixed eclipse compilation and test execution issues

With the eclipse compiler, AsyncEventListenerDUnitTest was generating a
compilation error about a deserializeLambda method being to large. This
doesn't seem to be a real issue because the javac doesn't have
the same problem. However, by refactoring the test slightly I was able
to make this error go away.

Changed the eclipse classpath to include the generated-resources
directories. These directories contain files like
GemFireVersion.properties that need to be included on the classpath, but
we were filtering them out.
Fixed eclipse compilation and test execution issues

With the eclipse compiler, AsyncEventListenerDUnitTest was generating a
compilation error about a deserializeLambda method being to large. This
doesn't seem to be a real issue because the javac doesn't have
the same problem. However, by refactoring the test slightly I was able
to make this error go away.

Changed the eclipse classpath to include the generated-resources
directories. These directories contain files like
GemFireVersion.properties that need to be included on the classpath, but
we were filtering them out.
Fixed eclipse compilation and test execution issues

With the eclipse compiler, AsyncEventListenerDUnitTest was generating a
compilation error about a deserializeLambda method being to large. This
doesn't seem to be a real issue because the javac doesn't have
the same problem. However, by refactoring the test slightly I was able
to make this error go away.

Changed the eclipse classpath to include the generated-resources
directories. These directories contain files like
GemFireVersion.properties that need to be included on the classpath, but
we were filtering them out.
Fixed eclipse compilation and test execution issues

With the eclipse compiler, AsyncEventListenerDUnitTest was generating a
compilation error about a deserializeLambda method being to large. This
doesn't seem to be a real issue because the javac doesn't have
the same problem. However, by refactoring the test slightly I was able
to make this error go away.

Changed the eclipse classpath to include the generated-resources
directories. These directories contain files like
GemFireVersion.properties that need to be included on the classpath, but
we were filtering them out.
Fixed eclipse compilation and test execution issues

With the eclipse compiler, AsyncEventListenerDUnitTest was generating a
compilation error about a deserializeLambda method being to large. This
doesn't seem to be a real issue because the javac doesn't have
the same problem. However, by refactoring the test slightly I was able
to make this error go away.

Changed the eclipse classpath to include the generated-resources
directories. These directories contain files like
GemFireVersion.properties that need to be included on the classpath, but
we were filtering them out.
Fixed eclipse compilation and test execution issues

With the eclipse compiler, AsyncEventListenerDUnitTest was generating a
compilation error about a deserializeLambda method being to large. This
doesn't seem to be a real issue because the javac doesn't have
the same problem. However, by refactoring the test slightly I was able
to make this error go away.

Changed the eclipse classpath to include the generated-resources
directories. These directories contain files like
GemFireVersion.properties that need to be included on the classpath, but
we were filtering them out.
Fixed eclipse compilation and test execution issues

With the eclipse compiler, AsyncEventListenerDUnitTest was generating a
compilation error about a deserializeLambda method being to large. This
doesn't seem to be a real issue because the javac doesn't have
the same problem. However, by refactoring the test slightly I was able
to make this error go away.

Changed the eclipse classpath to include the generated-resources
directories. These directories contain files like
GemFireVersion.properties that need to be included on the classpath, but
we were filtering them out.
Fixed eclipse compilation and test execution issues

With the eclipse compiler, AsyncEventListenerDUnitTest was generating a
compilation error about a deserializeLambda method being to large. This
doesn't seem to be a real issue because the javac doesn't have
the same problem. However, by refactoring the test slightly I was able
to make this error go away.

Changed the eclipse classpath to include the generated-resources
directories. These directories contain files like
GemFireVersion.properties that need to be included on the classpath, but
we were filtering them out.
Fixed eclipse compilation and test execution issues

With the eclipse compiler, AsyncEventListenerDUnitTest was generating a
compilation error about a deserializeLambda method being to large. This
doesn't seem to be a real issue because the javac doesn't have
the same problem. However, by refactoring the test slightly I was able
to make this error go away.

Changed the eclipse classpath to include the generated-resources
directories. These directories contain files like
GemFireVersion.properties that need to be included on the classpath, but
we were filtering them out.
Fixed eclipse compilation and test execution issues

With the eclipse compiler, AsyncEventListenerDUnitTest was generating a
compilation error about a deserializeLambda method being to large. This
doesn't seem to be a real issue because the javac doesn't have
the same problem. However, by refactoring the test slightly I was able
to make this error go away.

Changed the eclipse classpath to include the generated-resources
directories. These directories contain files like
GemFireVersion.properties that need to be included on the classpath, but
we were filtering them out.
Fixed eclipse compilation and test execution issues

With the eclipse compiler, AsyncEventListenerDUnitTest was generating a
compilation error about a deserializeLambda method being to large. This
doesn't seem to be a real issue because the javac doesn't have
the same problem. However, by refactoring the test slightly I was able
to make this error go away.

Changed the eclipse classpath to include the generated-resources
directories. These directories contain files like
GemFireVersion.properties that need to be included on the classpath, but
we were filtering them out.
Fixed eclipse compilation and test execution issues

With the eclipse compiler, AsyncEventListenerDUnitTest was generating a
compilation error about a deserializeLambda method being to large. This
doesn't seem to be a real issue because the javac doesn't have
the same problem. However, by refactoring the test slightly I was able
to make this error go away.

Changed the eclipse classpath to include the generated-resources
directories. These directories contain files like
GemFireVersion.properties that need to be included on the classpath, but
we were filtering them out.
Fixed eclipse compilation and test execution issues

With the eclipse compiler, AsyncEventListenerDUnitTest was generating a
compilation error about a deserializeLambda method being to large. This
doesn't seem to be a real issue because the javac doesn't have
the same problem. However, by refactoring the test slightly I was able
to make this error go away.

Changed the eclipse classpath to include the generated-resources
directories. These directories contain files like
GemFireVersion.properties that need to be included on the classpath, but
we were filtering them out.
Fixed eclipse compilation and test execution issues

With the eclipse compiler, AsyncEventListenerDUnitTest was generating a
compilation error about a deserializeLambda method being to large. This
doesn't seem to be a real issue because the javac doesn't have
the same problem. However, by refactoring the test slightly I was able
to make this error go away.

Changed the eclipse classpath to include the generated-resources
directories. These directories contain files like
GemFireVersion.properties that need to be included on the classpath, but
we were filtering them out.
Fixed eclipse compilation and test execution issues

With the eclipse compiler, AsyncEventListenerDUnitTest was generating a
compilation error about a deserializeLambda method being to large. This
doesn't seem to be a real issue because the javac doesn't have
the same problem. However, by refactoring the test slightly I was able
to make this error go away.

Changed the eclipse classpath to include the generated-resources
directories. These directories contain files like
GemFireVersion.properties that need to be included on the classpath, but
we were filtering them out.
Fixed eclipse compilation and test execution issues

With the eclipse compiler, AsyncEventListenerDUnitTest was generating a
compilation error about a deserializeLambda method being to large. This
doesn't seem to be a real issue because the javac doesn't have
the same problem. However, by refactoring the test slightly I was able
to make this error go away.

Changed the eclipse classpath to include the generated-resources
directories. These directories contain files like
GemFireVersion.properties that need to be included on the classpath, but
we were filtering them out.
Fixed eclipse compilation and test execution issues

With the eclipse compiler, AsyncEventListenerDUnitTest was generating a
compilation error about a deserializeLambda method being to large. This
doesn't seem to be a real issue because the javac doesn't have
the same problem. However, by refactoring the test slightly I was able
to make this error go away.

Changed the eclipse classpath to include the generated-resources
directories. These directories contain files like
GemFireVersion.properties that need to be included on the classpath, but
we were filtering them out.
Fixed eclipse compilation and test execution issues

With the eclipse compiler, AsyncEventListenerDUnitTest was generating a
compilation error about a deserializeLambda method being to large. This
doesn't seem to be a real issue because the javac doesn't have
the same problem. However, by refactoring the test slightly I was able
to make this error go away.

Changed the eclipse classpath to include the generated-resources
directories. These directories contain files like
GemFireVersion.properties that need to be included on the classpath, but
we were filtering them out.
Fixed eclipse compilation and test execution issues

With the eclipse compiler, AsyncEventListenerDUnitTest was generating a
compilation error about a deserializeLambda method being to large. This
doesn't seem to be a real issue because the javac doesn't have
the same problem. However, by refactoring the test slightly I was able
to make this error go away.

Changed the eclipse classpath to include the generated-resources
directories. These directories contain files like
GemFireVersion.properties that need to be included on the classpath, but
we were filtering them out.
Fixed eclipse compilation and test execution issues

With the eclipse compiler, AsyncEventListenerDUnitTest was generating a
compilation error about a deserializeLambda method being to large. This
doesn't seem to be a real issue because the javac doesn't have
the same problem. However, by refactoring the test slightly I was able
to make this error go away.

Changed the eclipse classpath to include the generated-resources
directories. These directories contain files like
GemFireVersion.properties that need to be included on the classpath, but
we were filtering them out.
Fixed eclipse compilation and test execution issues

With the eclipse compiler, AsyncEventListenerDUnitTest was generating a
compilation error about a deserializeLambda method being to large. This
doesn't seem to be a real issue because the javac doesn't have
the same problem. However, by refactoring the test slightly I was able
to make this error go away.

Changed the eclipse classpath to include the generated-resources
directories. These directories contain files like
GemFireVersion.properties that need to be included on the classpath, but
we were filtering them out.
Fixed eclipse compilation and test execution issues

With the eclipse compiler, AsyncEventListenerDUnitTest was generating a
compilation error about a deserializeLambda method being to large. This
doesn't seem to be a real issue because the javac doesn't have
the same problem. However, by refactoring the test slightly I was able
to make this error go away.

Changed the eclipse classpath to include the generated-resources
directories. These directories contain files like
GemFireVersion.properties that need to be included on the classpath, but
we were filtering them out.
Fixed eclipse compilation and test execution issues

With the eclipse compiler, AsyncEventListenerDUnitTest was generating a
compilation error about a deserializeLambda method being to large. This
doesn't seem to be a real issue because the javac doesn't have
the same problem. However, by refactoring the test slightly I was able
to make this error go away.

Changed the eclipse classpath to include the generated-resources
directories. These directories contain files like
GemFireVersion.properties that need to be included on the classpath, but
we were filtering them out.
GEODE-420: Bug fixes from precheckin
GEODE-1810: WAN locator exchange doesn't include hostname-for-clients if it is set

While exchanging locators, DistributionLocatorID will be constructed
using hostNameforClients. It looks like this was happening if an
embedded locator was started using the start-locator distributed system
property, but not for any other case.

Adding a test that we actually send the hostname for clients to remote
locators.
GEODE-1066: Replaced WaitCriterion with Awaitility

	* Awaitility is used
	* Correct order of creation of caches/regions/senders/recievers
GEODE-1066: Replaced WaitCriterion with Awaitility

	* Awaitility is used
	* Correct order of creation of caches/regions/senders/recievers
GEODE-1648: Introduce security-enabled-components and tests
GEODE-1598: fix auto-completion problems by telling jopt that all options are optional

Spring shell, jopt-simple and Geode GFSH code all duplicated the concept of required options. jopt-simple can be blind to this, which prevents OptionParser.parse from throwing an Exception when a required option is missing at time of hitting tab for auto-complete. This allows OptionParser to return an OptionSet containing all detected options which is necessary for auto-completion to behave correctly.

This closes #195
GEODE-1598: fix auto-completion problems by telling jopt that all options are optional

Spring shell, jopt-simple and Geode GFSH code all duplicated the concept of required options. jopt-simple can be blind to this, which prevents OptionParser.parse from throwing an Exception when a required option is missing at time of hitting tab for auto-complete. This allows OptionParser to return an OptionSet containing all detected options which is necessary for auto-completion to behave correctly.

This closes #195
Fixed GetAll and tests
GEODE-11 Added the findKeys method to LuceneQuery

Added the findKeys method to LuceneQuery that returns the list of keys. Added
unit and intergration to test findKeys. Added an integration test for
pagination.
GEODE-1571: rearrange test and clean up log messages
Clear Region - fixed test
GEODE-1422: Removing check to skip enqueuing temp events

This check was performed outside of synchronizing on the lock, which
means that some events could be added to the temp events after the
check. This caused the test to fail due to temp events being left in the
map.

Also, fixing two race conditions in testParallelPropagationSenderStartAfterStop_Scenario2

1) It did some puts and stopped the sender without waiting for the
puts to complete. So they may not be available on the remote side

2) It started some puts asynchronously, and then started the sender
later. The puts performed before the sender started may not be present
on the remote side.
GEODE-1422: Removing check to skip enqueuing temp events

This check was performed outside of synchronizing on the lock, which
means that some events could be added to the temp events after the
check. This caused the test to fail due to temp events being left in the
map.

Also, fixing two race conditions in testParallelPropagationSenderStartAfterStop_Scenario2

1) It did some puts and stopped the sender without waiting for the
puts to complete. So they may not be available on the remote side

2) It started some puts asynchronously, and then started the sender
later. The puts performed before the sender started may not be present
on the remote side.
GEODE-1367: Reverted test for LocatorLauncherAssemblyIntegrationTest.java.
GEODE-1146: Cleaned up QueryUsingPoolDUnitTest.java to use proper client caches.
Added client specific properties for JUnit4CacheTestCase.java
GEODE-1146: Cleaned up QueryUsingPoolDUnitTest.java to use proper client caches.
Added client specific properties for JUnit4CacheTestCase.java
GEODE-1146: Cleaned up QueryUsingPoolDUnitTest.java to use proper client caches.
Added client specific properties for JUnit4CacheTestCase.java
GEODE-1146: Cleaned up QueryUsingPoolDUnitTest.java to use proper client caches.
Added client specific properties for JUnit4CacheTestCase.java
GEODE-1146: Cleaned up QueryUsingPoolDUnitTest.java to use proper client caches.
Added client specific properties for JUnit4CacheTestCase.java
GEODE-17: add regionName in some of the commands authorization
GEODE-1351: let the waitForFlush() to return false if timeout

also apply it on some unit tests.
GEODE-1351: let the waitForFlush() to return false if timeout

also apply it on some unit tests.
GEODE-1351: let the waitForFlush() to return false if timeout

also apply it on some unit tests.
GEODE-1351: let the waitForFlush() to return false if timeout

also apply it on some unit tests.
GEODE-1262: Removed VM5-VM7 in AsyncEventQueueTestBase

* Refactored all the test cases to use lower numbered VMs
* VM5-VM7 were unused hence removed from AsyncEventQueueTestBase

This closes #137
GEODE-1262: Removed VM5-VM7 in AsyncEventQueueTestBase

* Refactored all the test cases to use lower numbered VMs
* VM5-VM7 were unused hence removed from AsyncEventQueueTestBase

This closes #137
GEODE-1262: Removed VM5-VM7 in AsyncEventQueueTestBase

* Refactored all the test cases to use lower numbered VMs
* VM5-VM7 were unused hence removed from AsyncEventQueueTestBase

This closes #137
GEODE-1262: Removed VM5-VM7 in AsyncEventQueueTestBase

* Refactored all the test cases to use lower numbered VMs
* VM5-VM7 were unused hence removed from AsyncEventQueueTestBase

This closes #137
GEODE-1262: Removed VM5-VM7 in AsyncEventQueueTestBase

* Refactored all the test cases to use lower numbered VMs
* VM5-VM7 were unused hence removed from AsyncEventQueueTestBase

This closes #137
GEODE-1237 remove the check for network-partition-detection uniformity

Each member now determines whether to force shutdown due to loss of quorum.
They also decide whether locators are preferred as membership coordinators.
This primarily meant removing the method GMSJoinLeave
.inheritSettingsFromLocator() but the ID settings needed to be made in
other places (JGroupsMessenger.establishLocalAddress() and
GMSJoinLeave.started()).

I also noticed that some of the code was still using "splitBrain" and
"SB" instead of networkPartitionDetection and "NPD" and fixed that.

One test had to be removed from LocatorDUnitTest and a couple of others
needed to be adjusted to have all of the members set network-partition
-detection-enabled=true.  Precheckin is running and I'll fix any other
tests that have this problem.
HADOOP-17483. Magic committer is enabled by default. (#2656)


* core-default.xml updated so that fs.s3a.committer.magic.enabled = true
* CommitConstants updated to match
* All tests which previously enabled the magic committer now rely on
  default settings. This helps make sure it is enabled.
* Docs cover the switch, mention its enabled and explain why you may
  want to disable it.
Note: this doesn't switch to using the committer -it just enables the path
rewriting magic which it depends on.

Contributed by Steve Loughran.

YARN-10525. Add weight mode conversion to fs2cs. Contributed by Peter Bacsko
HADOOP-17408. Optimize NetworkTopology sorting block locations. (#2601). Contributed by Ahmed Hussein and Daryn Sharp.

HADOOP-17408. Optimize NetworkTopology sorting block locations. (#2601). Contributed by Ahmed Hussein and Daryn Sharp.

HADOOP-17271. S3A connector to support IOStatistics. (#2580)


S3A connector to support the IOStatistics API of HADOOP-16830,

This is a major rework of the S3A Statistics collection to

* Embrace the IOStatistics APIs
* Move from direct references of S3AInstrumention statistics
  collectors to interface/implementation classes in new packages.
* Ubiquitous support of IOStatistics, including:
  S3AFileSystem, input and output streams, RemoteIterator instances
  provided in list calls.
* Adoption of new statistic names from hadoop-common

Regarding statistic collection, as well as all existing
statistics, the connector now records min/max/mean durations
of HTTP GET and HEAD requests, and those of LIST operations.

Contributed by Steve Loughran.
HADOOP-17271. S3A connector to support IOStatistics. (#2580)


S3A connector to support the IOStatistics API of HADOOP-16830,

This is a major rework of the S3A Statistics collection to

* Embrace the IOStatistics APIs
* Move from direct references of S3AInstrumention statistics
  collectors to interface/implementation classes in new packages.
* Ubiquitous support of IOStatistics, including:
  S3AFileSystem, input and output streams, RemoteIterator instances
  provided in list calls.
* Adoption of new statistic names from hadoop-common

Regarding statistic collection, as well as all existing
statistics, the connector now records min/max/mean durations
of HTTP GET and HEAD requests, and those of LIST operations.

Contributed by Steve Loughran.
HADOOP-17244. S3A directory delete tombstones dir markers prematurely. (#2310)

This fixes the S3Guard/Directory Marker Retention integration so that when
fs.s3a.directory.marker.retention=keep, failures during multipart delete
are handled correctly, as are incremental deletes during
directory tree operations.

In both cases, when a directory marker with children is deleted from
S3, the directory entry in S3Guard is not deleted, because it is still
critical to representing the structure of the store.

Contributed by Steve Loughran.

Change-Id: I4ca133a23ea582cd42ec35dbf2dc85b286297d2f
YARN-10413. Change fs2cs to generate mapping rules in the new format. Contributed by Peter Bacsko
HADOOP-13230. S3A to optionally retain directory markers.

This adds an option to disable "empty directory" marker deletion,
so avoid throttling and other scale problems.

This feature is *not* backwards compatible.
Consult the documentation and use with care.

Contributed by Steve Loughran.

Change-Id: I69a61e7584dc36e485d5e39ff25b1e3e559a1958
HADOOP-13230. S3A to optionally retain directory markers.

This adds an option to disable "empty directory" marker deletion,
so avoid throttling and other scale problems.

This feature is *not* backwards compatible.
Consult the documentation and use with care.

Contributed by Steve Loughran.

Change-Id: I69a61e7584dc36e485d5e39ff25b1e3e559a1958
HADOOP-13230. S3A to optionally retain directory markers.

This adds an option to disable "empty directory" marker deletion,
so avoid throttling and other scale problems.

This feature is *not* backwards compatible.
Consult the documentation and use with care.

Contributed by Steve Loughran.

Change-Id: I69a61e7584dc36e485d5e39ff25b1e3e559a1958
HADOOP-13230. S3A to optionally retain directory markers.

This adds an option to disable "empty directory" marker deletion,
so avoid throttling and other scale problems.

This feature is *not* backwards compatible.
Consult the documentation and use with care.

Contributed by Steve Loughran.

Change-Id: I69a61e7584dc36e485d5e39ff25b1e3e559a1958
HADOOP-13230. S3A to optionally retain directory markers.

This adds an option to disable "empty directory" marker deletion,
so avoid throttling and other scale problems.

This feature is *not* backwards compatible.
Consult the documentation and use with care.

Contributed by Steve Loughran.

Change-Id: I69a61e7584dc36e485d5e39ff25b1e3e559a1958
HADOOP-13230. S3A to optionally retain directory markers.

This adds an option to disable "empty directory" marker deletion,
so avoid throttling and other scale problems.

This feature is *not* backwards compatible.
Consult the documentation and use with care.

Contributed by Steve Loughran.

Change-Id: I69a61e7584dc36e485d5e39ff25b1e3e559a1958
HADOOP-13230. S3A to optionally retain directory markers.

This adds an option to disable "empty directory" marker deletion,
so avoid throttling and other scale problems.

This feature is *not* backwards compatible.
Consult the documentation and use with care.

Contributed by Steve Loughran.

Change-Id: I69a61e7584dc36e485d5e39ff25b1e3e559a1958
HADOOP-13230. S3A to optionally retain directory markers.

This adds an option to disable "empty directory" marker deletion,
so avoid throttling and other scale problems.

This feature is *not* backwards compatible.
Consult the documentation and use with care.

Contributed by Steve Loughran.

Change-Id: I69a61e7584dc36e485d5e39ff25b1e3e559a1958
HADOOP-13230. S3A to optionally retain directory markers.

This adds an option to disable "empty directory" marker deletion,
so avoid throttling and other scale problems.

This feature is *not* backwards compatible.
Consult the documentation and use with care.

Contributed by Steve Loughran.

Change-Id: I69a61e7584dc36e485d5e39ff25b1e3e559a1958
YARN-10316. FS-CS converter: convert maxAppsDefault, maxRunningApps settings. Contributed by Peter Bacsko
YARN-10316. FS-CS converter: convert maxAppsDefault, maxRunningApps settings. Contributed by Peter Bacsko
HDFS-15285. The same distance and load nodes don't shuffle when consider DataNode load. Contributed by Lisheng Sun.
YARN-9848. Revert YARN-4946. Contributed by Steven Rand.
HADOOP-16730: ABFS: Support for Shared Access Signatures (SAS). Contributed by Sneha Vijayarajan.
HADOOP-16730: ABFS: Support for Shared Access Signatures (SAS). Contributed by Sneha Vijayarajan.
HADOOP-16730: ABFS: Support for Shared Access Signatures (SAS). Contributed by Sneha Vijayarajan.
HADOOP-16730: ABFS: Support for Shared Access Signatures (SAS). Contributed by Sneha Vijayarajan.
HADOOP-16730: ABFS: Support for Shared Access Signatures (SAS). Contributed by Sneha Vijayarajan.
HADOOP-16730: ABFS: Support for Shared Access Signatures (SAS). Contributed by Sneha Vijayarajan.
HADOOP-16730: ABFS: Support for Shared Access Signatures (SAS). Contributed by Sneha Vijayarajan.
HADOOP-16730: ABFS: Support for Shared Access Signatures (SAS). Contributed by Sneha Vijayarajan.
YARN-5106. Provide a builder interface for FairScheduler allocations for use in tests. Contributed by Adam Antal
HDDS-2238. Container Data Scrubber spams log in empty cluster

Signed-off-by: Anu Engineer <aengineer@apache.org>
HDDS-2238. Container Data Scrubber spams log in empty cluster

Signed-off-by: Anu Engineer <aengineer@apache.org>
HDDS-2238. Container Data Scrubber spams log in empty cluster

Signed-off-by: Anu Engineer <aengineer@apache.org>
HDDS-2238. Container Data Scrubber spams log in empty cluster

Signed-off-by: Anu Engineer <aengineer@apache.org>
HDDS-2020. Remove mTLS from Ozone GRPC. Contributed by Xiaoyu Yao.

Signed-off-by: Anu Engineer <aengineer@apache.org>
HDDS-1054. List Multipart uploads in a bucket (#1277)

HADOOP-16430. S3AFilesystem.delete to incrementally update s3guard with deletions

Contributed by Steve Loughran.

This overlaps the scanning for directory entries with batched calls to S3 DELETE and updates of the S3Guard tables.
It also uses S3Guard to list the files to delete, so find newly created files even when S3 listings are not use consistent.

For path which the client considers S3Guard to be authoritative, we also do a recursive LIST of the store and delete files; this is to find unindexed files and do guarantee that the delete(path, true) call really does delete everything underneath.

Change-Id: Ice2f6e940c506e0b3a78fa534a99721b1698708e
HDDS-2079. Fix TestSecureOzoneManager. Contributed by Xiaoyu Yao. (#1400)

HDDS-2079. Fix TestSecureOzoneManager. Contributed by Xiaoyu Yao. (#1400)

HDDS-2079. Fix TestSecureOzoneManager. Contributed by Xiaoyu Yao. (#1400)

HDDS-2079. Fix TestSecureOzoneManager. Contributed by Xiaoyu Yao. (#1400)

HDDS-2079. Fix TestSecureOzoneManager. Contributed by Xiaoyu Yao. (#1400)

HDDS-1927. Consolidate add/remove Acl into OzoneAclUtil class. Contributed by Xiaoyu Yao.

Signed-off-by: Anu Engineer <aengineer@apache.org>
HDDS-1927. Consolidate add/remove Acl into OzoneAclUtil class. Contributed by Xiaoyu Yao.

Signed-off-by: Anu Engineer <aengineer@apache.org>
HDDS-1913. Fix OzoneBucket and RpcClient APIS for acl. (#1257)

HDDS-1785. OOM error in Freon due to the concurrency handling

Closes #1085
HDDS-1544. Support default Acls for volume, bucket, keys and prefix. Contributed by Ajay Kumar, Xiaoyu Yao.

Signed-off-by: Anu Engineer <aengineer@apache.org>
HDDS-1611. Evaluate ACL on volume bucket key and prefix to authorize access. Contributed by Ajay Kumar. (#973)

HDDS-1611. Evaluate ACL on volume bucket key and prefix to authorize access. Contributed by Ajay Kumar. (#973)

HDDS-1611. Evaluate ACL on volume bucket key and prefix to authorize access. Contributed by Ajay Kumar. (#973)

HDDS-1611. Evaluate ACL on volume bucket key and prefix to authorize access. Contributed by Ajay Kumar. (#973)

HDDS-1611. Evaluate ACL on volume bucket key and prefix to authorize access. Contributed by Ajay Kumar. (#973)

HDDS-1611. Evaluate ACL on volume bucket key and prefix to authorize access. Contributed by Ajay Kumar. (#973)

HADOOP-15183. S3Guard store becomes inconsistent after partial failure of rename.

Contributed by Steve Loughran.

Change-Id: I825b0bc36be960475d2d259b1cdab45ae1bb78eb
HDDS-1541. Implement addAcl,removeAcl,setAcl,getAcl for Key. Contributed by Ajay Kumat. (#885)


HDDS-1539. Implement addAcl,removeAcl,setAcl,getAcl for Volume. Contributed Ajay Kumar. (#847)


HADOOP-16085. S3Guard: use object version or etags to protect against inconsistent read after replace/overwrite.

Contributed by Ben Roling.

S3Guard will now track the etag of uploaded files and, if an S3
bucket is versioned, the object version.

You can then control how to react to a mismatch between the data
in the DynamoDB table and that in the store: warn, fail, or, when
using versions, return the original value.

This adds two new columns to the table: etag and version.
This is transparent to older S3A clients -but when such clients
add/update data to the S3Guard table, they will not add these values.
As a result, the etag/version checks will not work with files uploaded by older clients.

For a consistent experience, upgrade all clients to use the latest hadoop version.
HADOOP-16085. S3Guard: use object version or etags to protect against inconsistent read after replace/overwrite.

Contributed by Ben Roling.

S3Guard will now track the etag of uploaded files and, if an S3
bucket is versioned, the object version.

You can then control how to react to a mismatch between the data
in the DynamoDB table and that in the store: warn, fail, or, when
using versions, return the original value.

This adds two new columns to the table: etag and version.
This is transparent to older S3A clients -but when such clients
add/update data to the S3Guard table, they will not add these values.
As a result, the etag/version checks will not work with files uploaded by older clients.

For a consistent experience, upgrade all clients to use the latest hadoop version.
HDDS-1368. Cleanup old ReplicationManager code from SCM.
HDDS-1368. Cleanup old ReplicationManager code from SCM.
HDDS-1348. Refactor BlockOutpuStream Class. Contributed by Shashikant Banerjee.
HDDS-1211. Test SCMChillMode failing randomly in Jenkins run (#543)

HDDS-1211. Test SCMChillMode failing randomly in Jenkins run (#543)

HDDS-1211. Test SCMChillMode failing randomly in Jenkins run (#543)

HDDS-1211. Test SCMChillMode failing randomly in Jenkins run (#543)

 HDDS-1119. DN get OM certificate from SCM CA for block token validation. Contributed by Ajay Kumar. (#601)

HDDS-1209. Fix the block allocation logic in SCM when client wants to exclude all available open containers in a chosen pipeline.

Signed-off-by: Nanda kumar <nanda@apache.org>
HDDS-1173. Fix a data corruption bug in BlockOutputStream. Contributed by Shashikant Banerjee.
HDDS-1173. Fix a data corruption bug in BlockOutputStream. Contributed by Shashikant Banerjee.
HDDS-726. Ozone Client should update SCM to move the container out of allocation path in case a write transaction fails. Contributed by Shashikant Banerjee.
HDDS-360. Use RocksDBStore and TableStore for SCM Metadata.
Contributed by Anu Engineer.
HDDS-360. Use RocksDBStore and TableStore for SCM Metadata.
Contributed by Anu Engineer.
HDDS-360. Use RocksDBStore and TableStore for SCM Metadata.
Contributed by Anu Engineer.
HDDS-974. Add getServiceAddress method to ServiceInfo and use it in TestOzoneShell. Contributed by Doroszlai, Attila.
HDDS-991. Fix failures in TestSecureOzoneCluster. Contributed by Ajay Kumar.
HDDS-5. Enable OzoneManager kerberos auth. Contributed by Ajay Kumar.
HDDS-5. Enable OzoneManager kerberos auth. Contributed by Ajay Kumar.
HADOOP-14556. S3A to support Delegation Tokens.

Contributed by Steve Loughran and Daryn Sharp.
HADOOP-14556. S3A to support Delegation Tokens.

Contributed by Steve Loughran.
HDFS-13779. [SBN read] Implement proper failover and observer failure handling logic for for ObserverReadProxyProvider. Contributed by Erik Krogen.
HDDS-870. Avoid creating block sized buffer in ChunkGroupOutputStream. Contributed by Shashikant Banerjee.
HDDS-850. ReadStateMachineData hits OverlappingFileLockException in ContainerStateMachine. Contributed by Shashikant Banerjee.
HDDS-850. ReadStateMachineData hits OverlappingFileLockException in ContainerStateMachine. Contributed by Shashikant Banerjee.
HDDS-850. ReadStateMachineData hits OverlappingFileLockException in ContainerStateMachine. Contributed by Shashikant Banerjee.
HDDS-791. Support Range header for ozone s3 object download. Contributed by Bharat Viswanadham.
HDDS-825. Code cleanup based on messages from ErrorProne.
Contributed by Anu Engineer.
HDDS-737. Introduce Incremental Container Report.
Contributed by Nanda kumar.
HDDS-662. Introduce ContainerReplicaState in StorageContainerManager. Contributed by Nanda kumar.
HDDS-662. Introduce ContainerReplicaState in StorageContainerManager. Contributed by Nanda kumar.
HDDS-662. Introduce ContainerReplicaState in StorageContainerManager. Contributed by Nanda kumar.
HADOOP-15744. AbstractContractAppendTest fails against HDFS on HADOOP-15407 branch.
Contributed by Steve Loughran.
HADOOP-15744. AbstractContractAppendTest fails against HDFS on HADOOP-15407 branch.
Contributed by Steve Loughran.
HADOOP-15426 Make S3guard client resilient to DDB throttle events and network failures (Contributed by Steve Loughran)
HADOOP-15426 Make S3guard client resilient to DDB throttle events and network failures (Contributed by Steve Loughran)
HADOOP-15426 Make S3guard client resilient to DDB throttle events and network failures (Contributed by Steve Loughran)
HADOOP-15426 Make S3guard client resilient to DDB throttle events and network failures (Contributed by Steve Loughran)
HDDS-297. Add pipeline actions in Ozone.  Contributed by Mukul Kumar Singh and Shashikant Banerjee
HDFS-12911. [SPS]: Modularize the SPS code and expose necessary interfaces for external/internal implementations. Contributed by Uma Maheswara Rao G
HDDS-230. ContainerStateMachine should implement readStateMachineData api to read data from Containers if required during replication. Contributed by Mukul Kumar Singh.
HDDS-288. Fix bugs in OpenContainerBlockMap. Contributed by Tsz Wo Nicholas Sze.
HDDS-257. Hook up VolumeSet#shutdown from HddsDispatcher#shutdown. Contributed by Hanisha Koneru
HDDS-213. Single lock to synchronize KeyValueContainer#update.
HDDS-212. Introduce NodeStateManager to manage the state of Datanodes in SCM. Contributed by Nanda kumar.
HDDS-212. Introduce NodeStateManager to manage the state of Datanodes in SCM. Contributed by Nanda kumar.
HDDS-212. Introduce NodeStateManager to manage the state of Datanodes in SCM. Contributed by Nanda kumar.
HDDS-212. Introduce NodeStateManager to manage the state of Datanodes in SCM. Contributed by Nanda kumar.
HDDS-212. Introduce NodeStateManager to manage the state of Datanodes in SCM. Contributed by Nanda kumar.
HDDS-212. Introduce NodeStateManager to manage the state of Datanodes in SCM. Contributed by Nanda kumar.
HDDS-212. Introduce NodeStateManager to manage the state of Datanodes in SCM. Contributed by Nanda kumar.
HDDS-212. Introduce NodeStateManager to manage the state of Datanodes in SCM. Contributed by Nanda kumar.
HADOOP-15551. Avoid use of Arrays.stream in Configuration.addTags
HADOOP-15551. Avoid use of Arrays.stream in Configuration.addTags
HADOOP-15551. Avoid use of Arrays.stream in Configuration.addTags
HADOOP-15551. Avoid use of Arrays.stream in Configuration.addTags
YARN-6677. Preempt opportunistic containers when root container cgroup goes over memory limit. Contributed by Haibo Chen.
YARN-6677. Preempt opportunistic containers when root container cgroup goes over memory limit. Contributed by Haibo Chen.
HADOOP-15469. S3A directory committer commit job fails if _temporary directory created under dest.
Contributed by Steve Loughran.

(cherry picked from commit 170f1040d46f9b1a084e6637def91e9864446acc)
HDDS-13. Refactor StorageContainerManager into seperate RPC endpoints. Contributed by Anu Engineer.
HDFS-12522. Ozone: Remove the Priority Queues used in the Container State Manager. Contributed by Anu Engineer.
HDFS-12522. Ozone: Remove the Priority Queues used in the Container State Manager. Contributed by Anu Engineer.
HDFS-12853. Ozone: Optimize chunk writes for Ratis by avoiding double writes.  Contributed by Mukul Kumar Singh
HDFS-12853. Ozone: Optimize chunk writes for Ratis by avoiding double writes.  Contributed by Mukul Kumar Singh
HDFS-12673. Ozone: Log elapsed time for block deletion tasks. Contributed by Yiqun Lin.
HDFS-12329. Ozone: Ratis: Readonly calls in XceiverClientRatis should use sendReadOnly. Contributed by Mukul Kumar Singh.
HDFS-11865. Ozone: Do not initialize Ratis cluster during datanode startup.
HDFS-11778. Ozone: KSM: add getBucketInfo. Contributed by Nandakumar Vadivelu.
HDFS-11778. Ozone: KSM: add getBucketInfo. Contributed by Nandakumar Vadivelu.
HDFS-11843. Ozone: XceiverClientRatis should implement XceiverClientSpi.connect().
HDFS-11469. Ozone: SCM: Container allocation based on node report. Contributed by Xiaoyu Yao.
HDFS-11484. Ozone: Fix flaky TestNodeManager#testScmNodeReportUpdate. Contributed by Xiaoyu Yao.
YARN-8018.  Added support for initiating yarn service upgrade.
            Contributed by Chandni Singh
HDFS-12912. [READ] Fix configuration and implementation of LevelDB-based alias maps
HDFS-12448. Make sure user defined erasure coding policy ID will not overflow. Contributed by Huafeng Wang
HBASE-25126 Add load balance logic in hbase-client to distribute read load over meta replica regions

It adds load balance support for meta lookup in AsyncTableRegionLocator.
The existing meta replica mode is renamed as "HedgedRead", client sends scan request to the primary meta replica region first,
if response is not back within a configured amount of time, it will send scan requests to all meta replica regions and
take the first response. On top of the existing mode, a new mode "LoadBalance" is introduced. In this mode, client first
choose a meta replica region to send scan request. If the response is stale, it may send the request to another meta replica region or
the primary region. In this mode, meta scan requests are load balanced across all replica regions with the primary mode as
the ultimate source of truth.

Two new config knobs are added:

1. hbase.locator.meta.replicas.mode
   Valid options are "None", "HedgedRead" and "LoadBalance", they are case insensitive. The default mode is "None".

2. hbase.locator.meta.replicas.mode.loadbalance.selector
   The load balance alogrithm to select a meta replica to send the requests.
   Only org.apache.hadoop.hbase.client.CatalogReplicaLoadBalanceReplicaSimpleSelector.class
   is supported for now, which is the default as well. The algorithm works as follows:
      a. Clients select a randome meta replica region to send the requests if there is no entry for the location in the stale
         location cache.
      b. If the location from one meta replica region is stale, a stale entry will be created in the statle location cache
         for the region.
      c. Clients select the primary meta region if the location is in the stale location cache.
      d. The stale location cache entries time out in 3 seconds.

If there is no "hbase.locator.meta.replicas.mode" configured, it will check the config knob "hbase.meta.replicas.use".
If "hbase.meta.replicas.use" is configured, the mode will be set to "HedgedRead".
HBASE-25055 Add ReplicationSource for meta WALs; add enable/disable w… (#2451)

* HBASE-25055 Add ReplicationSource for meta WALs; add enable/disable when hbase:meta assigned to RS

Fill in gap left by HBASE-11183 'Timeline Consistent region replicas - Phase 2 design'.
HBASE-11183 left off implementing 'async WAL Replication' on the hbase:meta
Table; hbase:meta Table could only do Phase 1 Region Replicas reading
the primary Regions' hfiles. Here we add 'async WAL Replication' to
hbase:meta so Replicas can be more current with the primary's changes.

Adds a 'special' ReplicationSource that reads hbase:meta WAL files and replicates
all edits to the configured in-cluster endpoint (Defaults to the
RegionReadReplicaEndpoint.class -- set hbase.region.replica.catalog.replication to
target a different endpoint implementation).

Set hbase.region.replica.replication.catalog.enabled to enable async WAL
Replication for hbase:meta region replicas. Its off by default.

The CatalogReplicationSource for async WAL Replication of hbase:meta does
NOT need to keep up WAL offset or a queue of WALs-to-replicate in the
replication queue store as is done in other ReplicationSource implementations;
the CatalogReplicationSource is for Region Replicas only. General
Replication does not replicate hbase:meta. hbase:meta Region Replicas reset
on crash of the primary replica so there is no need to 'recover'
replication that was running on the crashed server.

Because it so different in operation, the CatalogReplicationSource is bolted
on to the side of the ReplicationSourceManager. It is lazily
instantiated to match the lazy instantiation of the hbase:meta
WALProvider, created and started on the open of the first Region of an
hbase:meta table. Thereafter it stays up till the process dies, even if
all hbase:meta Regions have moved off the server, in case a hbase:meta
Region is moved back (Doing this latter simplifies the implementation)

hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java
  Read configuration to see if we need to wait on setting a Region read-enabled
  (if so, replicas will only flip to enable read after confirming a
  flush of the primary so they for sure are a replica of a known point)

hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/handler/AssignRegionHandler.java
 If configured, on open of hbase:meta, ask the ReplicationSourceManager
 to add a ReplicationSource (if it hasn't already).

hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/handler/RegionReplicaFlushHandler.java
 Edit log message.

hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/handler/UnassignRegionHandler.java
 If configured, on close of hbase:meta, update ReplicationSourceManager
 that a source Region has closed.

hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceFactory.java
 javadoc and make constructor private.

hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceInterface.java
 Add logPositionAndCleanOldLogs w/ default of the old behavior so
 CatalogReplicationSource can bypass updating store with WAL position,
 etc.

hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceManager.java
 Add creation and start of an CatalogReplicationSource.

hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceShipper.java
 Go via ReplicationSource when calling logPostionAndCleanOldLogs so new RS can intercept.

hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/WALFileLengthProvider.java
 Javadoc.

hbase-server/src/main/java/org/apache/hadoop/hbase/util/ServerRegionReplicaUtil.java
 Add utility for reading configurations for hbase:meta region replicas.

hbase-server/src/main/java/org/apache/hadoop/hbase/wal/WALFactory.java
 Javadoc.

hbase-server/src/test/java/org/apache/hadoop/hbase/replication/regionserver/TestRegionReplicaReplicationEndpoint.java
 Use define.

hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/CatalogReplicationSource.java
 Specical version of ReplicationSource for Region Replicas on hbase:meta.

hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/CatalogReplicationSourcePeer.java
 Needs a special peer too (peers are baked into replication though we don't use 'peers' here)

hbase-server/src/test/java/org/apache/hadoop/hbase/replication/regionserver/TestMetaRegionReplicaReplicationEndpoint.java
hbase-server/src/test/java/org/apache/hadoop/hbase/wal/TestWALProvider.java
 Tests.

Signed-off-by: Duo Zhang <zhangduo@apache.org>
Signed-off-by: Huaxiang Sun <huaxiangsun@apache.com>HBASE-25216 The client zk syncer should deal with meta replica count change (#2614)

Signed-off-by: Yu Li <liyu@apache.org>HBASE-25164 Make ModifyTableProcedure support changing meta replica count (#2513)

Signed-off-by: Michael Stack <stack@apache.org>HBASE-25103 Remove ZNodePaths.metaReplicaZNodes (#2464)

Signed-off-by: Huaxiang Sun <huaxiangsun@apache.com>HBASE-25103 Remove ZNodePaths.metaReplicaZNodes (#2464)

Signed-off-by: Huaxiang Sun <huaxiangsun@apache.com>HBASE-24821 simplify the logic of getRegionInfo in TestFlushFromClient to reduce redundancy code

Closes #2200

Signed-off-by: Viraj Jasani <vjasani@apache.org>
HBASE-24821 simplify the logic of getRegionInfo in TestFlushFromClient to reduce redundancy code

Closes #2200

Signed-off-by: Viraj Jasani <vjasani@apache.org>
HBASE-24586 Add table level locality in table.jsp

Closes #1926

Signed-off-by: Viraj Jasani <vjasani@apache.org>
HBASE-24586 Add table level locality in table.jsp

Closes #1926

Signed-off-by: Viraj Jasani <vjasani@apache.org>
HBASE-24650 Change the return types of the new CheckAndMutate methods introduced in HBASE-8458 (#1991)

Signed-off-by: Duo Zhang <zhangduo@apache.org>HBASE-24650 Change the return types of the new CheckAndMutate methods introduced in HBASE-8458 (#1991)

Signed-off-by: Duo Zhang <zhangduo@apache.org>HBASE-24588 : Submit task for NormalizationPlan (#1933)

Signed-off-by: Nick Dimiduk <ndimiduk@apache.org>HBASE-24588 : Submit task for NormalizationPlan (#1933)

Signed-off-by: Nick Dimiduk <ndimiduk@apache.org>HBASE-24588 : Submit task for NormalizationPlan (#1933)

Signed-off-by: Nick Dimiduk <ndimiduk@apache.org>HBASE-24588 : Submit task for NormalizationPlan (#1933)

Signed-off-by: Nick Dimiduk <ndimiduk@apache.org>HBASE-8458 Support for batch version of checkAndMutate()

Closes #1648

Signed-off-by: Josh Elser <elserj@apache.org>
HBASE-8458 Support for batch version of checkAndMutate()

Closes #1648

Signed-off-by: Josh Elser <elserj@apache.org>
HBASE-24367 ScheduledChore log elapsed timespan in a human-friendly format (#1749)

Signed-off-by: Nick Dimiduk <ndimiduk@apache.org>
Signed-off-by: Guanghao Zhang <zghao@apache.org>
Signed-off-by: Viraj Jasani <vjasani@apache.org>HBASE-24471 The way we bootstrap meta table is confusing (#1806)

Signed-off-by: Michael Stack <stack@apache.org>HBASE-23912 Resolve the TODO of FSTableDescriptor's construct method (#1225)

Signed-off-by: Duo Zhang <zhangduo@apache.org>HBASE-23868 : Replace usages of HColumnDescriptor(byte [] familyName)… (#1222)

Signed-off-by: Jan Hentschel <janh@apache.org>HBASE-23868 : Replace usages of HColumnDescriptor(byte [] familyName)… (#1222)

Signed-off-by: Jan Hentschel <janh@apache.org>HBASE-23899 [Flakey Test] Stabilizations and Debug

A miscellaney. Add extra logging to help w/ debug to a bunch of tests.
Fix some issues particular where we ran into mismatched filesystem
complaint. Some modernizations, removal of unnecessary deletes
(especially after seeing tests fail in table delete), and cleanup.
Recategorized one tests because it starts four clusters in the one
JVM from  medium to large. Finally, zk standalone server won't come
on occasion; added debug and thread dumping to help figure why (
manifests as test failing in startup saying master didn't launch).

hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/snapshot/TestExportSnapshot.java
  Fixes occasional mismatched filesystems where the difference is file:// vs file:///
  or we pick up hdfs schema when it a local fs test. Had to do this
  vetting of how we do make qualified on a Path in a few places, not
  just here as a few tests failed with this same issue. Code in here is
  used by a lot of tests that each in turn suffered this mismatch.

  Refactor for clarity

hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/snapshot/TestExportSnapshotV1NoCluster.java
  Unused import.

hbase-procedure/src/test/java/org/apache/hadoop/hbase/procedure2/store/wal/TestWALProcedureStore.java
  This test fails if tmp dir is not where it expects because tries to
  make rootdir there. Give it a rootdir under test data dir.

hbase-server/src/test/java/org/apache/hadoop/hbase/TestZooKeeper.java
  This change is probably useless. I think the issue is actually
  a problem addressed later where our test for zk server being
  up gets stuck and never times out.

hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestSplitOrMergeStatus.java
 Move off deprecated APIs.

hbase-server/src/test/java/org/apache/hadoop/hbase/master/balancer/BalancerTestBase.java
 Log when we fail balance check for DEBUG Currently just says 'false'

hbase-server/src/test/java/org/apache/hadoop/hbase/master/procedure/TestSplitWALProcedure.java
 NPEs on way out if setup failed.

hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestCompaction.java
 Add logging when assert fails to help w/ DEBUG

hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestRegionServerAbortTimeout.java
 Don't bother removing stuff on teardown. All gets thrown away anyways.
 Saw a few hangs in here in the teardown where hdfs was down before
 expected messing up shutdown.

hbase-zookeeper/src/main/java/org/apache/hadoop/hbase/zookeeper/MiniZooKeeperCluster.java
 Add timeout on socket; was seeing check for zk server getting stuck
 and never timing out (test time out in startup)

hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/snapshot/TestExportSnapshotWithTemporaryDirectory.java
 Write to test data dir instead.
 Be careful about how we make qualified paths.

hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/mapreduce/TestTableInputFormatScanBase.java
 Remove snowflake configs.

hbase-server/src/test/java/org/apache/hadoop/hbase/replication/TestReplicationStatus.java
 Add a hacky pause. Tried adding barriers but didn't work. Needs deep
 dive.

hbase-zookeeper/src/main/java/org/apache/hadoop/hbase/zookeeper/MiniZooKeeperCluster.java
 Remove code copied from zk and use zk methods directly instead.
 A general problem is that zk cluster doesn't come up occasionally but
 no clue why. Add thread dumping and state check.
HBASE-23899 [Flakey Test] Stabilizations and Debug

A miscellaney. Add extra logging to help w/ debug to a bunch of tests.
Fix some issues particular where we ran into mismatched filesystem
complaint. Some modernizations, removal of unnecessary deletes
(especially after seeing tests fail in table delete), and cleanup.
Recategorized one tests because it starts four clusters in the one
JVM from  medium to large. Finally, zk standalone server won't come
on occasion; added debug and thread dumping to help figure why (
manifests as test failing in startup saying master didn't launch).

hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/snapshot/TestExportSnapshot.java
  Fixes occasional mismatched filesystems where the difference is file:// vs file:///
  or we pick up hdfs schema when it a local fs test. Had to do this
  vetting of how we do make qualified on a Path in a few places, not
  just here as a few tests failed with this same issue. Code in here is
  used by a lot of tests that each in turn suffered this mismatch.

  Refactor for clarity

hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/snapshot/TestExportSnapshotV1NoCluster.java
  Unused import.

hbase-procedure/src/test/java/org/apache/hadoop/hbase/procedure2/store/wal/TestWALProcedureStore.java
  This test fails if tmp dir is not where it expects because tries to
  make rootdir there. Give it a rootdir under test data dir.

hbase-server/src/test/java/org/apache/hadoop/hbase/TestZooKeeper.java
  This change is probably useless. I think the issue is actually
  a problem addressed later where our test for zk server being
  up gets stuck and never times out.

hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestSplitOrMergeStatus.java
 Move off deprecated APIs.

hbase-server/src/test/java/org/apache/hadoop/hbase/master/balancer/BalancerTestBase.java
 Log when we fail balance check for DEBUG Currently just says 'false'

hbase-server/src/test/java/org/apache/hadoop/hbase/master/procedure/TestSplitWALProcedure.java
 NPEs on way out if setup failed.

hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestCompaction.java
 Add logging when assert fails to help w/ DEBUG

hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestRegionServerAbortTimeout.java
 Don't bother removing stuff on teardown. All gets thrown away anyways.
 Saw a few hangs in here in the teardown where hdfs was down before
 expected messing up shutdown.

hbase-zookeeper/src/main/java/org/apache/hadoop/hbase/zookeeper/MiniZooKeeperCluster.java
 Add timeout on socket; was seeing check for zk server getting stuck
 and never timing out (test time out in startup)

hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/snapshot/TestExportSnapshotWithTemporaryDirectory.java
 Write to test data dir instead.
 Be careful about how we make qualified paths.

hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/mapreduce/TestTableInputFormatScanBase.java
 Remove snowflake configs.

hbase-server/src/test/java/org/apache/hadoop/hbase/replication/TestReplicationStatus.java
 Add a hacky pause. Tried adding barriers but didn't work. Needs deep
 dive.

hbase-zookeeper/src/main/java/org/apache/hadoop/hbase/zookeeper/MiniZooKeeperCluster.java
 Remove code copied from zk and use zk methods directly instead.
 A general problem is that zk cluster doesn't come up occasionally but
 no clue why. Add thread dumping and state check.
HBASE-23802 Remove unnecessary Configuration instantiation in LossyAccounting (#1127)

Signed-off-by: stack <stack@apache.org>HBASE-23596 HBCKServerCrashProcedure can double assign

Signed-off-by: Duo Zhang <zhangduo@apache.org>
Signed-off-by: Lijin Bin <binlijin@apache.org>
Signed-off-by: Viraj Jasani <vjasani@apache.org>

Change its behavior so it will only look in hbase:meta
if the call to the super class turns up zero references.
Only then will it search hbase:meta for references to
'Unknown Servers'. Normal operation where we read Master
context is usual and sufficient. The scan of hbase:meta
is only for case where Master state has been corrupted
and we need to clear out 'Unknown Servers'.
HBASE-23596 HBCKServerCrashProcedure can double assign

Signed-off-by: Duo Zhang <zhangduo@apache.org>
Signed-off-by: Lijin Bin <binlijin@apache.org>
Signed-off-by: Viraj Jasani <vjasani@apache.org>

Change its behavior so it will only look in hbase:meta
if the call to the super class turns up zero references.
Only then will it search hbase:meta for references to
'Unknown Servers'. Normal operation where we read Master
context is usual and sufficient. The scan of hbase:meta
is only for case where Master state has been corrupted
and we need to clear out 'Unknown Servers'.
HBASE-23065 [hbtop] Top-N heavy hitter user and client drill downs

Signed-off-by: Toshihiro Suzuki <brfrn169@gmail.com>
Signed-off-by: Josh Elser <elserj@apache.org>
Signed-off-by: Andrew Purtell <apurtell@apache.org>
HBASE-23065 [hbtop] Top-N heavy hitter user and client drill downs

Signed-off-by: Toshihiro Suzuki <brfrn169@gmail.com>
Signed-off-by: Josh Elser <elserj@apache.org>
Signed-off-by: Andrew Purtell <apurtell@apache.org>
HBASE-23065 [hbtop] Top-N heavy hitter user and client drill downs

Signed-off-by: Toshihiro Suzuki <brfrn169@gmail.com>
Signed-off-by: Josh Elser <elserj@apache.org>
Signed-off-by: Andrew Purtell <apurtell@apache.org>
HBASE-23065 [hbtop] Top-N heavy hitter user and client drill downs

Signed-off-by: Toshihiro Suzuki <brfrn169@gmail.com>
Signed-off-by: Josh Elser <elserj@apache.org>
Signed-off-by: Andrew Purtell <apurtell@apache.org>
HBASE-23065 [hbtop] Top-N heavy hitter user and client drill downs

Signed-off-by: Toshihiro Suzuki <brfrn169@gmail.com>
Signed-off-by: Josh Elser <elserj@apache.org>
Signed-off-by: Andrew Purtell <apurtell@apache.org>
HBASE-23065 [hbtop] Top-N heavy hitter user and client drill downs

Signed-off-by: Toshihiro Suzuki <brfrn169@gmail.com>
Signed-off-by: Josh Elser <elserj@apache.org>
Signed-off-by: Andrew Purtell <apurtell@apache.org>
HBASE-23065 [hbtop] Top-N heavy hitter user and client drill downs

Signed-off-by: Toshihiro Suzuki <brfrn169@gmail.com>
Signed-off-by: Josh Elser <elserj@apache.org>
Signed-off-by: Andrew Purtell <apurtell@apache.org>
HBASE-23065 [hbtop] Top-N heavy hitter user and client drill downs

Signed-off-by: Toshihiro Suzuki <brfrn169@gmail.com>
Signed-off-by: Josh Elser <elserj@apache.org>
Signed-off-by: Andrew Purtell <apurtell@apache.org>
HBASE-23065 [hbtop] Top-N heavy hitter user and client drill downs

Signed-off-by: Toshihiro Suzuki <brfrn169@gmail.com>
Signed-off-by: Josh Elser <elserj@apache.org>
Signed-off-by: Andrew Purtell <apurtell@apache.org>
HBASE-23575 Remove dead code in AsyncRegistry (#929)

Removes a bunch of dead code and fixes some checkstyle nits.

Signed-off-by: Viraj Jasani <virajjasani007@gmail.com>
Signed-off-by: Sean Busbey <busbey@apache.org>
HBASE-23575 Remove dead code in AsyncRegistry (#929)

Removes a bunch of dead code and fixes some checkstyle nits.

Signed-off-by: Viraj Jasani <virajjasani007@gmail.com>
Signed-off-by: Sean Busbey <busbey@apache.org>
HBASE-23170 Admin#getRegionServers use ClusterMetrics.Option.SERVERS_NAME (#721)

HBASE-23093 Avoid Optional Anti-Pattern where possible (#673)

Signed-off-by: Peter Somogyi <psomogyi@apache.org>
Signed-off-by: Duo Zhang <zhangduo@apache.org>    HBASE-23055 Alter hbase:meta (#667)

Make it so hbase:meta can be altered. TableState for hbase:meta
    is kept in Master. State is in-memory transient so if  Master
    fails, hbase:meta is ENABLED again. hbase:meta schema will be
    bootstrapped from the filesystem. Changes to filesystem schema
    are atomic so we should be ok if Master fails mid-edit (TBD)
    Undoes a bunch of guards that prevented our being able to edit
    hbase:meta. At minimmum, need to add in a bunch of WARNING.

    TODO: Tests, more clarity around hbase:meta table state, and undoing
    references to hard-coded hbase:meta regioninfo.

    M hbase-client/src/main/java/org/apache/hadoop/hbase/MetaTableAccessor.java
     Throw illegal access exception if you try to use MetaTableAccessor
     getting state of the hbase:meta table.

    M hbase-client/src/main/java/org/apache/hadoop/hbase/client/ConnectionImplementation.java
     For table state, go to master rather than go to meta direct. Going
     to meta won't work for hbase;meta state. Puts load on Master.

    M hbase-client/src/main/java/org/apache/hadoop/hbase/client/HBaseAdmin.java
     Change isTableDisabled/Enabled implementation to ask the Master instead.
     This will give the Master's TableStateManager's opinion rather than
     client figuring it for themselves reading meta table direct.

    M hbase-client/src/main/java/org/apache/hadoop/hbase/client/RawAsyncHBaseAdmin.java
     TODO: Cleanup in here. Go to master for state, not to meta.

    M hbase-client/src/main/java/org/apache/hadoop/hbase/client/ZKAsyncRegistry.java
     Logging cleanup.

    M hbase-client/src/main/java/org/apache/hadoop/hbase/zookeeper/ZNodePaths.java
     Shutdown access.

    M hbase-server/src/main/java/org/apache/hadoop/hbase/TableDescriptors.java
     Just cleanup.

    M hbase-server/src/main/java/org/apache/hadoop/hbase/master/TableStateManager.java
     Add state holder for hbase:meta.
     Removed unused methods.

    M hbase-server/src/main/java/org/apache/hadoop/hbase/master/assignment/RegionStateStore.java
     Shut down access.

    M hbase-server/src/main/java/org/apache/hadoop/hbase/master/procedure/DisableTableProcedure.java
     Allow hbase:meta to be disabled.

    M hbase-server/src/main/java/org/apache/hadoop/hbase/master/procedure/EnableTableProcedure.java
     Allow hbase:meta to be enabled.

 Signed-off-by: Ramkrishna <ramkrishna.s.vasudevan@intel.com>HBASE-22539 WAL corruption due to early DBBs re-use when Durability.ASYNC_WAL is used (#437)

Signed-off-by: Zheng Hu <openinx@gmail.com>HBASE-22539 WAL corruption due to early DBBs re-use when Durability.ASYNC_WAL is used (#437)

Signed-off-by: Zheng Hu <openinx@gmail.com>HBASE-22539 WAL corruption due to early DBBs re-use when Durability.ASYNC_WAL is used (#437)

Signed-off-by: Zheng Hu <openinx@gmail.com>HBASE-22580 Add a table attribute to make user scan snapshot feature configurable for table (#336)

HBASE-22580 Add a table attribute to make user scan snapshot feature configurable for table (#336)

HBASE-22580 Add a table attribute to make user scan snapshot feature configurable for table (#336)

HBASE-22005 Use ByteBuff's refcnt to track the life cycle of data block
HBASE-22577 BufferedMutatorOverAsyncBufferedMutator.tryCompleteFuture consume too much CPU time
HBASE-22550 Throw exception when creating thread pool if the connection has already been closed
HBASE-21718 Implement Admin based on AsyncAdmin
HBASE-21779 Reimplement BulkLoadHFilesTool to use AsyncClusterConnection
HBASE-21658 Should get the meta replica number from zk instead of config at client side
HBASE-21883 Enhancements to Major Compaction tool

Signed-off-by: Andrew Purtell <apurtell@apache.org>
HBASE-21909 Validate the put instance before executing in AsyncTable.put method

Signed-off-by: Michael Stack <stack@apache.org>
HBASE-21829 Use FutureUtils.addListener instead of calling whenComplete directly
HBASE-21829 Use FutureUtils.addListener instead of calling whenComplete directly
HBASE-21734 Some optimization in FilterListWithOR
HBASE-21663 Add replica scan support
HBASE-17356 Add replica get support
HBASE-21508 Ignore the reportRegionStateTransition call from a dead server

Signed-off-by: Guanghao Zhang <zghao@apache.org>
HBASE-21420 Use procedure event to wake up the SyncReplicationReplayWALProcedures which wait for worker
HBASE-21355 HStore's storeSize is calculated repeatedly which causing the confusing region split
HBASE-20741 - Split of a region with replicas creates all daughter regions
and its replica in same server (Addendum for duo's comments in RB)
HBASE-20741 - Split of a region with replicas creates all daughter regions
and its replica in same server (Addendum for duo's comments in RB)
HBASE-20881 Introduce a region transition procedure to handle all the state transition for a region
HBASE-20881 Introduce a region transition procedure to handle all the state transition for a region
HBASE-20426 Give up replicating anything in S state
HBASE-20456 Support removing a ReplicationSourceShipper for a special wal group
HBASE-20182 Can not locate region after split and merge
HBASE-20296 Remove last pushed sequence ids when removing tables from a peer
HBASE-20296 Remove last pushed sequence ids when removing tables from a peer
HBASE-20148 Make serial replication as a option for a peer instead of a table
HBASE-20148 Make serial replication as a option for a peer instead of a table
HBASE-20048 Revert serial replication feature
HBASE-18294 Reduce global heap pressure: flush based on heap occupancy
HBASE-19904 Break dependency of WAL constructor on Replication
HBASE-19904 Break dependency of WAL constructor on Replication
HBASE-19753 Miscellany of fixes for hbase-zookeeper tests to make them more robust

First, we add test resources to CLASSPATH when tests run. W/o it, there
was no logging of hbase-zookeeper test output (not sure why I have to
add this here and not over in hbase-server; research turns up nothing
so far).

M hbase-zookeeper/src/main/java/org/apache/hadoop/hbase/zookeeper/ZKMainServer.java
 Improve fail log message.

M hbase-zookeeper/src/test/java/org/apache/hadoop/hbase/zookeeper/TestReadOnlyZKClient.java
M hbase-zookeeper/src/test/java/org/apache/hadoop/hbase/zookeeper/TestZKNodeTracker.java
 Wait until ZK is connected before progressing. On my slow zk, it could
 be a while post construction before zk connected. Using an unconnected
 zk caused test to fail.

M hbase-zookeeper/src/test/java/org/apache/hadoop/hbase/zookeeper/TestZKMainServer.java
 Change session timeout to default 30s from 1s which was way too short.

M hbase-zookeeper/src/test/resources/log4j.properties
 Set zk logs to DEBUG level in this module at least.

Adds a ZooKeeperHelper class that has utility to help interacting w/ ZK.
HBASE-19753 Miscellany of fixes for hbase-zookeeper tests to make them more robust

First, we add test resources to CLASSPATH when tests run. W/o it, there
was no logging of hbase-zookeeper test output (not sure why I have to
add this here and not over in hbase-server; research turns up nothing
so far).

M hbase-zookeeper/src/main/java/org/apache/hadoop/hbase/zookeeper/ZKMainServer.java
 Improve fail log message.

M hbase-zookeeper/src/test/java/org/apache/hadoop/hbase/zookeeper/TestReadOnlyZKClient.java
M hbase-zookeeper/src/test/java/org/apache/hadoop/hbase/zookeeper/TestZKNodeTracker.java
 Wait until ZK is connected before progressing. On my slow zk, it could
 be a while post construction before zk connected. Using an unconnected
 zk caused test to fail.

M hbase-zookeeper/src/test/java/org/apache/hadoop/hbase/zookeeper/TestZKMainServer.java
 Change session timeout to default 30s from 1s which was way too short.

M hbase-zookeeper/src/test/resources/log4j.properties
 Set zk logs to DEBUG level in this module at least.

Adds a ZooKeeperHelper class that has utility to help interacting w/ ZK.
HBASE-19357 Bucket cache no longer L2 for LRU cache.
HBASE-19357 Bucket cache no longer L2 for LRU cache.
HBASE-19344 improve asyncWAL by using Independent thread for netty #IO in FanOutOneBlockAsyncDFSOutput
HBASE-19346 Use EventLoopGroup to create AsyncFSOutput
HBASE-19346 Use EventLoopGroup to create AsyncFSOutput
HBASE-19346 Use EventLoopGroup to create AsyncFSOutput
HBASE-19346 Use EventLoopGroup to create AsyncFSOutput
HBASE-19346 Use EventLoopGroup to create AsyncFSOutput
HBASE-19251 Merge RawAsyncTable and AsyncTable
HBASE-19251 Merge RawAsyncTable and AsyncTable
HBASE-19251 Merge RawAsyncTable and AsyncTable
HBASE-19251 Merge RawAsyncTable and AsyncTable
HBASE-18950 Remove Optional parameters in AsyncAdmin interface
HBASE-18950 Remove Optional parameters in AsyncAdmin interface
HBASE-18950 Remove Optional parameters in AsyncAdmin interface
HBASE-18950 Remove Optional parameters in AsyncAdmin interface
HBASE-18950 Remove Optional parameters in AsyncAdmin interface
HBASE-19033 Allow CP users to change versions and TTL before opening StoreScanner
HBASE-19033 Allow CP users to change versions and TTL before opening StoreScanner
HBASE-19033 Allow CP users to change versions and TTL before opening StoreScanner
HBASE-19069 Do not wrap the original CompactionLifeCycleTracker when calling CP hooks
HBASE-19069 Do not wrap the original CompactionLifeCycleTracker when calling CP hooks
HBASE-18914 Remove AsyncAdmin's methods which were already deprecated in Admin interface
HBASE-18914 Remove AsyncAdmin's methods which were already deprecated in Admin interface
HBASE-18914 Remove AsyncAdmin's methods which were already deprecated in Admin interface
HBASE-18815 We need to pass something like CompactionRequest in CP to give user some information about the compaction

CompactionRequest was removed from CP in HBASE-18453, this change reintroduces
CompatcionRequest to CP as a read-only interface called CompactionRequest.
The CompactionRequest class is renamed to CompactionRequestImpl.

Additionally, this change removes selectionTimeInNanos from CompactionRequest and
uses selectionTime as a replacement. This means that CompactionRequest:toString
is modified and compare as well.

Signed-off-by: Michael Stack <stack@apache.org>
HBASE-18839 Apply RegionInfo to code base
HBASE-17980 Any HRegionInfo we give out should be immutable

Signed-off-by: Michael Stack <stack@apache.org>
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18283 Provide a construct method which accept a thread pool for AsyncAdmin
HBASE-18068 Fix flaky test TestAsyncSnapshotAdminApi

- internalRestoreSnapshot() returns future which completes by just getting proc_id from master. Changed it to wait for the procedure to complete.
- Refactor TestAsyncSnapshotAdminApi: Add cleanup() which deletes all tables and snapshots after every test run. Simplifies individual tests.

Change-Id: Idc30fb699db32d58fd0f60da220953a430f1d3cc
HBASE-17740 Correct the semantic of batch and partial for async client
HBASE-17740 Correct the semantic of batch and partial for async client
HBASE-17740 Correct the semantic of batch and partial for async client
HBASE-17740 Correct the semantic of batch and partial for async client
HBASE-17740 Correct the semantic of batch and partial for async client
HBASE-17740 Correct the semantic of batch and partial for async client
HBASE-16991 Make the initialization of AsyncConnection asynchronous
HBASE-17511 Implement enable/disable table methods
HBASE-17372 Make AsyncTable thread safe
HBASE-17372 Make AsyncTable thread safe
HBASE-17372 Make AsyncTable thread safe
HBASE-17372 Make AsyncTable thread safe
HBASE-17372 Make AsyncTable thread safe
HBASE-17372 Make AsyncTable thread safe
HBASE-17372 Make AsyncTable thread safe
HBASE-17372 Make AsyncTable thread safe
HBASE-17141 Introduce a more user-friendly implementation of AsyncTable
HBASE-17141 Introduce a more user-friendly implementation of AsyncTable
HBASE-17141 Introduce a more user-friendly implementation of AsyncTable
HBASE-17141 Introduce a more user-friendly implementation of AsyncTable
HBASE-17141 Introduce a more user-friendly implementation of AsyncTable
HBASE-17141 Introduce a more user-friendly implementation of AsyncTable
HBASE-17141 Introduce a more user-friendly implementation of AsyncTable
HBASE-17141 Introduce a more user-friendly implementation of AsyncTable
HBASE-17141 Introduce a more user-friendly implementation of AsyncTable
HBASE-16945 Implement AsyncRegionLocator
HBASE-16945 Implement AsyncRegionLocator
HBASE-16836 Implement increment and append
HIVE-24274: Implement Query Text based MaterializedView rewrite (Krisztian Kasa, reviewed by Jesus Camacho Rodriguez)

HIVE-23197: Implement selective purge for LRFU (Adam Szita, reviewed by Antal Sinkovits and Peter Vary)

HIVE-23197: Implement selective purge for LRFU (Adam Szita, reviewed by Antal Sinkovits and Peter Vary)

HIVE-24176: Create query-level cache for HMS requests and extend existing local HS2 HMS cache (Jesus Camacho Rodriguez, reviewed by Vineet Garg)

Closes apache/hive#1504HIVE-23703: Major QB compaction with multiple FileSinkOperators results in data loss and one original file (Karen Coppage reviewed by Marta Kuczora))

Closes #1134HIVE-23703: Major QB compaction with multiple FileSinkOperators results in data loss and one original file (Karen Coppage reviewed by Marta Kuczora))

Closes #1134HIVE-23703: Major QB compaction with multiple FileSinkOperators results in data loss and one original file (Karen Coppage reviewed by Marta Kuczora))

Closes #1134HIVE-22499 : LLAP: Add an EncodedReaderOptions to extend ORC impl for options (Mustafa Iman via Slim Bouguerra)

Signed-off-by: Ashutosh Chauhan <hashutosh@apache.org>
HIVE-22414: Make LLAP CacheTags more memory efficient (Adam Szita, reviewed by Peter Vary)
HIVE-21114: Create read-only transactions (Denys Kuzmenko, reviewed by Ashutosh Bapat and Peter Vary)
HIVE-21965: Implement parallel processing in HiveStrictManagedMigration (Krisztian Kasa via Zoltan Haindrich)

Signed-off-by: Zoltan Haindrich <kirk@rxd.hu>
HIVE-20546 : Upgrade to Apache Druid 0.13.0-incubating (Nishant Bangarwa via Ashutosh Chauhan)

Signed-off-by: Ashutosh Chauhan <hashutosh@apache.org>
HIVE-20682: Async query execution can potentially fail if shared sessionHive is closed by master thread (Sankar Hariappan, reviewed by Mahesh Kumar Behera, Anishek Agarwal)
HIVE-20903: Some minor refactor to the Druid Storage Handler without any change in logic (Slim B reviewed by Ashutosh Chauhan)
HIVE-20486: Vectorization support for Kafka Storage Handler (Slim Bouguerra, reviewd by V. Gopal)
HIVE-20383: Invalid queue name and synchronisation issues in hive proto events hook.(Harish JP, reviewd by Anishek Agarwal)
BUG-108021 / BUG-108287 / HIVE-20383 : Invalid queue name and synchronisation issues in hive proto events hook. (Harish JP, reviewd by Anishek Agarwal)
HIVE-20007: Hive should carry out timestamp computations in UTC (Jesus Camacho Rodriguez, reviewed by Ashutosh Chauhan)
HIVE-12192 : Hive should carry out timestamp computations in UTC (Jesus Camacho Rodriguez via Ashutosh Chauhan)

Signed-off-by: Ashutosh Chauhan <hashutosh@apache.org>
HIVE-18771: Refactor tests, so only 1 MetaStore instance will be started per test class and test configuration (Peter Vary, reviewed by Sahil Takiar)
HIVE-18341: Add repl load support for adding "raw" namespace for TDE with same encryption keys (Anishek Agarwal, reviewed Daniel Dai)
refactoredcosmeticscosmeticsrefactoredrefactoredrefactoredMYFACES-4345 ClientWindow url rendering doesn't follow the specsMYFACES-4337 [perf] avoid lambda instances / computeIfAbsentMYFACES-4337 [perf] avoid lambda instances / computeIfAbsentMYFACES-4337 [perf] avoid lambda instances / computeIfAbsentMYFACES-4337 [perf] avoid lambda instances / computeIfAbsentMYFACES-4337 [perf] avoid lambda instances / computeIfAbsentMYFACES-4337 [perf] avoid lambda instances / computeIfAbsentMYFACES-4337 [perf] avoid lambda instances / computeIfAbsentMYFACES-4337 [perf] avoid lambda instances / computeIfAbsentMYFACES-4337 [perf] avoid lambda instances / computeIfAbsentMYFACES-4337 [perf] avoid lambda instances / computeIfAbsentMYFACES-4337 [perf] avoid lambda instances / computeIfAbsentMYFACES-4337 [perf] avoid lambda instances / computeIfAbsentMYFACES-4337 [perf] avoid lambda instances / computeIfAbsentMYFACES-4337 [perf] avoid lambda instances / computeIfAbsentMYFACES-4337 [perf] avoid lambda instances / computeIfAbsentMYFACES-4337 [perf] avoid lambda instances / computeIfAbsentMYFACES-4337 [perf] avoid lambda instances / computeIfAbsentMYFACES-4337 [perf] avoid lambda instances / computeIfAbsentMYFACES-4337 [perf] avoid lambda instances / computeIfAbsentMYFACES-4337 [perf] avoid lambda instances / computeIfAbsentMYFACES-4337 [perf] avoid lambda instances / computeIfAbsentMYFACES-4337 [perf] avoid lambda instances / computeIfAbsentMYFACES-4337 [perf] avoid lambda instances / computeIfAbsentMYFACES-4337 [perf] avoid lambda instances / computeIfAbsentMYFACES-4337 [perf] avoid lambda instances / computeIfAbsentMYFACES-4337 [perf] avoid lambda instances / computeIfAbsentMYFACES-4337 [perf] avoid lambda instances / computeIfAbsentMYFACES-4337 [perf] avoid lambda instances / computeIfAbsentMYFACES-4337 [perf] avoid lambda instances / computeIfAbsentMYFACES-4337 [perf] avoid lambda instances / computeIfAbsentMYFACES-4337 [perf] avoid lambda instances / computeIfAbsentMYFACES-4337 [perf] avoid lambda instances / computeIfAbsentMYFACES-4337 [perf] avoid lambda instances / computeIfAbsentmoved PF to own methods and collect all public @Named beansfixed aboslute orderingfixed aboslute orderingunused varAdded handler for workDone cancel notifications.
StatusDisplayer messages remoted to LSP client. (#2478)

* StatusDisplayer messages remoted to vscode.

* Extended capabilities negotiated with the client.Validation of breakpoints in VSCode extension.
Adding support for clangd to the lightweight C/C++ support

Adding support for clangd to the lightweight C/C++ support

Allow Gradle projects to be opened instantly
[NETBEANS-4294] . Refactored plugin to remove most of the listeners, wrong WeakReferecnes, opted to use Lifecicle saveall option and refactored the Options dialog as review discussion;
. Removed all OmegaT related files;
. Removed help files and translations;[NETBEANS-4294] . Refactored plugin to remove most of the listeners, wrong WeakReferecnes, opted to use Lifecicle saveall option and refactored the Options dialog as review discussion;
. Removed all OmegaT related files;
. Removed help files and translations;Revert "[NETBEANS-4039] Added SPI for Preferred Color Profile Changes"
Use method references instead of lambda expressions when possible
Use method references instead of lambda expressions when possible
Use method references instead of lambda expressions when possible
Use method references instead of lambda expressions when possible
Use method references instead of lambda expressions when possible
Use method references instead of lambda expressions when possible
Use method references instead of lambda expressions when possible
Update Commons Pool to 2.8.1
Fix various potential timing issues with this test.

On the client side messages were sent via the async API in a loop. That
creates a risk of breakage as it is not permitted to send the next
message until the previous message completes and the client wasn't
checking that the previous message had completed. SWitching to the basic
API avoids this.

On the server side, resume() was being called inside an async callback.
It was possible for resume() to be called and one or more messages to be
processed before the call to messages.clear(). Switching to the basic
API allows the order to be controlled correctly.